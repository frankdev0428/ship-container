{
  "swagger": "2.0",
  "host": "staging.aeler.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "info": {
    "title": "Aeler demo",
    "version": "1.0.0"
  },
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [],
  "paths": {
    "/alerts": {
      "get": {
        "summary": "get alerts",
        "operationId": "getAlerts",
        "parameters": [
          {
            "type": "number",
            "description": "the isNotResolved",
            "name": "includeResolved",
            "in": "query"
          },
          {
            "type": "string",
            "description": "the criterionId",
            "name": "criterionId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "the orderId",
            "name": "orderId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "the equipmentId",
            "name": "equipmentId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "the equipmentLeaseContractId",
            "name": "equipmentLeaseContractId",
            "in": "query"
          },
          {
            "type": "number",
            "description": "shouldIncludeVisibilityState",
            "name": "shouldIncludeVisibilityState",
            "in": "query"
          }
        ],
        "tags": [
          "alerts"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model1"
            },
            "description": "The alerts"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The alerts do not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/allocations": {
      "get": {
        "summary": "get equipments",
        "operationId": "getAllocations",
        "parameters": [
          {
            "type": "number",
            "description": "0 | 1",
            "name": "includeContainerData",
            "in": "query"
          },
          {
            "type": "number",
            "description": "0 | 1",
            "name": "disableFilterDuplicates",
            "in": "query"
          },
          {
            "type": "array",
            "description": "the allocation IDs",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "equipmentLeaseContractIds",
            "in": "query"
          }
        ],
        "tags": [
          "allocations"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model2"
            },
            "description": "The equipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "summary": "Autocomplete customer names",
        "operationId": "getCustomers",
        "parameters": [
          {
            "type": "string",
            "description": "startswith",
            "name": "startswith",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "customers"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model3"
            },
            "description": "customer ids"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/depots": {
      "get": {
        "summary": "Autocomplete depots codes",
        "operationId": "getDepots",
        "parameters": [
          {
            "type": "string",
            "description": "startswith",
            "name": "startswith",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "depots"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model3"
            },
            "description": "customer ids"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/equipments": {
      "get": {
        "summary": "get equipments",
        "operationId": "getEquipments",
        "parameters": [
          {
            "type": "array",
            "description": "AVAILABLE | BLOCKED (and all subtypes of blocking statuses)",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "availableAfter",
            "name": "statusFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "availableUntil",
            "name": "statusTo",
            "in": "query"
          },
          {
            "type": "array",
            "description": "depotId",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "startStatusAtLocationId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "depotId",
            "name": "endStatusAtLocationId",
            "in": "query"
          }
        ],
        "tags": [
          "equipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model4"
            },
            "description": "The equipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/evalPiecewiseTimeseries": {
      "get": {
        "summary": "Eval Piecewise Timeseries",
        "operationId": "getEvalpiecewisetimeseries",
        "parameters": [
          {
            "type": "string",
            "description": "date",
            "name": "date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "timeSeriesId",
            "name": "timeSeriesId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "interpolation",
            "name": "interpolation",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "evalPiecewiseTimeseries"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model5"
            },
            "description": "timeseries value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The time series value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/evalStepsPiecewiseTimeseries": {
      "get": {
        "summary": "Eval Steps Piecewise Timeseries",
        "operationId": "getEvalstepspiecewisetimeseries",
        "parameters": [
          {
            "type": "string",
            "description": "date",
            "name": "date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "start date",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "timeSeriesId",
            "name": "timeSeriesId",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "evalStepsPiecewiseTimeseries"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model5"
            },
            "description": "timeseries value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The time series value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/leases": {
      "get": {
        "summary": "get equipment leases",
        "operationId": "getLeases",
        "parameters": [
          {
            "type": "string",
            "description": "the customerId",
            "name": "customerId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ASSIGNABLE | ONGOING",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "date at which to check the order status",
            "name": "statusAt",
            "in": "query"
          },
          {
            "type": "string",
            "description": "pickup depot ID",
            "name": "pickupLocationId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "dropoff depot ID",
            "name": "dropoffLocationId",
            "in": "query"
          }
        ],
        "tags": [
          "leases"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model6"
            },
            "description": "The equipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "post": {
        "summary": "create lease",
        "operationId": "postLeases",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/EquipmentLeaseInput"
            }
          }
        ],
        "tags": [
          "leases"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EquipmentLeaseWithStatuses"
            },
            "description": "The container"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The container does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete equipment leases",
        "operationId": "deleteLeases",
        "parameters": [
          {
            "type": "string",
            "description": "the order ID",
            "name": "orderId",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "leases"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model45"
            },
            "description": "The equipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The lease does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/locations": {
      "get": {
        "summary": "get location",
        "operationId": "getLocations",
        "parameters": [
          {
            "type": "string",
            "description": "availableAfter",
            "name": "nameStartsWith",
            "in": "query"
          }
        ],
        "tags": [
          "locations"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model7"
            },
            "description": "The location"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "post": {
        "summary": "FIXME",
        "operationId": "postLocations",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ExchangeLocationInput"
            }
          }
        ],
        "tags": [
          "locations"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ExchangeLocation"
            },
            "description": "The location"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/shipments": {
      "get": {
        "summary": "get shipments",
        "operationId": "getShipments",
        "parameters": [
          {
            "type": "string",
            "description": "status",
            "name": "status",
            "in": "query"
          }
        ],
        "tags": [
          "shipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model8"
            },
            "description": "The shipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The shipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "post": {
        "summary": "create shipment",
        "operationId": "postShipments",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ShipmentInput"
            }
          }
        ],
        "tags": [
          "shipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Shipment"
            },
            "description": "The shipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The shipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/allocations/{containerId}": {
      "get": {
        "summary": "get equipments",
        "operationId": "getAllocationsContainerid",
        "parameters": [
          {
            "type": "string",
            "description": "Container code",
            "name": "containerId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "allocation ID",
            "name": "equipmentLeaseContractId",
            "in": "query"
          },
          {
            "type": "number",
            "description": "limit number of points retrieved",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "number",
            "description": "0 | 1",
            "name": "disableFilterDuplicates",
            "in": "query"
          }
        ],
        "tags": [
          "allocations"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/PublicContainer"
            },
            "description": "The equipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/containers/{containerId}": {
      "get": {
        "summary": "get container",
        "operationId": "getContainersContainerid",
        "parameters": [
          {
            "type": "string",
            "description": "Container code",
            "name": "containerId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "containers"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ContainerWithProfile"
            },
            "description": "The container"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The container does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "patch": {
        "summary": "modify container",
        "operationId": "patchContainersContainerid",
        "parameters": [
          {
            "type": "string",
            "description": "container Id",
            "name": "containerId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ContainerPatchInput"
            }
          }
        ],
        "tags": [
          "containers"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Container"
            },
            "description": "The container"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The container does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/depots/contacts": {
      "get": {
        "summary": "Get depot contacts",
        "operationId": "getDepotsContacts",
        "parameters": [
          {
            "type": "string",
            "description": "depotId",
            "name": "depotId",
            "in": "query"
          }
        ],
        "tags": [
          "depots"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model9"
            },
            "description": "The location"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "post": {
        "summary": "Add depot contact",
        "operationId": "postDepotsContacts",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DepotContactInput"
            }
          }
        ],
        "tags": [
          "depots"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/PublicDepotContact"
            },
            "description": "The location"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/depots/inventory": {
      "get": {
        "summary": "get containers in a depot",
        "operationId": "getDepotsInventory",
        "parameters": [
          {
            "type": "string",
            "description": "depotId",
            "name": "depotId",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "depots"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model10"
            },
            "description": "containers"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/depots/stats": {
      "get": {
        "summary": "Autocomplete depots codes",
        "operationId": "getDepotsStats",
        "parameters": [
          {
            "type": "string",
            "description": "depotId",
            "name": "depotId",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "depots"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model11"
            },
            "description": "customer ids"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/devices/containers": {
      "get": {
        "summary": "get containers paired to devices",
        "operationId": "getDevicesContainers",
        "parameters": [
          {
            "type": "string",
            "description": "aeler | nexxiot | kizy",
            "name": "type",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "description": "The ids of the devices",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "deviceIds",
            "in": "query"
          },
          {
            "type": "number",
            "description": "use legacy board profiles, 1 --> true",
            "name": "useLegacy",
            "in": "query"
          }
        ],
        "tags": [
          "devices"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model12"
            },
            "description": "Pairing"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/equipments/{equipmentId}": {
      "get": {
        "summary": "get equipment",
        "operationId": "getEquipmentsEquipmentid",
        "parameters": [
          {
            "type": "string",
            "description": "Equipment code",
            "name": "equipmentId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "equipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/PublicEquipment"
            },
            "description": "The equipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/financials/costs": {
      "get": {
        "summary": "FIXME",
        "operationId": "getFinancialsCosts",
        "parameters": [
          {
            "type": "string",
            "description": "statusId",
            "name": "statusId",
            "in": "query"
          }
        ],
        "tags": [
          "financials"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model13"
            },
            "description": "The storage rate"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "post": {
        "summary": "FIXME",
        "operationId": "postFinancialsCosts",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/StatusCostInput"
            }
          }
        ],
        "tags": [
          "financials"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/StatusCost"
            },
            "description": "The storage rate"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/financials/lease": {
      "get": {
        "summary": "get lease rate",
        "operationId": "getFinancialsLease",
        "parameters": [
          {
            "type": "string",
            "description": "availableAfter",
            "name": "customerId",
            "in": "query"
          }
        ],
        "tags": [
          "financials"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model14"
            },
            "description": "The lease rate"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "post": {
        "summary": "FIXME",
        "operationId": "postFinancialsLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LeaseRateInput"
            }
          }
        ],
        "tags": [
          "financials"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/LeaseRate"
            },
            "description": "The lease rate"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/financials/move": {
      "get": {
        "summary": "get move cost",
        "operationId": "getFinancialsMove",
        "parameters": [
          {
            "type": "string",
            "description": "availableAfter",
            "name": "moveId",
            "in": "query"
          }
        ],
        "tags": [
          "financials"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model15"
            },
            "description": "The move cost"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "post": {
        "summary": "FIXME",
        "operationId": "postFinancialsMove",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MoveCostInput"
            }
          }
        ],
        "tags": [
          "financials"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MoveCost"
            },
            "description": "The move cost"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/financials/storage": {
      "get": {
        "summary": "get storange rate",
        "operationId": "getFinancialsStorage",
        "parameters": [
          {
            "type": "string",
            "description": "availableAfter",
            "name": "depotId",
            "in": "query"
          }
        ],
        "tags": [
          "financials"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model16"
            },
            "description": "The storage rate"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "post": {
        "summary": "FIXME",
        "operationId": "postFinancialsStorage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/StorageRateInput"
            }
          }
        ],
        "tags": [
          "financials"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/PublicStorageRate"
            },
            "description": "The storage rate"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/AvailableBins": {
      "get": {
        "summary": "get binned availible containers per bin",
        "operationId": "getKpiAvailablebins",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "bins before range",
            "name": "nBefore",
            "in": "query"
          },
          {
            "type": "number",
            "description": "bins after range",
            "name": "nAfter",
            "in": "query"
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "num orders per says"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/OrderAcceptedNotReadyDailyBins": {
      "get": {
        "summary": "get binned accepted orders not ready per bin",
        "operationId": "getKpiOrderacceptednotreadydailybins",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "bins before range",
            "name": "nBefore",
            "in": "query"
          },
          {
            "type": "number",
            "description": "bins after range",
            "name": "nAfter",
            "in": "query"
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "num orders per says"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/avPctIdle": {
      "get": {
        "summary": "kpi av allocation",
        "operationId": "getKpiAvpctidle",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "activeOnly",
            "name": "activeOnly",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model18"
            },
            "description": "av idle time Kpi value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "utilization Kpi value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/avPctMnr": {
      "get": {
        "summary": "kpi av allocation",
        "operationId": "getKpiAvpctmnr",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "activeOnly",
            "name": "activeOnly",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model19"
            },
            "description": "av idle time Kpi value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "utilization Kpi value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/avPctUtilization": {
      "get": {
        "summary": "kpi av allocation",
        "operationId": "getKpiAvpctutilization",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "activeOnly",
            "name": "activeOnly",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "bins before range",
            "name": "nBefore",
            "in": "query"
          },
          {
            "type": "number",
            "description": "bins after range",
            "name": "nAfter",
            "in": "query"
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "av utilization Kpi value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "av utilization Kpi value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/containerAllocBreakDown": {
      "get": {
        "summary": "allocation breakdown",
        "operationId": "getKpiContainerallocbreakdown",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model20"
            },
            "description": "container alloc breakdown"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "container alloc breakdown",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/getAllocatedDays": {
      "get": {
        "summary": "get num Allocated Days",
        "operationId": "getKpiGetallocateddays",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "bins before range",
            "name": "nBefore",
            "in": "query"
          },
          {
            "type": "number",
            "description": "bins after range",
            "name": "nAfter",
            "in": "query"
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "num Allocated Days"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "num Allocated Days",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/getIdleDays": {
      "get": {
        "summary": "get num idle days",
        "operationId": "getKpiGetidledays",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "bins before range",
            "name": "nBefore",
            "in": "query"
          },
          {
            "type": "number",
            "description": "bins after range",
            "name": "nAfter",
            "in": "query"
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "num Idle days"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "num Idle",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/getOrderAcceptedAndReadyBin": {
      "get": {
        "summary": "kpi allocation",
        "operationId": "getKpiGetorderacceptedandreadybin",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model21"
            },
            "description": "order ready Kpi value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "utilization Kpi value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/getTotalOrdersBin": {
      "get": {
        "summary": "kpi allocation",
        "operationId": "getKpiGettotalordersbin",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model22"
            },
            "description": "utilization Kpi value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "utilization Kpi value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/idlePctBins": {
      "get": {
        "summary": "get binned order starts per bin",
        "operationId": "getKpiIdlepctbins",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "bins before range",
            "name": "nBefore",
            "in": "query"
          },
          {
            "type": "number",
            "description": "bins after range",
            "name": "nAfter",
            "in": "query"
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "num orders per says"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/orderAcceptedAndReadyBins": {
      "get": {
        "summary": "get binned order ends per bin",
        "operationId": "getKpiOrderacceptedandreadybins",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "bins before range",
            "name": "nBefore",
            "in": "query"
          },
          {
            "type": "number",
            "description": "bins after range",
            "name": "nAfter",
            "in": "query"
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "num orders per says"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/orderEnds": {
      "get": {
        "summary": "kpi mnr",
        "operationId": "getKpiOrderends",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model23"
            },
            "description": "Kpi value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "utilization Kpi value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/orderEndsBins": {
      "get": {
        "summary": "get binned order ends per bin",
        "operationId": "getKpiOrderendsbins",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "bins before range",
            "name": "nBefore",
            "in": "query"
          },
          {
            "type": "number",
            "description": "bins after range",
            "name": "nAfter",
            "in": "query"
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "num orders per says"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/orderEndsTimeSeries": {
      "get": {
        "summary": "get num orders starting per day",
        "operationId": "getKpiOrderendstimeseries",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "num orders per says"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/orderStartsBins": {
      "get": {
        "summary": "get binned order starts per bin",
        "operationId": "getKpiOrderstartsbins",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "bins before range",
            "name": "nBefore",
            "in": "query"
          },
          {
            "type": "number",
            "description": "bins after range",
            "name": "nAfter",
            "in": "query"
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "num orders per says"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/orderStartsTimeSeries": {
      "get": {
        "summary": "get num orders starting per day",
        "operationId": "getKpiOrderstartstimeseries",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "num orders per says"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/orderStatusCounts": {
      "get": {
        "summary": "status counts",
        "operationId": "getKpiOrderstatuscounts",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model24"
            },
            "description": "order status counts"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "container status counts",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/ordersByCustomer": {
      "get": {
        "summary": "kpi mnr",
        "operationId": "getKpiOrdersbycustomer",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model26"
            },
            "description": "Kpi value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "utilization Kpi value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/pctIdle": {
      "get": {
        "summary": "kpi allocation",
        "operationId": "getKpiPctidle",
        "parameters": [
          {
            "type": "string",
            "description": "equipmentId",
            "name": "equipmentId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model27"
            },
            "description": "Idle Kpi value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "Idle Kpi value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/pctMnr": {
      "get": {
        "summary": "kpi mnr",
        "operationId": "getKpiPctmnr",
        "parameters": [
          {
            "type": "string",
            "description": "equipmentId",
            "name": "equipmentId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model28"
            },
            "description": "Kpi value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "utilization Kpi value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/statusCounts": {
      "get": {
        "summary": "status counts",
        "operationId": "getKpiStatuscounts",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model29"
            },
            "description": "container status counts"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "container status counts",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/totalAv": {
      "get": {
        "summary": "availible counts",
        "operationId": "getKpiTotalav",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model30"
            },
            "description": "order status counts"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "availible counts",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/totalOrderBins": {
      "get": {
        "summary": "get binned order ends per bin",
        "operationId": "getKpiTotalorderbins",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "bins before range",
            "name": "nBefore",
            "in": "query"
          },
          {
            "type": "number",
            "description": "bins after range",
            "name": "nAfter",
            "in": "query"
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "num orders per says"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/utilizationDailyBins": {
      "get": {
        "summary": "get binned order starts per bin",
        "operationId": "getKpiUtilizationdailybins",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "bins before range",
            "name": "nBefore",
            "in": "query"
          },
          {
            "type": "number",
            "description": "bins after range",
            "name": "nAfter",
            "in": "query"
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "num orders per says"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/leases/visibilitycontract": {
      "get": {
        "summary": "FIXME",
        "operationId": "getLeasesVisibilitycontract",
        "parameters": [
          {
            "type": "string",
            "description": "equipmentLeaseContract Id",
            "name": "equipmentLeaseContractId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "leaseVisibilityContract Id",
            "name": "leaseVisibilityContractId",
            "in": "query"
          }
        ],
        "tags": [
          "leases"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/leasevisibilitycontracts"
            },
            "description": "The lease visibility contract"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment lease contract does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/shipments/{shipmentId}": {
      "get": {
        "summary": "get shipment",
        "operationId": "getShipmentsShipmentid",
        "parameters": [
          {
            "type": "string",
            "description": "Shipment code",
            "name": "shipmentId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "shipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Shipment"
            },
            "description": "The shipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The shipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/containers/{containerId}/board-pairing-profile": {
      "get": {
        "summary": "list container board pairing profile",
        "operationId": "getContainersContaineridBoardpairingprofile",
        "parameters": [
          {
            "type": "string",
            "description": "Container code",
            "name": "containerId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "containers"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/containerboardpairingprofiles"
            },
            "description": "The container board pairing profiles"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The container board pairing profile does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/equipments/{equipmentId}/leasecontracts": {
      "get": {
        "summary": "get equipment leases",
        "operationId": "getEquipmentsEquipmentidLeasecontracts",
        "parameters": [
          {
            "type": "string",
            "description": "Equipment code",
            "name": "equipmentId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "equipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model31"
            },
            "description": "The equipment lease contracts"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/equipments/{equipmentId}/moves": {
      "get": {
        "summary": "get equipment",
        "operationId": "getEquipmentsEquipmentidMoves",
        "parameters": [
          {
            "type": "string",
            "description": "Move Id",
            "name": "equipmentId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "equipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model32"
            },
            "description": "The equipment moves"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/orderStarts/": {
      "get": {
        "summary": "kpi mnr",
        "operationId": "getKpiOrderstarts",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model33"
            },
            "description": "Kpi value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "utilization Kpi value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/pctUtilization/": {
      "get": {
        "summary": "kpi allocation",
        "operationId": "getKpiPctutilization",
        "parameters": [
          {
            "type": "string",
            "description": "equipmentId",
            "name": "equipmentId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model34"
            },
            "description": "utilization Kpi value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "utilization Kpi value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/kpi/totalPctBlocked/": {
      "get": {
        "summary": "kpi allocation",
        "operationId": "getKpiTotalpctblocked",
        "parameters": [
          {
            "type": "string",
            "description": "startDate",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "endDate",
            "name": "endDate",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "kpi"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model35"
            },
            "description": "utilization Kpi value"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "utilization Kpi value",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/board-pairing-profile": {
      "post": {
        "summary": "add container board pairing profile",
        "operationId": "postBoardpairingprofile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ContainerBoardPairingProfilePostInput"
            }
          }
        ],
        "tags": [
          "board-pairing-profile"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/BoardsProfile"
            },
            "description": "The container board pairing profile"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The container board pairing profile does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "patch": {
        "summary": "modify board pairing",
        "operationId": "patchBoardpairingprofile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model43"
            }
          }
        ],
        "tags": [
          "board-pairing-profile"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/BoardsProfile"
            },
            "description": "The board pairing"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The board pairing does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "delete": {
        "summary": "delete board pairing",
        "operationId": "deleteBoardpairingprofile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ContainerBoardPairingProfileDeleteInput"
            }
          }
        ],
        "tags": [
          "board-pairing-profile"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model44"
            },
            "description": "The board pairing"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The board pairing does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/containers": {
      "post": {
        "summary": "postContainer",
        "operationId": "postContainers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ContainerInput"
            }
          }
        ],
        "tags": [
          "containers"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Container"
            },
            "description": "The container"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The container does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/postPiecewiseTimeSeries": {
      "post": {
        "summary": "postPiecewiseTimeSeries",
        "operationId": "postPostpiecewisetimeseries",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model36"
            }
          }
        ],
        "tags": [
          "postPiecewiseTimeSeries"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model37"
            },
            "description": "The timeseries"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The timeseries",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/postStepsPiecewiseTimeSeries": {
      "post": {
        "summary": "postStepsPiecewiseTimeSeries",
        "operationId": "postPoststepspiecewisetimeseries",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model36"
            }
          }
        ],
        "tags": [
          "postStepsPiecewiseTimeSeries"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model38"
            },
            "description": "The steps timeseries"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The timeseries",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/containers/{containerId}/panel-profile": {
      "post": {
        "summary": "add container panel profile",
        "operationId": "postContainersContaineridPanelprofile",
        "parameters": [
          {
            "type": "string",
            "description": "container Id",
            "name": "containerId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ContainerPanelProfileInput"
            }
          }
        ],
        "tags": [
          "containers"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ContainerPanelProfile"
            },
            "description": "The container panel profile"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The container panel profile does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/containers/{containerId}/sensors-profile": {
      "post": {
        "summary": "add container sensor profile",
        "operationId": "postContainersContaineridSensorsprofile",
        "parameters": [
          {
            "type": "string",
            "description": "container Id",
            "name": "containerId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ContainerSensorsProfileInput"
            }
          }
        ],
        "tags": [
          "containers"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ContainerSensorsProfile"
            },
            "description": "The container sensor profile"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The container sensor profile does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/equipments/{equipmentId}/contract": {
      "post": {
        "summary": "create equipment lease contract",
        "operationId": "postEquipmentsEquipmentidContract",
        "parameters": [
          {
            "type": "string",
            "description": "equipment Id",
            "name": "equipmentId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/EquipmentLeaseContractInput"
            }
          }
        ],
        "tags": [
          "equipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EquipmentLeaseContractWithLease"
            },
            "description": "The equipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/equipments/{equipmentId}/status": {
      "post": {
        "summary": "create equipment status",
        "operationId": "postEquipmentsEquipmentidStatus",
        "parameters": [
          {
            "type": "string",
            "description": "equipment Id",
            "name": "equipmentId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/EquipmentStatusInput"
            }
          }
        ],
        "tags": [
          "equipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EquipmentStatus"
            },
            "description": "The equipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/equipments/{equipmentId}/move": {
      "post": {
        "summary": "create equipment move",
        "operationId": "postEquipmentsEquipmentidMove",
        "parameters": [
          {
            "type": "string",
            "description": "equipment Id",
            "name": "equipmentId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/EquipmentMoveInput"
            }
          }
        ],
        "tags": [
          "equipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EquipmentMoveWithStatus"
            },
            "description": "The container"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The container does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/facilities/{facilityId}/inventory": {
      "post": {
        "summary": "filter Facilities",
        "operationId": "postFacilitiesFacilityidInventory",
        "parameters": [
          {
            "type": "string",
            "description": "facility Id",
            "name": "facilityId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model39"
            }
          }
        ],
        "tags": [
          "facilities"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model40"
            },
            "description": "Facility inventory"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The facility inv",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/leases/{equipmentLeaseContractId}/visibilitycontract": {
      "post": {
        "summary": "FIXME",
        "operationId": "postLeasesEquipmentleasecontractidVisibilitycontract",
        "parameters": [
          {
            "type": "string",
            "description": "equipmentLeaseContract Id",
            "name": "equipmentLeaseContractId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LeaseVisibilityInput"
            }
          }
        ],
        "tags": [
          "leases"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/LeaseVisibilityContract"
            },
            "description": "The lease visibility contract"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment lease contract does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/leases/{orderId}/bookingConfirmationEmail": {
      "post": {
        "summary": "Trigger sending a booking confirmation",
        "operationId": "postLeasesOrderidBookingconfirmationemail",
        "parameters": [
          {
            "type": "string",
            "description": "lease Id",
            "name": "orderId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "leases"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model41"
            },
            "description": "The status"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "No status",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/leases/{orderId}/status": {
      "post": {
        "summary": "create lease status",
        "operationId": "postLeasesOrderidStatus",
        "parameters": [
          {
            "type": "string",
            "description": "lease Id",
            "name": "orderId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/EquipmentLeaseStatusInput"
            }
          }
        ],
        "tags": [
          "leases"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EquipmentLeaseStatus"
            },
            "description": "The container"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The container does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/leases/{equipmentLeaseContractId}/toggle": {
      "post": {
        "summary": "toggle lease status",
        "operationId": "postLeasesEquipmentleasecontractidToggle",
        "parameters": [
          {
            "type": "string",
            "description": "equipment Id",
            "name": "equipmentLeaseContractId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "leases"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model42"
            },
            "description": "The equipment lease contract"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment lease contract does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/shipments/{shipmentId}/transport": {
      "post": {
        "summary": "create shipment transport",
        "operationId": "postShipmentsShipmentidTransport",
        "parameters": [
          {
            "type": "string",
            "description": "shipment Id",
            "name": "shipmentId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ShipmentTransportInput"
            }
          }
        ],
        "tags": [
          "shipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ShipmentTransport"
            },
            "description": "The shipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The shipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/shipments/{shipmentId}/status": {
      "post": {
        "summary": "create shipment status",
        "operationId": "postShipmentsShipmentidStatus",
        "parameters": [
          {
            "type": "string",
            "description": "shipment Id",
            "name": "shipmentId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ShipmentStatusInput"
            }
          }
        ],
        "tags": [
          "shipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ShipmentStatus"
            },
            "description": "The shipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The shipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/equipments/{equipmentId}/status/available": {
      "post": {
        "summary": "create equipment available status",
        "operationId": "postEquipmentsEquipmentidStatusAvailable",
        "parameters": [
          {
            "type": "string",
            "description": "equipment Id",
            "name": "equipmentId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/EquipmentStatusAvailableInput"
            }
          }
        ],
        "tags": [
          "equipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/PublicEquipment"
            },
            "description": "The equipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/leases/{orderId}": {
      "patch": {
        "summary": "create lease",
        "operationId": "patchLeasesOrderid",
        "parameters": [
          {
            "type": "string",
            "description": "lease Id",
            "name": "orderId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/EquipmentLeasePatchInput"
            }
          }
        ],
        "tags": [
          "leases"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EquipmentLeaseWithStatuses"
            },
            "description": "The container"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The container does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/equipments/leasecontract/{equipmentLeaseId}": {
      "patch": {
        "summary": "get equipment",
        "operationId": "patchEquipmentsLeasecontractEquipmentleaseid",
        "parameters": [
          {
            "type": "string",
            "description": "Equipment Lease code",
            "name": "equipmentLeaseId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/EquipmentLeaseUpdateInput"
            }
          }
        ],
        "tags": [
          "equipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EquipmentStatus"
            },
            "description": "The equipment status"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/financials/costs/{costId}": {
      "patch": {
        "summary": "FIXME",
        "operationId": "patchFinancialsCostsCostid",
        "parameters": [
          {
            "type": "string",
            "description": "Cost ID",
            "name": "costId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/StatusCostInput"
            }
          }
        ],
        "tags": [
          "financials"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/StatusCost"
            },
            "description": "The storage rate"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "delete": {
        "summary": "FIXME",
        "operationId": "deleteFinancialsCostsCostid",
        "parameters": [
          {
            "type": "string",
            "description": "Cost ID",
            "name": "costId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "financials"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model46"
            },
            "description": "The storage rate"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The location does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/depots/{depotId}/contacts/{contactId}": {
      "patch": {
        "summary": "Update depot contact",
        "operationId": "patchDepotsDepotidContactsContactid",
        "parameters": [
          {
            "type": "string",
            "description": "depot Id",
            "name": "depotId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "contact Id",
            "name": "contactId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchDepotContactInput"
            }
          }
        ],
        "tags": [
          "depots"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/PublicDepotContact"
            },
            "description": "The equipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove depot contact",
        "operationId": "deleteDepotsDepotidContactsContactid",
        "parameters": [
          {
            "type": "string",
            "description": "depot Id",
            "name": "depotId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "contact Id",
            "name": "contactId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "depots"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model44"
            },
            "description": "The equipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/equipments/{equipmentId}/move/{moveId}": {
      "patch": {
        "summary": "update equipment move",
        "operationId": "patchEquipmentsEquipmentidMoveMoveid",
        "parameters": [
          {
            "type": "string",
            "description": "equipment Id",
            "name": "equipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "equipment move Id",
            "name": "moveId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/EquipmentMoveInput"
            }
          }
        ],
        "tags": [
          "equipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EquipmentMoveWithStatus"
            },
            "description": "The container"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The container does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/equipments/{equipmentId}/status/{statusId}": {
      "patch": {
        "summary": "create equipment status",
        "operationId": "patchEquipmentsEquipmentidStatusStatusid",
        "parameters": [
          {
            "type": "string",
            "description": "equipment Id",
            "name": "equipmentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "status Id",
            "name": "statusId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "flag for using lease ID to patch status instead of status ID",
            "name": "throughLease",
            "in": "query"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchEquipmentStatusInput"
            }
          }
        ],
        "tags": [
          "equipments"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EquipmentStatus"
            },
            "description": "The equipment"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/leases/{equipmentLeaseContractId}/visibilitycontract/{leaseVisibilityContractId}": {
      "patch": {
        "summary": "FIXME",
        "operationId": "patchLeasesEquipmentleasecontractidVisibilitycontractLeasevisibilitycontractid",
        "parameters": [
          {
            "type": "string",
            "description": "equipmentLeaseContract Id",
            "name": "equipmentLeaseContractId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "leaseVisibilityContract Id",
            "name": "leaseVisibilityContractId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LeaseVisibilityPatchInput"
            }
          }
        ],
        "tags": [
          "leases"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/leasevisibilitycontracts"
            },
            "description": "The lease visibility contract"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "404": {
            "description": "The equipment lease contract does not exist",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "alertInfo": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        },
        "containerId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "depotId": {
          "type": "string"
        }
      }
    },
    "PublicAlertState": {
      "type": "object",
      "properties": {
        "alertStateId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "criterionId": {
          "type": "string",
          "description": "criterion linked",
          "x-format": {
            "guid": true
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "resolvedAt": {
          "type": "string",
          "format": "date-time"
        },
        "entityId": {
          "type": "string"
        },
        "entityType": {
          "type": "string",
          "enum": [
            "order",
            "allocation",
            "container",
            "facility"
          ]
        },
        "message": {
          "type": "string"
        },
        "severity": {
          "type": "number",
          "description": "1 to 3, 3 most severe"
        },
        "readAt": {
          "type": "string",
          "format": "date-time"
        },
        "alertInfo": {
          "$ref": "#/definitions/alertInfo"
        }
      },
      "required": [
        "alertStateId",
        "criterionId",
        "createdAt",
        "updatedAt"
      ]
    },
    "Model1": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PublicAlertState"
      }
    },
    "errors": {
      "type": "array",
      "description": "Error messages",
      "items": {
        "type": "string"
      }
    },
    "Failure": {
      "type": "object",
      "description": "An error due to a wrong request or an internal error when processing the request",
      "properties": {
        "errors": {
          "$ref": "#/definitions/errors"
        }
      },
      "required": [
        "errors"
      ]
    },
    "Coordinates": {
      "type": "array",
      "description": "A tuple containing the longitude and the latitude",
      "example": [
        [
          7.65499738,
          45.97249611
        ]
      ],
      "minItems": 2,
      "maxItems": 2,
      "items": {
        "type": "number"
      }
    },
    "Position": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "timestamp"
        },
        "coordinates": {
          "$ref": "#/definitions/Coordinates"
        }
      },
      "required": [
        "timestamp",
        "coordinates"
      ]
    },
    "position": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Position"
      }
    },
    "Features": {
      "type": "object",
      "properties": {
        "hasTemperatureInt": {
          "type": "boolean"
        },
        "hasTemperatureExt": {
          "type": "boolean"
        },
        "hasPosition": {
          "type": "boolean"
        },
        "hasHumidityInt": {
          "type": "boolean"
        },
        "hasHumidityExt": {
          "type": "boolean"
        },
        "hasPressureInt": {
          "type": "boolean"
        },
        "hasPressureExt": {
          "type": "boolean"
        },
        "hasLightInt": {
          "type": "boolean"
        },
        "hasLightExt": {
          "type": "boolean"
        },
        "hasDoors": {
          "type": "boolean"
        }
      }
    },
    "PublicContainerAnalyticsWithEvents": {
      "type": "object",
      "properties": {
        "temperature_int_avg": {
          "type": "number"
        },
        "temperature_int_min": {
          "type": "number"
        },
        "temperature_int_max": {
          "type": "number"
        },
        "temperature_ext_avg": {
          "type": "number"
        },
        "temperature_ext_min": {
          "type": "number"
        },
        "temperature_ext_max": {
          "type": "number"
        },
        "humidityInt_avg": {
          "type": "number"
        },
        "humidityInt_min": {
          "type": "number"
        },
        "humidityInt_max": {
          "type": "number"
        },
        "humidityExt_avg": {
          "type": "number"
        },
        "humidityExt_min": {
          "type": "number"
        },
        "humidityExt_max": {
          "type": "number"
        },
        "pressureInt_avg": {
          "type": "number"
        },
        "pressureInt_min": {
          "type": "number"
        },
        "pressureInt_max": {
          "type": "number"
        },
        "pressureExt_avg": {
          "type": "number"
        },
        "pressureExt_min": {
          "type": "number"
        },
        "pressureExt_max": {
          "type": "number"
        },
        "lightInt_avg": {
          "type": "number"
        },
        "lightInt_min": {
          "type": "number"
        },
        "lightInt_max": {
          "type": "number"
        },
        "lightExt_avg": {
          "type": "number"
        },
        "lightExt_min": {
          "type": "number"
        },
        "lightExt_max": {
          "type": "number"
        },
        "doorStatusRight_avg": {
          "type": "number"
        },
        "doorEvents": {
          "type": "number"
        },
        "shockEvents": {
          "type": "number"
        }
      },
      "required": [
        "temperature_int_avg",
        "temperature_int_min",
        "temperature_int_max",
        "temperature_ext_avg",
        "temperature_ext_min",
        "temperature_ext_max",
        "humidityInt_avg",
        "humidityInt_min",
        "humidityInt_max",
        "humidityExt_avg",
        "humidityExt_min",
        "humidityExt_max",
        "pressureInt_avg",
        "pressureInt_min",
        "pressureInt_max",
        "pressureExt_avg",
        "pressureExt_min",
        "pressureExt_max",
        "lightInt_avg",
        "lightInt_min",
        "lightInt_max",
        "lightExt_avg",
        "lightExt_min",
        "lightExt_max",
        "doorStatusRight_avg"
      ]
    },
    "LastUpdatedAt": {
      "type": "object",
      "properties": {
        "temperature_int": {
          "type": "string",
          "format": "date-time"
        },
        "temperature_ext": {
          "type": "string",
          "format": "date-time"
        },
        "humidityInt": {
          "type": "string",
          "format": "date-time"
        },
        "humidityExt": {
          "type": "string",
          "format": "date-time"
        },
        "pressureInt": {
          "type": "string",
          "format": "date-time"
        },
        "pressureExt": {
          "type": "string",
          "format": "date-time"
        },
        "lightInt": {
          "type": "string",
          "format": "date-time"
        },
        "lightExt": {
          "type": "string",
          "format": "date-time"
        },
        "doorEvents": {
          "type": "string",
          "format": "date-time"
        },
        "shockEvents": {
          "type": "string",
          "format": "date-time"
        },
        "doors": {
          "type": "string",
          "format": "date-time"
        },
        "accel": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "PublicEquipmentLeaseContractContainer": {
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/position"
        },
        "cscCertNumber": {
          "type": "string",
          "description": "bla"
        },
        "features": {
          "$ref": "#/definitions/Features"
        },
        "analytics": {
          "$ref": "#/definitions/PublicContainerAnalyticsWithEvents"
        },
        "lastUpdatedAt": {
          "$ref": "#/definitions/LastUpdatedAt"
        }
      },
      "required": [
        "position"
      ]
    },
    "PublicEquipmentLeaseContract": {
      "type": "object",
      "properties": {
        "equipmentLeaseContractId": {
          "type": "string"
        },
        "containerId": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "startsAt": {
          "type": "string",
          "format": "date-time"
        },
        "stopsAt": {
          "type": "string",
          "format": "date-time"
        },
        "pickupLocation": {
          "type": "string"
        },
        "dropoffLocation": {
          "type": "string"
        },
        "container": {
          "$ref": "#/definitions/PublicEquipmentLeaseContractContainer"
        },
        "orderStatus": {
          "type": "string",
          "description": "orderStatus",
          "enum": [
            "CREATED",
            "ACCEPTED",
            "AELER-CANCELED",
            "CUSTOMER-CANCELED",
            "COMPLETED-FULFILLED",
            "COMPLETED-FAILED"
          ]
        },
        "actualReturnDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "equipmentLeaseContractId",
        "containerId",
        "orderId"
      ]
    },
    "Model2": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PublicEquipmentLeaseContract"
      }
    },
    "Model3": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "CurrentStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "ALLOCATED",
            "MNR",
            "INTESTING",
            "PRODUCTION",
            "SOLD",
            "EOL",
            "BLOCKED"
          ]
        },
        "statusId": {
          "type": "string"
        },
        "validFromPlanned": {
          "type": "string",
          "format": "date-time"
        },
        "validFromActual": {
          "type": "string",
          "format": "date-time"
        },
        "validToPlanned": {
          "type": "string",
          "format": "date-time"
        },
        "validToActual": {
          "type": "string",
          "format": "date-time"
        },
        "locationStartPlanned": {
          "type": "string",
          "description": "location ID"
        },
        "locationStartActual": {
          "type": "string",
          "description": "location ID"
        },
        "locationStopPlanned": {
          "type": "string",
          "description": "location ID"
        },
        "locationStopActual": {
          "type": "string",
          "description": "location ID"
        },
        "equipmentLeaseContractId": {
          "type": "string"
        },
        "reason": {
          "type": "string",
          "description": "example: DAMAGED"
        }
      },
      "required": [
        "status",
        "statusId"
      ]
    },
    "futureStatuses": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CurrentStatus"
      }
    },
    "currentLocation": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "validTo": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "locationId"
      ]
    },
    "futureLocations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/currentLocation"
      }
    },
    "currentLease": {
      "type": "object",
      "properties": {
        "contractId": {
          "type": "string",
          "description": "66ba6899-11b9-44cb-bd11-afbaeab9bf8c"
        },
        "orderId": {
          "type": "string",
          "description": "ord_01"
        },
        "customerId": {
          "type": "string",
          "description": "b89519d7-14a7-46f7-a333-40d83618ae0d"
        },
        "timePlaced": {
          "type": "string",
          "format": "date-time",
          "description": "2021-10-10T12:00:00.000Z"
        },
        "pickupLocation": {
          "type": "string",
          "description": "ici"
        },
        "dropoffLocation": {
          "type": "string",
          "description": "la"
        },
        "returnDate": {
          "type": "string",
          "format": "date-time",
          "description": "2021-10-10T10:00:00.000Z"
        },
        "executionDate": {
          "type": "string",
          "format": "date-time",
          "description": "2021-10-10T10:00:00.000Z"
        },
        "units": {
          "type": "number",
          "description": "1"
        },
        "orderStatus": {
          "type": "string",
          "description": "orderStatus",
          "enum": [
            "CREATED",
            "ACCEPTED",
            "AELER-CANCELED",
            "CUSTOMER-CANCELED",
            "COMPLETED-FULFILLED",
            "COMPLETED-FAILED"
          ]
        },
        "contractStatus": {
          "type": "string",
          "description": "contractStatus",
          "enum": [
            "STL",
            "LTL",
            "AEL",
            "OWL",
            "SAL"
          ]
        }
      },
      "required": [
        "contractId",
        "orderId",
        "customerId",
        "timePlaced",
        "pickupLocation",
        "dropoffLocation",
        "returnDate",
        "executionDate",
        "units",
        "orderStatus",
        "contractStatus"
      ]
    },
    "futureLeases": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/currentLease"
      }
    },
    "ContainerSensorsProfile": {
      "type": "object",
      "properties": {
        "containerId": {
          "type": "string",
          "description": "boardId"
        },
        "sensorsProfileId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "aelerBoardId": {
          "type": "string"
        },
        "kizyBoardId": {
          "type": "string"
        },
        "nexxiotBoardId": {
          "type": "string"
        },
        "source": {
          "type": "string",
          "description": "source",
          "enum": [
            "aeler",
            "kizy",
            "nexxiot"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "dateFittedAeler": {
          "type": "string",
          "format": "date-time"
        },
        "dateFittedKizy": {
          "type": "string",
          "format": "date-time"
        },
        "dateFittedNexxiot": {
          "type": "string",
          "format": "date-time"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "containerId",
        "sensorsProfileId",
        "createdAt"
      ]
    },
    "containersensorsprofiles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ContainerSensorsProfile"
      }
    },
    "ContainerPanelProfile": {
      "type": "object",
      "properties": {
        "panelProfileId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "containerId": {
          "type": "string",
          "description": "boardId"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "leftPanel": {
          "type": "string"
        },
        "rightPanel": {
          "type": "string"
        },
        "roofPanel": {
          "type": "string"
        },
        "endPanel": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "panelProfileId",
        "containerId",
        "createdAt"
      ]
    },
    "containerpanelprofiles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ContainerPanelProfile"
      }
    },
    "BoardsProfile": {
      "type": "object",
      "properties": {
        "boardPairingProfileId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "containerId": {
          "type": "string",
          "description": "which container does this log relate to"
        },
        "boardId": {
          "type": "string",
          "description": "which board does this log relate to"
        },
        "boardSource": {
          "type": "string",
          "description": "source",
          "enum": [
            "aeler",
            "kizy",
            "nexxiot"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updatedAt"
        },
        "installDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date for board installation"
        },
        "removalDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date for board removal"
        },
        "installComments": {
          "type": "string",
          "description": "Comments for board installation"
        },
        "removalComments": {
          "type": "string",
          "description": "Comments for board remvoval"
        },
        "installTechnicianId": {
          "type": "string",
          "description": "ID of the technician who installed board"
        },
        "removalTechnicianId": {
          "type": "string",
          "description": "ID of the technician who removed board"
        },
        "installLocationId": {
          "type": "string",
          "description": "Location ID of installation of board on container"
        },
        "removalLocationId": {
          "type": "string",
          "description": "Location ID of removal of board on container"
        },
        "installLocationName": {
          "type": "string",
          "description": "Location name of installation of board on container"
        },
        "removalLocationName": {
          "type": "string",
          "description": "Location name of removal of board on container"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "boardPairingProfileId",
        "containerId",
        "boardId",
        "boardSource",
        "createdAt",
        "updatedAt",
        "installDate"
      ]
    },
    "containerboardpairingprofiles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/BoardsProfile"
      }
    },
    "ContainerWithProfile": {
      "type": "object",
      "properties": {
        "containerId": {
          "type": "string",
          "description": "ISO code, primary key, natural key"
        },
        "characteristics_size": {
          "type": "string",
          "description": "container operational status",
          "enum": [
            "20ft",
            "40ft",
            "45ft"
          ]
        },
        "characteristics_type": {
          "type": "string",
          "description": "container type",
          "enum": [
            "REEFER",
            "FLEXITANK",
            "NORMAL"
          ]
        },
        "containerVersion": {
          "type": "string"
        },
        "characteristics_maxPayload": {
          "type": "string"
        },
        "characteristics_builtYear": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updatedAt"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "volume": {
          "type": "number",
          "description": "volume"
        },
        "characteristics_tare": {
          "type": "number",
          "description": "weight"
        },
        "inspectionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Inspection Date"
        },
        "cscCertNo": {
          "type": "string",
          "description": "CSC Cert No."
        },
        "cscCertDate": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "characteristics_grade": {
          "type": "string"
        },
        "cscCertLink": {
          "type": "string",
          "description": "cscCertLink"
        },
        "electronicsCharging": {
          "type": "boolean",
          "description": "end panel"
        },
        "insurance": {
          "type": "string",
          "description": "insurance"
        },
        "insuranceDate": {
          "type": "string",
          "format": "date-time",
          "description": "Insurance date"
        },
        "cameraExt": {
          "type": "boolean",
          "description": "cameraExt"
        },
        "cameraInt": {
          "type": "boolean",
          "description": "cameraInt"
        },
        "lastChangedBy": {
          "type": "string",
          "description": "user id"
        },
        "floorType": {
          "type": "string"
        },
        "doorType": {
          "type": "string"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        },
        "containersensorsprofiles": {
          "$ref": "#/definitions/containersensorsprofiles"
        },
        "containerpanelprofiles": {
          "$ref": "#/definitions/containerpanelprofiles"
        },
        "containerboardpairingprofiles": {
          "$ref": "#/definitions/containerboardpairingprofiles"
        }
      },
      "required": [
        "containerId",
        "characteristics_size",
        "characteristics_type",
        "containerVersion",
        "characteristics_maxPayload",
        "characteristics_builtYear",
        "updatedAt",
        "createdAt",
        "volume",
        "characteristics_tare",
        "containersensorsprofiles",
        "containerpanelprofiles",
        "containerboardpairingprofiles"
      ]
    },
    "PublicEquipment": {
      "type": "object",
      "properties": {
        "equipmentId": {
          "type": "string",
          "description": "8ddad340-6b06-4b31-9657-7c60cafed47a",
          "x-format": {
            "guid": true
          }
        },
        "aelerContainerId": {
          "type": "string",
          "description": "CAVU0000007"
        },
        "currentStatus": {
          "$ref": "#/definitions/CurrentStatus"
        },
        "futureStatuses": {
          "$ref": "#/definitions/futureStatuses"
        },
        "blockingStatuses": {
          "$ref": "#/definitions/futureStatuses"
        },
        "currentLocation": {
          "$ref": "#/definitions/currentLocation"
        },
        "futureLocations": {
          "$ref": "#/definitions/futureLocations"
        },
        "currentLease": {
          "$ref": "#/definitions/currentLease"
        },
        "futureLeases": {
          "$ref": "#/definitions/futureLeases"
        },
        "container": {
          "$ref": "#/definitions/ContainerWithProfile"
        }
      },
      "required": [
        "equipmentId"
      ]
    },
    "Model4": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PublicEquipment"
      }
    },
    "Model5": {
      "type": "object",
      "properties": {
        "rate": {
          "type": "number"
        },
        "dataDate": {
          "type": "string",
          "format": "date-time"
        },
        "valid": {
          "type": "boolean"
        }
      },
      "required": [
        "rate",
        "dataDate",
        "valid"
      ]
    },
    "EquipmentLeaseStatus": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the order status was submitted"
        },
        "orderStatus": {
          "type": "string",
          "description": "orderStatus",
          "enum": [
            "CREATED",
            "ACCEPTED",
            "AELER-CANCELED",
            "CUSTOMER-CANCELED",
            "COMPLETED-FULFILLED",
            "COMPLETED-FAILED"
          ]
        },
        "contractStatus": {
          "type": "string",
          "description": "contractStatus",
          "enum": [
            "STL",
            "LTL",
            "AEL",
            "OWL",
            "SAL"
          ]
        },
        "isCurrent": {
          "type": "boolean",
          "description": "is it current"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "orderId",
        "createdAt",
        "orderStatus",
        "contractStatus",
        "isCurrent"
      ]
    },
    "equipmentleasestatuses": {
      "type": "array",
      "description": "equipmentleasestatuses",
      "items": {
        "$ref": "#/definitions/EquipmentLeaseStatus"
      }
    },
    "LeaseVisibilityContract": {
      "type": "object",
      "properties": {
        "leaseVisibilityContractId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "equipmentLeaseContractId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "lastChangedBy": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "startAt": {
          "type": "string",
          "format": "date-time"
        },
        "stopAt": {
          "type": "string",
          "format": "date-time"
        },
        "isSameDatesAsLease": {
          "type": "boolean",
          "description": "flag"
        },
        "isSameDatesAsStatus": {
          "type": "boolean",
          "description": "flag"
        },
        "isActive": {
          "type": "boolean",
          "description": "is it active or not"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "leaseVisibilityContractId",
        "equipmentLeaseContractId",
        "customerId",
        "lastChangedBy"
      ]
    },
    "leasevisibilitycontracts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/LeaseVisibilityContract"
      }
    },
    "EquipmentLeaseContract": {
      "type": "object",
      "properties": {
        "equipmentLeaseContractId": {
          "type": "string"
        },
        "equipmentId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "orderId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "active": {
          "type": "boolean",
          "description": "active or canceled allocation"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        },
        "leasevisibilitycontracts": {
          "$ref": "#/definitions/leasevisibilitycontracts"
        }
      },
      "required": [
        "equipmentLeaseContractId",
        "equipmentId",
        "orderId",
        "createdAt",
        "active",
        "leasevisibilitycontracts"
      ]
    },
    "equipmentleasecontracts": {
      "type": "array",
      "description": "equipmentleasecontracts",
      "items": {
        "$ref": "#/definitions/EquipmentLeaseContract"
      }
    },
    "EquipmentLeaseWithStatuses": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the order was submitted"
        },
        "customerId": {
          "type": "string"
        },
        "timePlaced": {
          "type": "string",
          "format": "date-time",
          "description": "Time/Date Order was placed in reality"
        },
        "pickupLocation": {
          "type": "string"
        },
        "dropoffLocation": {
          "type": "string",
          "description": "planned dropoff location"
        },
        "isDropoffLocationConfirmed": {
          "type": "boolean",
          "description": "by default true in one way lease and AEL leases, false in LTL"
        },
        "returnDate": {
          "type": "string",
          "format": "date-time",
          "description": "Time/Date pre-agreed return date"
        },
        "executionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Time/Date the order begins"
        },
        "units": {
          "type": "number",
          "description": "Number of units requested"
        },
        "customersBookingNumber": {
          "type": "string",
          "description": "Customers own booking number"
        },
        "dropoffLocationActual": {
          "type": "string"
        },
        "parentOrderId": {
          "type": "string"
        },
        "lastChangedBy": {
          "type": "string",
          "description": "user id"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        },
        "equipmentleasestatuses": {
          "$ref": "#/definitions/equipmentleasestatuses"
        },
        "equipmentleasecontracts": {
          "$ref": "#/definitions/equipmentleasecontracts"
        }
      },
      "required": [
        "orderId",
        "createdAt",
        "customerId",
        "timePlaced",
        "pickupLocation",
        "dropoffLocation",
        "isDropoffLocationConfirmed",
        "returnDate",
        "executionDate",
        "units",
        "equipmentleasestatuses",
        "equipmentleasecontracts"
      ]
    },
    "Model6": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/EquipmentLeaseWithStatuses"
      }
    },
    "ExchangeLocation": {
      "type": "object",
      "properties": {
        "exchangeLocationId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "name": {
          "type": "string"
        },
        "depotId": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        }
      },
      "required": [
        "exchangeLocationId",
        "name"
      ]
    },
    "Model7": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExchangeLocation"
      }
    },
    "Shipment": {
      "type": "object",
      "properties": {
        "ownerId": {
          "type": "string"
        },
        "requesterId": {
          "type": "string"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        },
        "shipmentId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the move was submitted"
        },
        "originLocationId": {
          "type": "string"
        },
        "destinationLocationId": {
          "type": "string"
        }
      },
      "required": [
        "ownerId",
        "requesterId",
        "shipmentId",
        "createdAt",
        "originLocationId",
        "destinationLocationId"
      ]
    },
    "Model8": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Shipment"
      }
    },
    "GeojsonPoint": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Point"
          ]
        },
        "coordinates": {
          "$ref": "#/definitions/Model3"
        }
      },
      "required": [
        "type"
      ]
    },
    "PublicTimeseries": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "time"
        },
        "timestampInsert": {
          "type": "string",
          "format": "date-time"
        },
        "temperatureInt": {
          "type": "number"
        },
        "temperatureExt": {
          "type": "number"
        },
        "position": {
          "$ref": "#/definitions/GeojsonPoint"
        },
        "humidityInt": {
          "type": "number",
          "description": "humidity inside the container"
        },
        "humidityExt": {
          "type": "number",
          "description": "humidity outside the container"
        },
        "pressureInt": {
          "type": "number",
          "description": "pressure inside the container"
        },
        "pressureExt": {
          "type": "number",
          "description": "pressure outside the container"
        },
        "lightInt": {
          "type": "number",
          "description": "internal light sensor"
        },
        "lightExt": {
          "type": "number",
          "description": "external light sensor"
        },
        "doorStatusRight": {
          "type": "number",
          "description": "R = right looking from outside the container - 0 is closed 1 is open"
        },
        "doorStatusLeft": {
          "type": "number",
          "description": "L = left looking from outside the container - 0 is closed 1 is open"
        },
        "iaq": {
          "type": "number",
          "description": "Indoor air quality"
        },
        "ngm3TVOC": {
          "type": "number",
          "description": "Total Volatile Organic Compounds"
        },
        "ppmeCO2": {
          "type": "number",
          "description": "parts per million carbon dioxide"
        },
        "ppbEtOH": {
          "type": "number",
          "description": "parts per million ethanol"
        },
        "oaqNO2": {
          "type": "number",
          "description": "outdoor air quality"
        },
        "oaqO3": {
          "type": "number",
          "description": "outdoor air qualiry ozone"
        },
        "probNO2": {
          "type": "number",
          "description": "probability of nitrogen dioxide"
        },
        "ppbNO2": {
          "type": "number",
          "description": "parts per billion nitrogen dioxide"
        },
        "ppb03": {
          "type": "number",
          "description": "parts per billion ozone"
        },
        "hmsl": {
          "type": "number",
          "description": "Height above mean sea level in mm"
        },
        "hacc": {
          "type": "number",
          "description": "Horizontal accuracy estimate in mm"
        },
        "groundSpeed": {
          "type": "number",
          "description": "Ground Speed (2-D) in mm/s"
        },
        "heading": {
          "type": "number",
          "description": "Heading in degrees"
        }
      },
      "required": [
        "timestamp",
        "timestampInsert"
      ]
    },
    "timeseries": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PublicTimeseries"
      }
    },
    "PublicContainerEvent": {
      "type": "object",
      "properties": {
        "alertCode": {
          "type": "string",
          "description": "alert codes",
          "enum": [
            "DOO",
            "DOC",
            "SHO",
            "LIG",
            "LIE"
          ]
        },
        "containerId": {
          "type": "string",
          "description": "container ID"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "time"
        },
        "comment": {
          "type": "string"
        }
      },
      "required": [
        "alertCode",
        "containerId",
        "timestamp"
      ]
    },
    "events": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PublicContainerEvent"
      }
    },
    "PublicContainer": {
      "type": "object",
      "properties": {
        "containerId": {
          "type": "string"
        },
        "timeseries": {
          "$ref": "#/definitions/timeseries"
        },
        "analytics": {
          "$ref": "#/definitions/PublicContainerAnalyticsWithEvents"
        },
        "events": {
          "$ref": "#/definitions/events"
        }
      },
      "required": [
        "containerId"
      ]
    },
    "PublicDepotContact": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "contactId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        },
        "depotId": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "isRemoveFromBookingConfirmation": {
          "type": "boolean"
        }
      },
      "required": [
        "contactId",
        "depotId"
      ]
    },
    "Model9": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PublicDepotContact"
      }
    },
    "DepotContainer": {
      "type": "object",
      "properties": {
        "aelerContainerId": {
          "type": "string",
          "description": "testcavu_3"
        },
        "equipmentId": {
          "type": "string",
          "description": "bcd9462a-db95-4e5d-adf9-3035105ede91"
        },
        "status": {
          "type": "string",
          "description": "ALLOCATED"
        },
        "statusId": {
          "type": "string",
          "description": "3d0cbb15-6b79-453f-953a-c5a20cf49991"
        },
        "startAtActual": {
          "type": "string",
          "format": "date-time"
        },
        "startAtPlanned": {
          "type": "string",
          "format": "date-time"
        },
        "stopAtActual": {
          "type": "string",
          "format": "date-time"
        },
        "stopAtPlanned": {
          "type": "string",
          "format": "date-time"
        },
        "statusNext": {
          "type": "string"
        },
        "statusIdNext": {
          "type": "string"
        },
        "startAtActualNext": {
          "type": "string",
          "format": "date-time"
        },
        "startAtPlannedNext": {
          "type": "string",
          "format": "date-time"
        },
        "stopAtActualNext": {
          "type": "string",
          "format": "date-time"
        },
        "stopAtPlannedNext": {
          "type": "string",
          "format": "date-time"
        },
        "secondsIdle": {
          "type": "number"
        },
        "depotInDate": {
          "type": "string",
          "format": "date-time"
        },
        "depotOutDate": {
          "type": "string",
          "format": "date-time"
        },
        "depotStatus": {
          "type": "string"
        }
      },
      "required": [
        "aelerContainerId",
        "equipmentId"
      ]
    },
    "Model10": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DepotContainer"
      }
    },
    "DepotStats": {
      "type": "object",
      "properties": {
        "depotId": {
          "type": "string"
        },
        "containersAtDepot": {
          "type": "number"
        },
        "containersArriving": {
          "type": "number"
        },
        "containersDeparting": {
          "type": "number"
        },
        "containersOverIdleLimit": {
          "type": "number"
        },
        "containersBlocked": {
          "type": "number"
        },
        "daysIdle": {
          "type": "number"
        }
      },
      "required": [
        "depotId",
        "containersAtDepot",
        "containersArriving",
        "containersDeparting",
        "containersOverIdleLimit",
        "containersBlocked",
        "daysIdle"
      ]
    },
    "Model11": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DepotStats"
      }
    },
    "DeviceToContainerPairing": {
      "type": "object",
      "properties": {
        "boardId": {
          "type": "string"
        },
        "containerIds": {
          "$ref": "#/definitions/Model3"
        }
      },
      "required": [
        "boardId",
        "containerIds"
      ]
    },
    "Model12": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DeviceToContainerPairing"
      }
    },
    "StatusCost": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "enum": [
            "AFN",
            "ALL",
            "DZD",
            "ADP",
            "AOA",
            "ARA",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZN",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYN",
            "BEF",
            "BEC",
            "BEL",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BOV",
            "BOP",
            "BAM",
            "BWP",
            "BRL",
            "GBP",
            "BND",
            "BGL",
            "BGN",
            "BGM",
            "BUK",
            "BIF",
            "XPF",
            "KHR",
            "CAD",
            "CVE",
            "KYD",
            "XAF",
            "CLE",
            "CLP",
            "CLF",
            "CNX",
            "CNY",
            "COP",
            "COU",
            "KMF",
            "CDF",
            "CRC",
            "HRD",
            "HRK",
            "CUC",
            "CUP",
            "CYP",
            "CZK",
            "CSK",
            "DKK",
            "DJF",
            "DOP",
            "NLG",
            "XCD",
            "DDM",
            "ECS",
            "ECV",
            "EGP",
            "GQE",
            "ERN",
            "EEK",
            "ETB",
            "EUR",
            "XEU",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XFO",
            "XFU",
            "GMD",
            "GEK",
            "GEL",
            "DEM",
            "GHS",
            "GIP",
            "GRD",
            "GTQ",
            "GWP",
            "GNF",
            "GNS",
            "GYD",
            "HTG",
            "HNL",
            "HKD",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "ILP",
            "ITL",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LVR",
            "LBP",
            "LSL",
            "LRD",
            "LYD",
            "LTL",
            "LTT",
            "LUL",
            "LUC",
            "LUF",
            "MOP",
            "MKD",
            "MGA",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MLF",
            "MTL",
            "MTP",
            "MRO",
            "MUR",
            "MXV",
            "MXN",
            "MDC",
            "MDL",
            "MCF",
            "MNT",
            "MAD",
            "MAF",
            "MZE",
            "MZN",
            "MMK",
            "NAD",
            "NPR",
            "ANG",
            "TWD",
            "NZD",
            "NIO",
            "NGN",
            "KPW",
            "NOK",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEI",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "GWE",
            "QAR",
            "XRE",
            "RHD",
            "RON",
            "RUB",
            "RWF",
            "SVC",
            "WST",
            "SAR",
            "RSD",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "ZAR",
            "ZAL",
            "KRW",
            "SSP",
            "SUR",
            "ESP",
            "ESA",
            "ESB",
            "LKR",
            "SHP",
            "SDG",
            "SRD",
            "SRG",
            "SZL",
            "SEK",
            "CHF",
            "SYP",
            "STD",
            "TJR",
            "TJS",
            "TZS",
            "THB",
            "TPE",
            "TOP",
            "TTD",
            "TND",
            "TRY",
            "TMT",
            "USD",
            "USN",
            "USS",
            "UGX",
            "UAH",
            "UAK",
            "AED",
            "UYU",
            "UYI",
            "UZS",
            "VUV",
            "VEF",
            "VND",
            "CHE",
            "CHW",
            "XOF",
            "YDD",
            "YER",
            "ZMW",
            "ZWR",
            "ZWL"
          ]
        },
        "value": {
          "type": "number"
        },
        "reason": {
          "type": "string"
        },
        "statusId": {
          "type": "string",
          "description": "status ID",
          "x-format": {
            "guid": true
          }
        },
        "invoicedAt": {
          "type": "string",
          "format": "date-time",
          "description": "date at which it was invoiced to us"
        },
        "resolutionDate": {
          "type": "string",
          "description": "date at which the move payment must be made"
        },
        "costId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "currency",
        "value",
        "costId"
      ]
    },
    "Model13": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/StatusCost"
      }
    },
    "LeaseRate": {
      "type": "object",
      "properties": {
        "leaseRateId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "customerId": {
          "type": "string"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "dailyRate": {
          "type": "number"
        },
        "currency": {
          "type": "string",
          "enum": [
            "AFN",
            "ALL",
            "DZD",
            "ADP",
            "AOA",
            "ARA",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZN",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYN",
            "BEF",
            "BEC",
            "BEL",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BOV",
            "BOP",
            "BAM",
            "BWP",
            "BRL",
            "GBP",
            "BND",
            "BGL",
            "BGN",
            "BGM",
            "BUK",
            "BIF",
            "XPF",
            "KHR",
            "CAD",
            "CVE",
            "KYD",
            "XAF",
            "CLE",
            "CLP",
            "CLF",
            "CNX",
            "CNY",
            "COP",
            "COU",
            "KMF",
            "CDF",
            "CRC",
            "HRD",
            "HRK",
            "CUC",
            "CUP",
            "CYP",
            "CZK",
            "CSK",
            "DKK",
            "DJF",
            "DOP",
            "NLG",
            "XCD",
            "DDM",
            "ECS",
            "ECV",
            "EGP",
            "GQE",
            "ERN",
            "EEK",
            "ETB",
            "EUR",
            "XEU",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XFO",
            "XFU",
            "GMD",
            "GEK",
            "GEL",
            "DEM",
            "GHS",
            "GIP",
            "GRD",
            "GTQ",
            "GWP",
            "GNF",
            "GNS",
            "GYD",
            "HTG",
            "HNL",
            "HKD",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "ILP",
            "ITL",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LVR",
            "LBP",
            "LSL",
            "LRD",
            "LYD",
            "LTL",
            "LTT",
            "LUL",
            "LUC",
            "LUF",
            "MOP",
            "MKD",
            "MGA",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MLF",
            "MTL",
            "MTP",
            "MRO",
            "MUR",
            "MXV",
            "MXN",
            "MDC",
            "MDL",
            "MCF",
            "MNT",
            "MAD",
            "MAF",
            "MZE",
            "MZN",
            "MMK",
            "NAD",
            "NPR",
            "ANG",
            "TWD",
            "NZD",
            "NIO",
            "NGN",
            "KPW",
            "NOK",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEI",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "GWE",
            "QAR",
            "XRE",
            "RHD",
            "RON",
            "RUB",
            "RWF",
            "SVC",
            "WST",
            "SAR",
            "RSD",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "ZAR",
            "ZAL",
            "KRW",
            "SSP",
            "SUR",
            "ESP",
            "ESA",
            "ESB",
            "LKR",
            "SHP",
            "SDG",
            "SRD",
            "SRG",
            "SZL",
            "SEK",
            "CHF",
            "SYP",
            "STD",
            "TJR",
            "TJS",
            "TZS",
            "THB",
            "TPE",
            "TOP",
            "TTD",
            "TND",
            "TRY",
            "TMT",
            "USD",
            "USN",
            "USS",
            "UGX",
            "UAH",
            "UAK",
            "AED",
            "UYU",
            "UYI",
            "UZS",
            "VUV",
            "VEF",
            "VND",
            "CHE",
            "CHW",
            "XOF",
            "YDD",
            "YER",
            "ZMW",
            "ZWR",
            "ZWL"
          ]
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "discount": {
          "type": "number"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "leaseRateId",
        "customerId",
        "validFrom",
        "dailyRate",
        "currency"
      ]
    },
    "Model14": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/LeaseRate"
      }
    },
    "MoveCost": {
      "type": "object",
      "properties": {
        "moveCostId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "moveId": {
          "type": "string",
          "description": "bla",
          "x-format": {
            "guid": true
          }
        },
        "cost": {
          "type": "number"
        },
        "currency": {
          "type": "string",
          "enum": [
            "AFN",
            "ALL",
            "DZD",
            "ADP",
            "AOA",
            "ARA",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZN",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYN",
            "BEF",
            "BEC",
            "BEL",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BOV",
            "BOP",
            "BAM",
            "BWP",
            "BRL",
            "GBP",
            "BND",
            "BGL",
            "BGN",
            "BGM",
            "BUK",
            "BIF",
            "XPF",
            "KHR",
            "CAD",
            "CVE",
            "KYD",
            "XAF",
            "CLE",
            "CLP",
            "CLF",
            "CNX",
            "CNY",
            "COP",
            "COU",
            "KMF",
            "CDF",
            "CRC",
            "HRD",
            "HRK",
            "CUC",
            "CUP",
            "CYP",
            "CZK",
            "CSK",
            "DKK",
            "DJF",
            "DOP",
            "NLG",
            "XCD",
            "DDM",
            "ECS",
            "ECV",
            "EGP",
            "GQE",
            "ERN",
            "EEK",
            "ETB",
            "EUR",
            "XEU",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XFO",
            "XFU",
            "GMD",
            "GEK",
            "GEL",
            "DEM",
            "GHS",
            "GIP",
            "GRD",
            "GTQ",
            "GWP",
            "GNF",
            "GNS",
            "GYD",
            "HTG",
            "HNL",
            "HKD",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "ILP",
            "ITL",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LVR",
            "LBP",
            "LSL",
            "LRD",
            "LYD",
            "LTL",
            "LTT",
            "LUL",
            "LUC",
            "LUF",
            "MOP",
            "MKD",
            "MGA",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MLF",
            "MTL",
            "MTP",
            "MRO",
            "MUR",
            "MXV",
            "MXN",
            "MDC",
            "MDL",
            "MCF",
            "MNT",
            "MAD",
            "MAF",
            "MZE",
            "MZN",
            "MMK",
            "NAD",
            "NPR",
            "ANG",
            "TWD",
            "NZD",
            "NIO",
            "NGN",
            "KPW",
            "NOK",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEI",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "GWE",
            "QAR",
            "XRE",
            "RHD",
            "RON",
            "RUB",
            "RWF",
            "SVC",
            "WST",
            "SAR",
            "RSD",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "ZAR",
            "ZAL",
            "KRW",
            "SSP",
            "SUR",
            "ESP",
            "ESA",
            "ESB",
            "LKR",
            "SHP",
            "SDG",
            "SRD",
            "SRG",
            "SZL",
            "SEK",
            "CHF",
            "SYP",
            "STD",
            "TJR",
            "TJS",
            "TZS",
            "THB",
            "TPE",
            "TOP",
            "TTD",
            "TND",
            "TRY",
            "TMT",
            "USD",
            "USN",
            "USS",
            "UGX",
            "UAH",
            "UAK",
            "AED",
            "UYU",
            "UYI",
            "UZS",
            "VUV",
            "VEF",
            "VND",
            "CHE",
            "CHW",
            "XOF",
            "YDD",
            "YER",
            "ZMW",
            "ZWR",
            "ZWL"
          ]
        },
        "reason": {
          "type": "string",
          "description": "Haulage or DEL or ???"
        },
        "discount": {
          "type": "number"
        },
        "resolutionDate": {
          "type": "string",
          "description": "date at which the move payment must be made"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "moveCostId",
        "moveId",
        "cost",
        "currency",
        "reason"
      ]
    },
    "Model15": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MoveCost"
      }
    },
    "DailyRate": {
      "type": "object",
      "properties": {
        "rateId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "flat"
          ]
        },
        "rate": {
          "type": "number"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "rateId",
        "type",
        "rate"
      ]
    },
    "PublicStorageRate": {
      "type": "object",
      "properties": {
        "depotId": {
          "type": "string"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "currency": {
          "type": "string",
          "enum": [
            "AFN",
            "ALL",
            "DZD",
            "ADP",
            "AOA",
            "ARA",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZN",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYN",
            "BEF",
            "BEC",
            "BEL",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BOV",
            "BOP",
            "BAM",
            "BWP",
            "BRL",
            "GBP",
            "BND",
            "BGL",
            "BGN",
            "BGM",
            "BUK",
            "BIF",
            "XPF",
            "KHR",
            "CAD",
            "CVE",
            "KYD",
            "XAF",
            "CLE",
            "CLP",
            "CLF",
            "CNX",
            "CNY",
            "COP",
            "COU",
            "KMF",
            "CDF",
            "CRC",
            "HRD",
            "HRK",
            "CUC",
            "CUP",
            "CYP",
            "CZK",
            "CSK",
            "DKK",
            "DJF",
            "DOP",
            "NLG",
            "XCD",
            "DDM",
            "ECS",
            "ECV",
            "EGP",
            "GQE",
            "ERN",
            "EEK",
            "ETB",
            "EUR",
            "XEU",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XFO",
            "XFU",
            "GMD",
            "GEK",
            "GEL",
            "DEM",
            "GHS",
            "GIP",
            "GRD",
            "GTQ",
            "GWP",
            "GNF",
            "GNS",
            "GYD",
            "HTG",
            "HNL",
            "HKD",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "ILP",
            "ITL",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LVR",
            "LBP",
            "LSL",
            "LRD",
            "LYD",
            "LTL",
            "LTT",
            "LUL",
            "LUC",
            "LUF",
            "MOP",
            "MKD",
            "MGA",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MLF",
            "MTL",
            "MTP",
            "MRO",
            "MUR",
            "MXV",
            "MXN",
            "MDC",
            "MDL",
            "MCF",
            "MNT",
            "MAD",
            "MAF",
            "MZE",
            "MZN",
            "MMK",
            "NAD",
            "NPR",
            "ANG",
            "TWD",
            "NZD",
            "NIO",
            "NGN",
            "KPW",
            "NOK",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEI",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "GWE",
            "QAR",
            "XRE",
            "RHD",
            "RON",
            "RUB",
            "RWF",
            "SVC",
            "WST",
            "SAR",
            "RSD",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "ZAR",
            "ZAL",
            "KRW",
            "SSP",
            "SUR",
            "ESP",
            "ESA",
            "ESB",
            "LKR",
            "SHP",
            "SDG",
            "SRD",
            "SRG",
            "SZL",
            "SEK",
            "CHF",
            "SYP",
            "STD",
            "TJR",
            "TJS",
            "TZS",
            "THB",
            "TPE",
            "TOP",
            "TTD",
            "TND",
            "TRY",
            "TMT",
            "USD",
            "USN",
            "USS",
            "UGX",
            "UAH",
            "UAK",
            "AED",
            "UYU",
            "UYI",
            "UZS",
            "VUV",
            "VEF",
            "VND",
            "CHE",
            "CHW",
            "XOF",
            "YDD",
            "YER",
            "ZMW",
            "ZWR",
            "ZWL"
          ]
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "discount": {
          "type": "number"
        },
        "containerType": {
          "type": "string",
          "description": "container type",
          "enum": [
            "20ft",
            "40ft"
          ]
        },
        "storageRateId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "dailyRateId": {
          "type": "string",
          "description": "dailyrate ID",
          "x-format": {
            "guid": true
          }
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        },
        "dailyRate": {
          "$ref": "#/definitions/DailyRate",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/DailyRate"
            },
            {
              "$ref": "#/x-alt-definitions/Model2"
            }
          ]
        }
      },
      "required": [
        "depotId",
        "validFrom",
        "currency",
        "storageRateId",
        "dailyRateId",
        "dailyRate"
      ]
    },
    "Model16": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PublicStorageRate"
      }
    },
    "Model17": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model3"
      }
    },
    "Model18": {
      "type": "object",
      "properties": {
        "avPctIdle": {
          "type": "number"
        }
      },
      "required": [
        "avPctIdle"
      ]
    },
    "Model19": {
      "type": "object",
      "properties": {
        "avPctMnr": {
          "type": "number"
        }
      },
      "required": [
        "avPctMnr"
      ]
    },
    "Model20": {
      "type": "object",
      "properties": {
        "ALLOCATED": {
          "type": "number"
        },
        "AVAILABLE": {
          "type": "number"
        },
        "BLOCKED": {
          "type": "number"
        }
      },
      "required": [
        "ALLOCATED",
        "AVAILABLE",
        "BLOCKED"
      ]
    },
    "Model21": {
      "type": "object",
      "properties": {
        "ready": {
          "type": "number"
        }
      },
      "required": [
        "ready"
      ]
    },
    "Model22": {
      "type": "object",
      "properties": {
        "totalOrders": {
          "type": "number"
        }
      },
      "required": [
        "totalOrders"
      ]
    },
    "Model23": {
      "type": "object",
      "properties": {
        "orderEnds": {
          "type": "number"
        }
      },
      "required": [
        "orderEnds"
      ]
    },
    "Model24": {
      "type": "object",
      "properties": {
        "CREATED": {
          "type": "number"
        },
        "ACCEPTED": {
          "type": "number"
        },
        "AELER-CANCELED": {
          "type": "number"
        },
        "CUSTOMER-CANCELED": {
          "type": "number"
        },
        "COMPLETED-FULFILLED": {
          "type": "number"
        },
        "COMPLETED-FAILED": {
          "type": "number"
        }
      },
      "required": [
        "CREATED",
        "ACCEPTED",
        "AELER-CANCELED",
        "CUSTOMER-CANCELED",
        "COMPLETED-FULFILLED",
        "COMPLETED-FAILED"
      ]
    },
    "Model25": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "ordersTotal": {
          "type": "number"
        }
      },
      "required": [
        "customerId",
        "ordersTotal"
      ]
    },
    "Model26": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model25"
      }
    },
    "Model27": {
      "type": "object",
      "properties": {
        "pctIdle": {
          "type": "number"
        }
      },
      "required": [
        "pctIdle"
      ]
    },
    "Model28": {
      "type": "object",
      "properties": {
        "pctMnr": {
          "type": "number"
        }
      },
      "required": [
        "pctMnr"
      ]
    },
    "Model29": {
      "type": "object",
      "properties": {
        "ALLOCATED": {
          "type": "number"
        },
        "MNR": {
          "type": "number"
        },
        "INTESTING": {
          "type": "number"
        },
        "PRODUCTION": {
          "type": "number"
        },
        "SOLD": {
          "type": "number"
        },
        "EOL": {
          "type": "number"
        },
        "BLOCKED": {
          "type": "number"
        }
      },
      "required": [
        "ALLOCATED",
        "MNR",
        "INTESTING",
        "PRODUCTION",
        "SOLD",
        "EOL",
        "BLOCKED"
      ]
    },
    "Model30": {
      "type": "object",
      "properties": {
        "totalAv": {
          "type": "number"
        }
      },
      "required": [
        "totalAv"
      ]
    },
    "PublicEquipmentLease": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "description": "8ddad340-6b06-4b31-9657-7c60cafed47a"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the order was submitted"
        },
        "customerId": {
          "type": "string"
        },
        "timePlaced": {
          "type": "string",
          "format": "date-time",
          "description": "Time/Date Order was placed in reality"
        },
        "pickupLocation": {
          "type": "string"
        },
        "dropoffLocation": {
          "type": "string",
          "description": "planned dropoff location"
        },
        "isDropoffLocationConfirmed": {
          "type": "boolean",
          "description": "by default true in one way lease and AEL leases, false in LTL"
        },
        "returnDate": {
          "type": "string",
          "format": "date-time",
          "description": "Time/Date pre-agreed return date"
        },
        "executionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Time/Date the order begins"
        },
        "units": {
          "type": "number",
          "description": "Number of units requested"
        },
        "dropoffLocationActual": {
          "type": "string"
        },
        "customersBookingNumber": {
          "type": "string",
          "description": "Customers own booking number"
        }
      },
      "required": [
        "orderId",
        "createdAt",
        "customerId",
        "timePlaced",
        "pickupLocation",
        "dropoffLocation",
        "isDropoffLocationConfirmed",
        "returnDate",
        "executionDate",
        "units"
      ]
    },
    "EquipmentStatus": {
      "type": "object",
      "properties": {
        "statusId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "equipmentId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "ALLOCATED",
            "MNR",
            "INTESTING",
            "PRODUCTION",
            "SOLD",
            "EOL",
            "BLOCKED"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "startAtPlanned": {
          "type": "string",
          "format": "date-time"
        },
        "startAtActual": {
          "type": "string",
          "format": "date-time"
        },
        "stopAtPlanned": {
          "type": "string",
          "format": "date-time"
        },
        "stopAtActual": {
          "type": "string",
          "format": "date-time"
        },
        "availabilityLocationId": {
          "type": "string",
          "description": "location ID of where the status stops and the equipment becomes available"
        },
        "locationStartPlanned": {
          "type": "string",
          "description": "location ID"
        },
        "locationStartActual": {
          "type": "string",
          "description": "location ID"
        },
        "locationStopPlanned": {
          "type": "string",
          "description": "location ID"
        },
        "locationStopActual": {
          "type": "string",
          "description": "location ID"
        },
        "isActive": {
          "type": "boolean",
          "description": "is it active or inactive"
        },
        "equipmentLeaseContractId": {
          "type": "string",
          "description": "equipmentLeaseContractId"
        },
        "lastChangedBy": {
          "type": "string"
        },
        "reason": {
          "type": "string",
          "description": "example: DAMAGED"
        },
        "comment": {
          "type": "string"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "statusId",
        "equipmentId",
        "status"
      ]
    },
    "EquipmentLeaseContractWithLease": {
      "type": "object",
      "properties": {
        "equipmentLeaseContractId": {
          "type": "string"
        },
        "equipmentId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "orderId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "active": {
          "type": "boolean",
          "description": "active or canceled allocation"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        },
        "equipmentlease": {
          "$ref": "#/definitions/PublicEquipmentLease"
        },
        "equipmentstatus": {
          "$ref": "#/definitions/EquipmentStatus"
        }
      },
      "required": [
        "equipmentLeaseContractId",
        "equipmentId",
        "orderId",
        "createdAt",
        "active"
      ]
    },
    "Model31": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/EquipmentLeaseContractWithLease"
      }
    },
    "EquipmentMoveStatus": {
      "type": "object",
      "properties": {
        "moveId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the move status was submitted"
        },
        "status": {
          "type": "string",
          "enum": [
            "DEPARTED",
            "ARRIVED"
          ]
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "moveId",
        "createdAt",
        "status"
      ]
    },
    "EquipmentMoveWithStatus": {
      "type": "object",
      "properties": {
        "moveId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "equipmentId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the move was submitted"
        },
        "pickupDate": {
          "type": "string",
          "format": "date-time",
          "description": "When the move is planned to start"
        },
        "moveType": {
          "type": "string",
          "enum": [
            "REPO",
            "MNR",
            "SHIP",
            "INIT"
          ]
        },
        "equipmentLeaseContractId": {
          "type": "string"
        },
        "originId": {
          "type": "string",
          "description": "this is an exchange location, origin",
          "x-format": {
            "guid": true
          }
        },
        "destinationId": {
          "type": "string",
          "description": "this is an exchange location, destination",
          "x-format": {
            "guid": true
          }
        },
        "fixedCosts": {
          "type": "number"
        },
        "fixedCostsRatio": {
          "type": "number"
        },
        "currency": {
          "type": "string"
        },
        "dropoffDate": {
          "type": "string",
          "format": "date-time"
        },
        "customerId": {
          "type": "string"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        },
        "equipmentmovestatus": {
          "$ref": "#/definitions/EquipmentMoveStatus"
        },
        "movecosts": {
          "$ref": "#/definitions/MoveCost"
        }
      },
      "required": [
        "moveId",
        "equipmentId",
        "createdAt",
        "pickupDate",
        "moveType",
        "equipmentmovestatus",
        "movecosts"
      ]
    },
    "Model32": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/EquipmentMoveWithStatus"
      }
    },
    "Model33": {
      "type": "object",
      "properties": {
        "orderStarts": {
          "type": "number"
        }
      },
      "required": [
        "orderStarts"
      ]
    },
    "Model34": {
      "type": "object",
      "properties": {
        "pctUtilization": {
          "type": "number"
        }
      },
      "required": [
        "pctUtilization"
      ]
    },
    "Model35": {
      "type": "object",
      "properties": {
        "totalPctBlocked": {
          "type": "number"
        }
      },
      "required": [
        "totalPctBlocked"
      ]
    },
    "ContainerBoardPairingProfilePostInput": {
      "type": "object",
      "properties": {
        "containerId": {
          "type": "string",
          "description": "which container does this log relate to",
          "x-format": {
            "guid": true
          }
        },
        "boardId": {
          "type": "string",
          "description": "which board does this log relate to",
          "x-format": {
            "guid": true
          }
        },
        "boardSource": {
          "type": "string"
        },
        "installDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date for board installation"
        },
        "removalDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date for board removal"
        },
        "installComments": {
          "type": "string",
          "description": "Comments for board installation"
        },
        "removalComments": {
          "type": "string",
          "description": "Comments for board removal"
        },
        "installTechnicianId": {
          "type": "string",
          "description": "ID of the technician who installed board"
        },
        "removalTechnicianId": {
          "type": "string",
          "description": "ID of the technician who removed board"
        },
        "installLocationId": {
          "type": "string",
          "description": "Location ID of installation of board on container"
        },
        "removalLocationId": {
          "type": "string",
          "description": "Location ID of removal of board on container"
        },
        "installLocationName": {
          "type": "string",
          "description": "Location name of installation of board on container"
        },
        "removalLocationName": {
          "type": "string",
          "description": "Location name of removal of board on container"
        }
      },
      "required": [
        "containerId",
        "boardId",
        "boardSource",
        "installDate"
      ]
    },
    "ContainerInput": {
      "type": "object",
      "properties": {
        "containerId": {
          "type": "string"
        },
        "characteristics_size": {
          "type": "string",
          "description": "container operational status",
          "enum": [
            "20ft",
            "40ft",
            "45ft"
          ]
        },
        "characteristics_type": {
          "type": "string",
          "description": "container type",
          "enum": [
            "REEFER",
            "FLEXITANK",
            "NORMAL"
          ]
        },
        "containerVersion": {
          "type": "string"
        },
        "characteristics_maxPayload": {
          "type": "string"
        },
        "characteristics_builtYear": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "container status"
        },
        "volume": {
          "type": "number",
          "description": "volumne"
        },
        "inspectionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Inspection Date"
        },
        "cscCertNo": {
          "type": "string",
          "description": "CSC Cert No."
        },
        "cscCertDate": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "cscCertLink": {
          "type": "string",
          "description": "CSC Cert Link"
        },
        "insuranceDate": {
          "type": "string",
          "format": "date-time",
          "description": "Insureance date"
        },
        "characteristics_grade": {
          "type": "string"
        },
        "characteristics_tare": {
          "type": "number",
          "description": "weight"
        },
        "electronicsCharging": {
          "type": "boolean",
          "description": "end panel"
        },
        "insurance": {
          "type": "string",
          "description": "insurance"
        },
        "cameraExt": {
          "type": "boolean",
          "description": "cameraExt"
        },
        "cameraInt": {
          "type": "boolean",
          "description": "cameraInt"
        },
        "floorType": {
          "type": "string"
        },
        "doorType": {
          "type": "string"
        },
        "depotId": {
          "type": "string"
        },
        "depotAvailabilityDatePlanned": {
          "type": "string",
          "format": "date-time"
        },
        "depotAvailabilityDateActual": {
          "type": "string",
          "format": "date-time"
        },
        "returnDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "containerId",
        "characteristics_size",
        "characteristics_type",
        "containerVersion",
        "characteristics_maxPayload",
        "characteristics_builtYear",
        "status",
        "volume"
      ]
    },
    "Container": {
      "type": "object",
      "properties": {
        "containerId": {
          "type": "string",
          "description": "ISO code, primary key, natural key"
        },
        "characteristics_size": {
          "type": "string",
          "description": "container operational status",
          "enum": [
            "20ft",
            "40ft",
            "45ft"
          ]
        },
        "characteristics_type": {
          "type": "string",
          "description": "container type",
          "enum": [
            "REEFER",
            "FLEXITANK",
            "NORMAL"
          ]
        },
        "containerVersion": {
          "type": "string"
        },
        "characteristics_maxPayload": {
          "type": "string"
        },
        "characteristics_builtYear": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updatedAt"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "volume": {
          "type": "number",
          "description": "volume"
        },
        "characteristics_tare": {
          "type": "number",
          "description": "weight"
        },
        "inspectionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Inspection Date"
        },
        "cscCertNo": {
          "type": "string",
          "description": "CSC Cert No."
        },
        "cscCertDate": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "characteristics_grade": {
          "type": "string"
        },
        "cscCertLink": {
          "type": "string",
          "description": "cscCertLink"
        },
        "electronicsCharging": {
          "type": "boolean",
          "description": "end panel"
        },
        "insurance": {
          "type": "string",
          "description": "insurance"
        },
        "insuranceDate": {
          "type": "string",
          "format": "date-time",
          "description": "Insurance date"
        },
        "cameraExt": {
          "type": "boolean",
          "description": "cameraExt"
        },
        "cameraInt": {
          "type": "boolean",
          "description": "cameraInt"
        },
        "lastChangedBy": {
          "type": "string",
          "description": "user id"
        },
        "floorType": {
          "type": "string"
        },
        "doorType": {
          "type": "string"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        },
        "equipmentId": {
          "type": "string"
        }
      },
      "required": [
        "containerId",
        "characteristics_size",
        "characteristics_type",
        "containerVersion",
        "characteristics_maxPayload",
        "characteristics_builtYear",
        "updatedAt",
        "createdAt",
        "volume",
        "characteristics_tare",
        "equipmentId"
      ]
    },
    "lease": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "timePlaced": {
          "type": "string",
          "format": "date-time",
          "description": "Time/Date Order was placed in reality"
        },
        "pickupLocation": {
          "type": "string"
        },
        "dropoffLocation": {
          "type": "string"
        },
        "returnDate": {
          "type": "string",
          "format": "date-time",
          "description": "Time/Date pre-agreed return date"
        },
        "executionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Time/Date the order begins"
        },
        "units": {
          "type": "number",
          "description": "Number of units requested"
        },
        "customersBookingNumber": {
          "type": "string",
          "description": "Customers own booking number"
        }
      },
      "required": [
        "orderId",
        "customerId",
        "timePlaced",
        "pickupLocation",
        "dropoffLocation",
        "returnDate",
        "executionDate",
        "units"
      ]
    },
    "status": {
      "type": "object",
      "properties": {
        "contractStatus": {
          "type": "string",
          "description": "contractStatus",
          "enum": [
            "STL",
            "LTL",
            "AEL",
            "OWL",
            "SAL"
          ]
        }
      },
      "required": [
        "contractStatus"
      ]
    },
    "EquipmentLeaseInput": {
      "type": "object",
      "properties": {
        "lease": {
          "$ref": "#/definitions/lease"
        },
        "status": {
          "$ref": "#/definitions/status"
        }
      },
      "required": [
        "lease",
        "status"
      ]
    },
    "ExchangeLocationInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "depotId": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "Model36": {
      "type": "object",
      "properties": {
        "values": {
          "$ref": "#/definitions/Model17"
        }
      },
      "required": [
        "values"
      ]
    },
    "Model37": {
      "type": "object",
      "properties": {
        "piecewiseTimeSeriesId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "values": {
          "$ref": "#/definitions/Model17"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "piecewiseTimeSeriesId",
        "values"
      ]
    },
    "Model38": {
      "type": "object",
      "properties": {
        "stepsPiecewiseTimeSeriesId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "values": {
          "$ref": "#/definitions/Model17"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "stepsPiecewiseTimeSeriesId",
        "values"
      ]
    },
    "shipment": {
      "type": "object",
      "properties": {
        "shipmentId": {
          "type": "string"
        },
        "destinationLocationId": {
          "type": "string"
        },
        "originLocationId": {
          "type": "string"
        }
      },
      "required": [
        "shipmentId",
        "destinationLocationId",
        "originLocationId"
      ]
    },
    "ShipmentCargoInput": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "quantity"
      ]
    },
    "cargo": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ShipmentCargoInput"
      }
    },
    "ShipmentInput": {
      "type": "object",
      "properties": {
        "shipment": {
          "$ref": "#/definitions/shipment"
        },
        "cargo": {
          "$ref": "#/definitions/cargo"
        },
        "status": {
          "type": "string",
          "description": "shipment status during a shipment",
          "enum": [
            "CREATED",
            "OPEN",
            "CLOSED",
            "INTRANSIT",
            "ARRIVED",
            "FAILED"
          ]
        },
        "equipmentIds": {
          "$ref": "#/definitions/Model3"
        },
        "ownerId": {
          "type": "string"
        }
      },
      "required": [
        "shipment",
        "cargo"
      ]
    },
    "contact": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "DepotContactInput": {
      "type": "object",
      "properties": {
        "depotId": {
          "type": "string"
        },
        "contact": {
          "$ref": "#/definitions/contact"
        },
        "role": {
          "type": "string"
        },
        "isRemoveFromBookingConfirmation": {
          "type": "boolean"
        }
      },
      "required": [
        "depotId",
        "contact"
      ]
    },
    "StatusCostInput": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "enum": [
            "AFN",
            "ALL",
            "DZD",
            "ADP",
            "AOA",
            "ARA",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZN",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYN",
            "BEF",
            "BEC",
            "BEL",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BOV",
            "BOP",
            "BAM",
            "BWP",
            "BRL",
            "GBP",
            "BND",
            "BGL",
            "BGN",
            "BGM",
            "BUK",
            "BIF",
            "XPF",
            "KHR",
            "CAD",
            "CVE",
            "KYD",
            "XAF",
            "CLE",
            "CLP",
            "CLF",
            "CNX",
            "CNY",
            "COP",
            "COU",
            "KMF",
            "CDF",
            "CRC",
            "HRD",
            "HRK",
            "CUC",
            "CUP",
            "CYP",
            "CZK",
            "CSK",
            "DKK",
            "DJF",
            "DOP",
            "NLG",
            "XCD",
            "DDM",
            "ECS",
            "ECV",
            "EGP",
            "GQE",
            "ERN",
            "EEK",
            "ETB",
            "EUR",
            "XEU",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XFO",
            "XFU",
            "GMD",
            "GEK",
            "GEL",
            "DEM",
            "GHS",
            "GIP",
            "GRD",
            "GTQ",
            "GWP",
            "GNF",
            "GNS",
            "GYD",
            "HTG",
            "HNL",
            "HKD",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "ILP",
            "ITL",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LVR",
            "LBP",
            "LSL",
            "LRD",
            "LYD",
            "LTL",
            "LTT",
            "LUL",
            "LUC",
            "LUF",
            "MOP",
            "MKD",
            "MGA",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MLF",
            "MTL",
            "MTP",
            "MRO",
            "MUR",
            "MXV",
            "MXN",
            "MDC",
            "MDL",
            "MCF",
            "MNT",
            "MAD",
            "MAF",
            "MZE",
            "MZN",
            "MMK",
            "NAD",
            "NPR",
            "ANG",
            "TWD",
            "NZD",
            "NIO",
            "NGN",
            "KPW",
            "NOK",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEI",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "GWE",
            "QAR",
            "XRE",
            "RHD",
            "RON",
            "RUB",
            "RWF",
            "SVC",
            "WST",
            "SAR",
            "RSD",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "ZAR",
            "ZAL",
            "KRW",
            "SSP",
            "SUR",
            "ESP",
            "ESA",
            "ESB",
            "LKR",
            "SHP",
            "SDG",
            "SRD",
            "SRG",
            "SZL",
            "SEK",
            "CHF",
            "SYP",
            "STD",
            "TJR",
            "TJS",
            "TZS",
            "THB",
            "TPE",
            "TOP",
            "TTD",
            "TND",
            "TRY",
            "TMT",
            "USD",
            "USN",
            "USS",
            "UGX",
            "UAH",
            "UAK",
            "AED",
            "UYU",
            "UYI",
            "UZS",
            "VUV",
            "VEF",
            "VND",
            "CHE",
            "CHW",
            "XOF",
            "YDD",
            "YER",
            "ZMW",
            "ZWR",
            "ZWL"
          ]
        },
        "value": {
          "type": "number"
        },
        "reason": {
          "type": "string"
        },
        "statusId": {
          "type": "string",
          "description": "status ID",
          "x-format": {
            "guid": true
          }
        },
        "invoicedAt": {
          "type": "string",
          "format": "date-time",
          "description": "date at which it was invoiced to us"
        },
        "resolutionDate": {
          "type": "string",
          "description": "date at which the move payment must be made"
        }
      },
      "required": [
        "currency",
        "value"
      ]
    },
    "LeaseRateInput": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "dailyRate": {
          "type": "number"
        },
        "currency": {
          "type": "string",
          "enum": [
            "AFN",
            "ALL",
            "DZD",
            "ADP",
            "AOA",
            "ARA",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZN",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYN",
            "BEF",
            "BEC",
            "BEL",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BOV",
            "BOP",
            "BAM",
            "BWP",
            "BRL",
            "GBP",
            "BND",
            "BGL",
            "BGN",
            "BGM",
            "BUK",
            "BIF",
            "XPF",
            "KHR",
            "CAD",
            "CVE",
            "KYD",
            "XAF",
            "CLE",
            "CLP",
            "CLF",
            "CNX",
            "CNY",
            "COP",
            "COU",
            "KMF",
            "CDF",
            "CRC",
            "HRD",
            "HRK",
            "CUC",
            "CUP",
            "CYP",
            "CZK",
            "CSK",
            "DKK",
            "DJF",
            "DOP",
            "NLG",
            "XCD",
            "DDM",
            "ECS",
            "ECV",
            "EGP",
            "GQE",
            "ERN",
            "EEK",
            "ETB",
            "EUR",
            "XEU",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XFO",
            "XFU",
            "GMD",
            "GEK",
            "GEL",
            "DEM",
            "GHS",
            "GIP",
            "GRD",
            "GTQ",
            "GWP",
            "GNF",
            "GNS",
            "GYD",
            "HTG",
            "HNL",
            "HKD",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "ILP",
            "ITL",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LVR",
            "LBP",
            "LSL",
            "LRD",
            "LYD",
            "LTL",
            "LTT",
            "LUL",
            "LUC",
            "LUF",
            "MOP",
            "MKD",
            "MGA",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MLF",
            "MTL",
            "MTP",
            "MRO",
            "MUR",
            "MXV",
            "MXN",
            "MDC",
            "MDL",
            "MCF",
            "MNT",
            "MAD",
            "MAF",
            "MZE",
            "MZN",
            "MMK",
            "NAD",
            "NPR",
            "ANG",
            "TWD",
            "NZD",
            "NIO",
            "NGN",
            "KPW",
            "NOK",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEI",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "GWE",
            "QAR",
            "XRE",
            "RHD",
            "RON",
            "RUB",
            "RWF",
            "SVC",
            "WST",
            "SAR",
            "RSD",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "ZAR",
            "ZAL",
            "KRW",
            "SSP",
            "SUR",
            "ESP",
            "ESA",
            "ESB",
            "LKR",
            "SHP",
            "SDG",
            "SRD",
            "SRG",
            "SZL",
            "SEK",
            "CHF",
            "SYP",
            "STD",
            "TJR",
            "TJS",
            "TZS",
            "THB",
            "TPE",
            "TOP",
            "TTD",
            "TND",
            "TRY",
            "TMT",
            "USD",
            "USN",
            "USS",
            "UGX",
            "UAH",
            "UAK",
            "AED",
            "UYU",
            "UYI",
            "UZS",
            "VUV",
            "VEF",
            "VND",
            "CHE",
            "CHW",
            "XOF",
            "YDD",
            "YER",
            "ZMW",
            "ZWR",
            "ZWL"
          ]
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "orderId": {
          "type": "string",
          "description": "bla"
        }
      },
      "required": [
        "customerId",
        "validFrom",
        "dailyRate",
        "currency"
      ]
    },
    "MoveCostInput": {
      "type": "object",
      "properties": {
        "moveId": {
          "type": "string",
          "description": "bla",
          "x-format": {
            "guid": true
          }
        },
        "cost": {
          "type": "number"
        },
        "currency": {
          "type": "string",
          "enum": [
            "AFN",
            "ALL",
            "DZD",
            "ADP",
            "AOA",
            "ARA",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZN",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYN",
            "BEF",
            "BEC",
            "BEL",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BOV",
            "BOP",
            "BAM",
            "BWP",
            "BRL",
            "GBP",
            "BND",
            "BGL",
            "BGN",
            "BGM",
            "BUK",
            "BIF",
            "XPF",
            "KHR",
            "CAD",
            "CVE",
            "KYD",
            "XAF",
            "CLE",
            "CLP",
            "CLF",
            "CNX",
            "CNY",
            "COP",
            "COU",
            "KMF",
            "CDF",
            "CRC",
            "HRD",
            "HRK",
            "CUC",
            "CUP",
            "CYP",
            "CZK",
            "CSK",
            "DKK",
            "DJF",
            "DOP",
            "NLG",
            "XCD",
            "DDM",
            "ECS",
            "ECV",
            "EGP",
            "GQE",
            "ERN",
            "EEK",
            "ETB",
            "EUR",
            "XEU",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XFO",
            "XFU",
            "GMD",
            "GEK",
            "GEL",
            "DEM",
            "GHS",
            "GIP",
            "GRD",
            "GTQ",
            "GWP",
            "GNF",
            "GNS",
            "GYD",
            "HTG",
            "HNL",
            "HKD",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "ILP",
            "ITL",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LVR",
            "LBP",
            "LSL",
            "LRD",
            "LYD",
            "LTL",
            "LTT",
            "LUL",
            "LUC",
            "LUF",
            "MOP",
            "MKD",
            "MGA",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MLF",
            "MTL",
            "MTP",
            "MRO",
            "MUR",
            "MXV",
            "MXN",
            "MDC",
            "MDL",
            "MCF",
            "MNT",
            "MAD",
            "MAF",
            "MZE",
            "MZN",
            "MMK",
            "NAD",
            "NPR",
            "ANG",
            "TWD",
            "NZD",
            "NIO",
            "NGN",
            "KPW",
            "NOK",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEI",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "GWE",
            "QAR",
            "XRE",
            "RHD",
            "RON",
            "RUB",
            "RWF",
            "SVC",
            "WST",
            "SAR",
            "RSD",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "ZAR",
            "ZAL",
            "KRW",
            "SSP",
            "SUR",
            "ESP",
            "ESA",
            "ESB",
            "LKR",
            "SHP",
            "SDG",
            "SRD",
            "SRG",
            "SZL",
            "SEK",
            "CHF",
            "SYP",
            "STD",
            "TJR",
            "TJS",
            "TZS",
            "THB",
            "TPE",
            "TOP",
            "TTD",
            "TND",
            "TRY",
            "TMT",
            "USD",
            "USN",
            "USS",
            "UGX",
            "UAH",
            "UAK",
            "AED",
            "UYU",
            "UYI",
            "UZS",
            "VUV",
            "VEF",
            "VND",
            "CHE",
            "CHW",
            "XOF",
            "YDD",
            "YER",
            "ZMW",
            "ZWR",
            "ZWL"
          ]
        },
        "reason": {
          "type": "string",
          "description": "Haulage or DEL or ???"
        },
        "resolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "date at which the move payment must be made"
        },
        "discount": {
          "type": "number"
        }
      },
      "required": [
        "moveId",
        "cost",
        "currency",
        "reason"
      ]
    },
    "StorageRateBase": {
      "type": "object",
      "properties": {
        "depotId": {
          "type": "string"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "currency": {
          "type": "string",
          "enum": [
            "AFN",
            "ALL",
            "DZD",
            "ADP",
            "AOA",
            "ARA",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZN",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYN",
            "BEF",
            "BEC",
            "BEL",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BOV",
            "BOP",
            "BAM",
            "BWP",
            "BRL",
            "GBP",
            "BND",
            "BGL",
            "BGN",
            "BGM",
            "BUK",
            "BIF",
            "XPF",
            "KHR",
            "CAD",
            "CVE",
            "KYD",
            "XAF",
            "CLE",
            "CLP",
            "CLF",
            "CNX",
            "CNY",
            "COP",
            "COU",
            "KMF",
            "CDF",
            "CRC",
            "HRD",
            "HRK",
            "CUC",
            "CUP",
            "CYP",
            "CZK",
            "CSK",
            "DKK",
            "DJF",
            "DOP",
            "NLG",
            "XCD",
            "DDM",
            "ECS",
            "ECV",
            "EGP",
            "GQE",
            "ERN",
            "EEK",
            "ETB",
            "EUR",
            "XEU",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XFO",
            "XFU",
            "GMD",
            "GEK",
            "GEL",
            "DEM",
            "GHS",
            "GIP",
            "GRD",
            "GTQ",
            "GWP",
            "GNF",
            "GNS",
            "GYD",
            "HTG",
            "HNL",
            "HKD",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "ILP",
            "ITL",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LVR",
            "LBP",
            "LSL",
            "LRD",
            "LYD",
            "LTL",
            "LTT",
            "LUL",
            "LUC",
            "LUF",
            "MOP",
            "MKD",
            "MGA",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MLF",
            "MTL",
            "MTP",
            "MRO",
            "MUR",
            "MXV",
            "MXN",
            "MDC",
            "MDL",
            "MCF",
            "MNT",
            "MAD",
            "MAF",
            "MZE",
            "MZN",
            "MMK",
            "NAD",
            "NPR",
            "ANG",
            "TWD",
            "NZD",
            "NIO",
            "NGN",
            "KPW",
            "NOK",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEI",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "GWE",
            "QAR",
            "XRE",
            "RHD",
            "RON",
            "RUB",
            "RWF",
            "SVC",
            "WST",
            "SAR",
            "RSD",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "ZAR",
            "ZAL",
            "KRW",
            "SSP",
            "SUR",
            "ESP",
            "ESA",
            "ESB",
            "LKR",
            "SHP",
            "SDG",
            "SRD",
            "SRG",
            "SZL",
            "SEK",
            "CHF",
            "SYP",
            "STD",
            "TJR",
            "TJS",
            "TZS",
            "THB",
            "TPE",
            "TOP",
            "TTD",
            "TND",
            "TRY",
            "TMT",
            "USD",
            "USN",
            "USS",
            "UGX",
            "UAH",
            "UAK",
            "AED",
            "UYU",
            "UYI",
            "UZS",
            "VUV",
            "VEF",
            "VND",
            "CHE",
            "CHW",
            "XOF",
            "YDD",
            "YER",
            "ZMW",
            "ZWR",
            "ZWL"
          ]
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "discount": {
          "type": "number"
        },
        "containerType": {
          "type": "string",
          "description": "container type",
          "enum": [
            "20ft",
            "40ft"
          ]
        }
      },
      "required": [
        "depotId",
        "validFrom",
        "currency"
      ]
    },
    "StorageRateInput": {
      "type": "object",
      "properties": {
        "input": {
          "$ref": "#/definitions/StorageRateBase"
        },
        "dailyRate": {
          "$ref": "#/definitions/DailyRate",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/DailyRate"
            },
            {
              "$ref": "#/x-alt-definitions/Model2"
            }
          ]
        }
      },
      "required": [
        "input",
        "dailyRate"
      ]
    },
    "ContainerPanelProfileInput": {
      "type": "object",
      "properties": {
        "leftPanel": {
          "type": "string"
        },
        "rightPanel": {
          "type": "string"
        },
        "roofPanel": {
          "type": "string"
        },
        "endPanel": {
          "type": "string"
        }
      }
    },
    "ContainerSensorsProfileInput": {
      "type": "object",
      "properties": {
        "aelerBoardId": {
          "type": "string"
        },
        "kizyBoardId": {
          "type": "string"
        },
        "nexxiotBoardId": {
          "type": "string"
        },
        "source": {
          "type": "string",
          "description": "source",
          "enum": [
            "aeler",
            "nexxiot",
            "kizy"
          ]
        },
        "dateFittedAeler": {
          "type": "string",
          "format": "date-time"
        },
        "dateFittedKizy": {
          "type": "string",
          "format": "date-time"
        },
        "dateFittedNexxiot": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EquipmentLeaseContractInput": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        }
      },
      "required": [
        "orderId"
      ]
    },
    "EquipmentStatusInput": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "ALLOCATED",
            "MNR",
            "INTESTING",
            "PRODUCTION",
            "SOLD",
            "EOL",
            "BLOCKED"
          ]
        },
        "locationFrom": {
          "type": "string"
        },
        "depotInDatePlanned": {
          "type": "string",
          "format": "date-time",
          "description": "date when the container is to be returned to the depot according to the order contract."
        },
        "depotOutDatePlanned": {
          "type": "string",
          "format": "date-time",
          "description": "date when the container is supposed to leave the depot according to the order contract"
        },
        "depotInDateActual": {
          "type": "string",
          "format": "date-time",
          "description": "date when the container actually returned to the depot."
        },
        "depotOutDateActual": {
          "type": "string",
          "format": "date-time",
          "description": "date when the container actually left to the depot"
        },
        "reason": {
          "type": "string",
          "description": "status reason, example: DAMAGED"
        }
      },
      "required": [
        "status",
        "locationFrom"
      ]
    },
    "EquipmentMoveInput": {
      "type": "object",
      "properties": {
        "equipmentId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "pickupDate": {
          "type": "string",
          "format": "date-time"
        },
        "moveType": {
          "type": "string",
          "enum": [
            "REPO",
            "MNR",
            "SHIP"
          ]
        },
        "equipmentLeaseContractId": {
          "type": "string"
        },
        "originId": {
          "type": "string"
        },
        "destinationId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "fixedCosts": {
          "type": "number"
        },
        "fixedCostsRatio": {
          "type": "number"
        },
        "currency": {
          "type": "string"
        },
        "dropoffDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "equipmentId",
        "pickupDate",
        "moveType"
      ]
    },
    "Model39": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "numDays": {
          "type": "number"
        }
      },
      "required": [
        "date",
        "numDays"
      ]
    },
    "Model40": {
      "type": "array",
      "items": {
        "type": "number"
      }
    },
    "LeaseVisibilityInput": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string",
          "description": "customerId"
        },
        "startAt": {
          "type": "string",
          "format": "date-time",
          "description": "start time"
        },
        "stopAt": {
          "type": "string",
          "format": "date-time",
          "description": "stop time"
        },
        "isSameDatesAsLease": {
          "type": "boolean",
          "description": "flag"
        },
        "isSameDatesAsStatus": {
          "type": "boolean",
          "description": "flag"
        },
        "isActive": {
          "type": "boolean",
          "description": "is it active or not"
        }
      },
      "required": [
        "customerId"
      ]
    },
    "Model41": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean"
        }
      },
      "required": [
        "status"
      ]
    },
    "EquipmentLeaseStatusInput": {
      "type": "object",
      "properties": {
        "orderStatus": {
          "type": "string",
          "description": "orderStatus",
          "enum": [
            "CREATED",
            "ACCEPTED",
            "AELER-CANCELED",
            "CUSTOMER-CANCELED",
            "COMPLETED-FULFILLED",
            "COMPLETED-FAILED"
          ]
        },
        "contractStatus": {
          "type": "string",
          "description": "contractStatus",
          "enum": [
            "STL",
            "LTL",
            "AEL",
            "OWL",
            "SAL"
          ]
        }
      },
      "required": [
        "orderStatus",
        "contractStatus"
      ]
    },
    "Model42": {
      "type": "object",
      "properties": {
        "equipmentLeaseContractId": {
          "type": "string"
        },
        "equipmentId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "orderId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "active": {
          "type": "boolean",
          "description": "active or canceled allocation"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "equipmentLeaseContractId",
        "equipmentId",
        "orderId",
        "createdAt",
        "active"
      ]
    },
    "transport": {
      "type": "object",
      "properties": {
        "transportResponsible": {
          "type": "string"
        }
      },
      "required": [
        "transportResponsible"
      ]
    },
    "transportRef": {
      "type": "object",
      "properties": {
        "ref": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "ref",
        "type"
      ]
    },
    "ShipmentTransportInput": {
      "type": "object",
      "properties": {
        "transport": {
          "$ref": "#/definitions/transport"
        },
        "transportRef": {
          "$ref": "#/definitions/transportRef"
        }
      },
      "required": [
        "transport"
      ]
    },
    "ShipmentTransport": {
      "type": "object",
      "properties": {
        "ownerId": {
          "type": "string"
        },
        "requesterId": {
          "type": "string"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        },
        "shipmentTransportId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "shipmentId": {
          "type": "string"
        },
        "transportResponsible": {
          "type": "string"
        }
      },
      "required": [
        "ownerId",
        "requesterId",
        "shipmentTransportId",
        "shipmentId",
        "transportResponsible"
      ]
    },
    "ShipmentStatusInput": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "shipment status during a shipment",
          "enum": [
            "CREATED",
            "OPEN",
            "CLOSED",
            "INTRANSIT",
            "ARRIVED",
            "FAILED"
          ]
        }
      },
      "required": [
        "status"
      ]
    },
    "ShipmentStatus": {
      "type": "object",
      "properties": {
        "ownerId": {
          "type": "string"
        },
        "requesterId": {
          "type": "string"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        },
        "shipmentId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the move status was submitted"
        },
        "status": {
          "type": "string",
          "description": "shipment status during a shipment",
          "enum": [
            "CREATED",
            "OPEN",
            "CLOSED",
            "INTRANSIT",
            "ARRIVED",
            "FAILED"
          ]
        },
        "isCurrent": {
          "type": "boolean"
        }
      },
      "required": [
        "ownerId",
        "requesterId",
        "shipmentId",
        "createdAt",
        "status",
        "isCurrent"
      ]
    },
    "EquipmentStatusAvailableInput": {
      "type": "object",
      "properties": {
        "stopAtActual": {
          "type": "string",
          "format": "date-time",
          "description": "date when the previous valid status should stop"
        },
        "depotIdActual": {
          "type": "string",
          "description": "confirmed depot"
        },
        "statusId": {
          "type": "string"
        }
      },
      "required": [
        "stopAtActual"
      ]
    },
    "ContainerBoardPairingProfilePatchInput": {
      "type": "object",
      "properties": {
        "containerId": {
          "type": "string",
          "description": "which container does this log relate to",
          "x-format": {
            "guid": true
          }
        },
        "boardId": {
          "type": "string",
          "description": "which board does this log relate to",
          "x-format": {
            "guid": true
          }
        },
        "boardSource": {
          "type": "string",
          "description": "source",
          "enum": [
            "aeler",
            "nexxiot",
            "kizy"
          ]
        },
        "installDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date for board installation"
        },
        "removalDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date for board removal"
        },
        "installComments": {
          "type": "string",
          "description": "Comments for board installation"
        },
        "removalComments": {
          "type": "string",
          "description": "Comments for board remvoval"
        },
        "installTechnicianId": {
          "type": "string",
          "description": "ID of the technician who installed board"
        },
        "removalTechnicianId": {
          "type": "string",
          "description": "ID of the technician who removed board"
        },
        "installLocationId": {
          "type": "string",
          "description": "Location ID of installation of board on container"
        },
        "removalLocationId": {
          "type": "string",
          "description": "Location ID of removal of board on container"
        },
        "installLocationName": {
          "type": "string",
          "description": "Location name of installation of board on container"
        },
        "removalLocationName": {
          "type": "string",
          "description": "Location name of removal of board on container"
        }
      }
    },
    "Model43": {
      "type": "object",
      "properties": {
        "boardPairingProfileId": {
          "type": "string"
        },
        "payload": {
          "$ref": "#/definitions/ContainerBoardPairingProfilePatchInput"
        }
      },
      "required": [
        "boardPairingProfileId",
        "payload"
      ]
    },
    "ContainerPatchInput": {
      "type": "object",
      "properties": {
        "characteristics_size": {
          "type": "string",
          "description": "container operational status",
          "enum": [
            "20ft",
            "40ft",
            "45ft"
          ]
        },
        "characteristics_type": {
          "type": "string",
          "description": "container type",
          "enum": [
            "REEFER",
            "FLEXITANK",
            "NORMAL"
          ]
        },
        "containerVersion": {
          "type": "string"
        },
        "characteristics_maxPayload": {
          "type": "string"
        },
        "characteristics_builtYear": {
          "type": "string"
        },
        "volume": {
          "type": "number",
          "description": "volumne"
        },
        "characteristics_tare": {
          "type": "number",
          "description": "weight"
        },
        "inspectionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Inspection Date"
        },
        "cscCertNo": {
          "type": "string",
          "description": "CSC Cert No."
        },
        "cscCertDate": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "characteristics_grade": {
          "type": "string"
        },
        "cscCertLink": {
          "type": "string",
          "description": "cscCertLink"
        },
        "electronicsCharging": {
          "type": "boolean",
          "description": "end panel"
        },
        "insurance": {
          "type": "string",
          "description": "insurance"
        },
        "insuranceDate": {
          "type": "string",
          "format": "date-time",
          "description": "Insurance date"
        },
        "cameraExt": {
          "type": "boolean",
          "description": "cameraExt"
        },
        "cameraInt": {
          "type": "boolean",
          "description": "cameraInt"
        },
        "floorType": {
          "type": "string"
        },
        "doorType": {
          "type": "string"
        },
        "depotId": {
          "type": "string"
        },
        "lastChangedBy": {
          "type": "string",
          "description": "user id"
        }
      }
    },
    "EquipmentLeasePatchInput": {
      "type": "object",
      "properties": {
        "pickupLocation": {
          "type": "string"
        },
        "dropoffLocation": {
          "type": "string"
        },
        "returnDate": {
          "type": "string",
          "format": "date-time",
          "description": "Time/Date pre-agreed return date"
        },
        "executionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Time/Date the order begins"
        },
        "units": {
          "type": "number",
          "description": "Number of units requested"
        },
        "customersBookingNumber": {
          "type": "string",
          "description": "Customers own booking number"
        }
      }
    },
    "EquipmentLeaseUpdateInput": {
      "type": "object",
      "properties": {
        "stopAtActual": {
          "type": "string",
          "format": "date-time"
        },
        "endLocationId": {
          "type": "string"
        }
      },
      "required": [
        "stopAtActual",
        "endLocationId"
      ]
    },
    "PatchDepotContactInput": {
      "type": "object",
      "properties": {
        "contact": {
          "$ref": "#/definitions/contact"
        },
        "role": {
          "type": "string"
        },
        "isRemoveFromBookingConfirmation": {
          "type": "boolean"
        }
      },
      "required": [
        "contact"
      ]
    },
    "PatchEquipmentStatusInput": {
      "type": "object",
      "properties": {
        "locationFromPlanned": {
          "type": "string"
        },
        "locationFromActual": {
          "type": "string"
        },
        "locationToPlanned": {
          "type": "string"
        },
        "locationToActual": {
          "type": "string"
        },
        "depotInDatePlanned": {
          "type": "string",
          "format": "date-time",
          "description": "date when the container is to be returned to the depot according to the order contract."
        },
        "depotOutDatePlanned": {
          "type": "string",
          "format": "date-time",
          "description": "date when the container is supposed to leave the depot according to the order contract"
        },
        "depotInDateActual": {
          "type": "string",
          "format": "date-time",
          "description": "date when the container actually returned to the depot."
        },
        "depotOutDateActual": {
          "type": "string",
          "format": "date-time",
          "description": "date when the container actually left to the depot"
        },
        "comment": {
          "type": "string",
          "description": "comment",
          "pattern": "^.{0,255}$"
        }
      }
    },
    "LeaseVisibilityPatchInput": {
      "type": "object",
      "properties": {
        "startAt": {
          "type": "string",
          "format": "date-time",
          "description": "start time"
        },
        "stopAt": {
          "type": "string",
          "format": "date-time",
          "description": "stop time"
        },
        "isSameDatesAsLease": {
          "type": "boolean",
          "description": "flag"
        },
        "isSameDatesAsStatus": {
          "type": "boolean",
          "description": "flag"
        },
        "isActive": {
          "type": "boolean",
          "description": "is it active or not"
        }
      }
    },
    "ContainerBoardPairingProfileDeleteInput": {
      "type": "object",
      "properties": {
        "boardPairingProfileId": {
          "type": "string"
        }
      },
      "required": [
        "boardPairingProfileId"
      ]
    },
    "Model44": {
      "type": "object",
      "properties": {
        "numDel": {
          "type": "number"
        }
      },
      "required": [
        "numDel"
      ]
    },
    "Model45": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/EquipmentLeaseContractInput"
      }
    },
    "Model46": {
      "type": "object",
      "properties": {
        "costId": {
          "type": "string"
        }
      },
      "required": [
        "costId"
      ]
    }
  },
  "x-alt-definitions": {
    "DailyRate": {
      "type": "object",
      "properties": {
        "rateId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "flat"
          ]
        },
        "rate": {
          "type": "number"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "rateId",
        "type",
        "rate"
      ]
    },
    "Model1": {
      "type": "object",
      "properties": {
        "fromDay": {
          "type": "number"
        },
        "toDay": {
          "type": "number"
        },
        "rate": {
          "type": "number"
        }
      },
      "required": [
        "fromDay",
        "toDay",
        "rate"
      ]
    },
    "rate": {
      "type": "array",
      "items": {
        "$ref": "#/x-alt-definitions/Model1"
      }
    },
    "Model2": {
      "type": "object",
      "properties": {
        "rateId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "staggered"
          ]
        },
        "rate": {
          "$ref": "#/x-alt-definitions/rate"
        },
        "lastChangedByUserId": {
          "type": "string",
          "description": "the last user who changed the object",
          "x-format": {
            "guid": true
          }
        },
        "lastOperation": {
          "type": "string",
          "enum": [
            "D",
            "C",
            "U"
          ]
        }
      },
      "required": [
        "rateId",
        "type",
        "rate"
      ]
    }
  },
  "security": [
    {
      "jwt": []
    }
  ]
}
