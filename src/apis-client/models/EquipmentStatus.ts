/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EquipmentStatus
 */
export interface EquipmentStatus {
    /**
     * 
     * @type {string}
     * @memberof EquipmentStatus
     */
    statusId: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStatus
     */
    equipmentId: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStatus
     */
    status: EquipmentStatusStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof EquipmentStatus
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EquipmentStatus
     */
    startAtPlanned?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EquipmentStatus
     */
    startAtActual?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EquipmentStatus
     */
    stopAtPlanned?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EquipmentStatus
     */
    stopAtActual?: Date;
    /**
     * location ID of where the status stops and the equipment becomes available
     * @type {string}
     * @memberof EquipmentStatus
     */
    availabilityLocationId?: string;
    /**
     * location ID
     * @type {string}
     * @memberof EquipmentStatus
     */
    locationStartPlanned?: string;
    /**
     * location ID
     * @type {string}
     * @memberof EquipmentStatus
     */
    locationStartActual?: string;
    /**
     * location ID
     * @type {string}
     * @memberof EquipmentStatus
     */
    locationStopPlanned?: string;
    /**
     * location ID
     * @type {string}
     * @memberof EquipmentStatus
     */
    locationStopActual?: string;
    /**
     * is it active or inactive
     * @type {boolean}
     * @memberof EquipmentStatus
     */
    isActive?: boolean;
    /**
     * equipmentLeaseContractId
     * @type {string}
     * @memberof EquipmentStatus
     */
    equipmentLeaseContractId?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStatus
     */
    lastChangedBy?: string;
    /**
     * example: DAMAGED
     * @type {string}
     * @memberof EquipmentStatus
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStatus
     */
    comment?: string;
    /**
     * the last user who changed the object
     * @type {string}
     * @memberof EquipmentStatus
     */
    lastChangedByUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStatus
     */
    lastOperation?: EquipmentStatusLastOperationEnum;
}

/**
* @export
* @enum {string}
*/
export enum EquipmentStatusStatusEnum {
    Allocated = 'ALLOCATED',
    Mnr = 'MNR',
    Intesting = 'INTESTING',
    Production = 'PRODUCTION',
    Sold = 'SOLD',
    Eol = 'EOL',
    Blocked = 'BLOCKED',
    Available = 'AVAILABLE'
}/**
* @export
* @enum {string}
*/
export enum EquipmentStatusLastOperationEnum {
    D = 'D',
    C = 'C',
    U = 'U'
}

export function EquipmentStatusFromJSON(json: any): EquipmentStatus {
    return EquipmentStatusFromJSONTyped(json, false);
}

export function EquipmentStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): EquipmentStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'statusId': json['statusId'],
        'equipmentId': json['equipmentId'],
        'status': json['status'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'startAtPlanned': !exists(json, 'startAtPlanned') ? undefined : (new Date(json['startAtPlanned'])),
        'startAtActual': !exists(json, 'startAtActual') ? undefined : (new Date(json['startAtActual'])),
        'stopAtPlanned': !exists(json, 'stopAtPlanned') ? undefined : (new Date(json['stopAtPlanned'])),
        'stopAtActual': !exists(json, 'stopAtActual') ? undefined : (new Date(json['stopAtActual'])),
        'availabilityLocationId': !exists(json, 'availabilityLocationId') ? undefined : json['availabilityLocationId'],
        'locationStartPlanned': !exists(json, 'locationStartPlanned') ? undefined : json['locationStartPlanned'],
        'locationStartActual': !exists(json, 'locationStartActual') ? undefined : json['locationStartActual'],
        'locationStopPlanned': !exists(json, 'locationStopPlanned') ? undefined : json['locationStopPlanned'],
        'locationStopActual': !exists(json, 'locationStopActual') ? undefined : json['locationStopActual'],
        'isActive': !exists(json, 'isActive') ? undefined : json['isActive'],
        'equipmentLeaseContractId': !exists(json, 'equipmentLeaseContractId') ? undefined : json['equipmentLeaseContractId'],
        'lastChangedBy': !exists(json, 'lastChangedBy') ? undefined : json['lastChangedBy'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'lastChangedByUserId': !exists(json, 'lastChangedByUserId') ? undefined : json['lastChangedByUserId'],
        'lastOperation': !exists(json, 'lastOperation') ? undefined : json['lastOperation'],
    };
}

export function EquipmentStatusToJSON(value?: EquipmentStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'statusId': value.statusId,
        'equipmentId': value.equipmentId,
        'status': value.status,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'startAtPlanned': value.startAtPlanned === undefined ? undefined : (value.startAtPlanned.toISOString()),
        'startAtActual': value.startAtActual === undefined ? undefined : (value.startAtActual.toISOString()),
        'stopAtPlanned': value.stopAtPlanned === undefined ? undefined : (value.stopAtPlanned.toISOString()),
        'stopAtActual': value.stopAtActual === undefined ? undefined : (value.stopAtActual.toISOString()),
        'availabilityLocationId': value.availabilityLocationId,
        'locationStartPlanned': value.locationStartPlanned,
        'locationStartActual': value.locationStartActual,
        'locationStopPlanned': value.locationStopPlanned,
        'locationStopActual': value.locationStopActual,
        'isActive': value.isActive,
        'equipmentLeaseContractId': value.equipmentLeaseContractId,
        'lastChangedBy': value.lastChangedBy,
        'reason': value.reason,
        'comment': value.comment,
        'lastChangedByUserId': value.lastChangedByUserId,
        'lastOperation': value.lastOperation,
    };
}


