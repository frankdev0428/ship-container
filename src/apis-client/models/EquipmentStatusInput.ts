/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EquipmentStatusInput
 */
export interface EquipmentStatusInput {
    /**
     * 
     * @type {string}
     * @memberof EquipmentStatusInput
     */
    status: EquipmentStatusInputStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStatusInput
     */
    locationFrom: string;
    /**
     * date when the container is to be returned to the depot according to the order contract.
     * @type {Date}
     * @memberof EquipmentStatusInput
     */
    depotInDatePlanned?: Date;
    /**
     * date when the container is supposed to leave the depot according to the order contract
     * @type {Date}
     * @memberof EquipmentStatusInput
     */
    depotOutDatePlanned?: Date;
    /**
     * date when the container actually returned to the depot.
     * @type {Date}
     * @memberof EquipmentStatusInput
     */
    depotInDateActual?: Date;
    /**
     * date when the container actually left to the depot
     * @type {Date}
     * @memberof EquipmentStatusInput
     */
    depotOutDateActual?: Date;
    /**
     * status reason, example: DAMAGED
     * @type {string}
     * @memberof EquipmentStatusInput
     */
    reason?: string;
}

/**
* @export
* @enum {string}
*/
export enum EquipmentStatusInputStatusEnum {
    Allocated = 'ALLOCATED',
    Mnr = 'MNR',
    Intesting = 'INTESTING',
    Production = 'PRODUCTION',
    Sold = 'SOLD',
    Eol = 'EOL',
    Blocked = 'BLOCKED',
    Available = 'AVAILABLE'
}

export function EquipmentStatusInputFromJSON(json: any): EquipmentStatusInput {
    return EquipmentStatusInputFromJSONTyped(json, false);
}

export function EquipmentStatusInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): EquipmentStatusInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': json['status'],
        'locationFrom': json['locationFrom'],
        'depotInDatePlanned': !exists(json, 'depotInDatePlanned') ? undefined : (new Date(json['depotInDatePlanned'])),
        'depotOutDatePlanned': !exists(json, 'depotOutDatePlanned') ? undefined : (new Date(json['depotOutDatePlanned'])),
        'depotInDateActual': !exists(json, 'depotInDateActual') ? undefined : (new Date(json['depotInDateActual'])),
        'depotOutDateActual': !exists(json, 'depotOutDateActual') ? undefined : (new Date(json['depotOutDateActual'])),
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
    };
}

export function EquipmentStatusInputToJSON(value?: EquipmentStatusInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': value.status,
        'locationFrom': value.locationFrom,
        'depotInDatePlanned': value.depotInDatePlanned === undefined ? undefined : (value.depotInDatePlanned.toISOString()),
        'depotOutDatePlanned': value.depotOutDatePlanned === undefined ? undefined : (value.depotOutDatePlanned.toISOString()),
        'depotInDateActual': value.depotInDateActual === undefined ? undefined : (value.depotInDateActual.toISOString()),
        'depotOutDateActual': value.depotOutDateActual === undefined ? undefined : (value.depotOutDateActual.toISOString()),
        'reason': value.reason,
    };
}


