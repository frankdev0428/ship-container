/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EquipmentMoveStatus,
    EquipmentMoveStatusFromJSON,
    EquipmentMoveStatusFromJSONTyped,
    EquipmentMoveStatusToJSON,
    MoveCost,
    MoveCostFromJSON,
    MoveCostFromJSONTyped,
    MoveCostToJSON,
} from './';

/**
 * 
 * @export
 * @interface EquipmentMoveWithStatus
 */
export interface EquipmentMoveWithStatus {
    /**
     * 
     * @type {string}
     * @memberof EquipmentMoveWithStatus
     */
    moveId: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentMoveWithStatus
     */
    equipmentId: string;
    /**
     * When the move was submitted
     * @type {Date}
     * @memberof EquipmentMoveWithStatus
     */
    createdAt: Date;
    /**
     * When the move is planned to start
     * @type {Date}
     * @memberof EquipmentMoveWithStatus
     */
    pickupDate: Date;
    /**
     * 
     * @type {string}
     * @memberof EquipmentMoveWithStatus
     */
    moveType: EquipmentMoveWithStatusMoveTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof EquipmentMoveWithStatus
     */
    equipmentLeaseContractId?: string;
    /**
     * this is an exchange location, origin
     * @type {string}
     * @memberof EquipmentMoveWithStatus
     */
    originId?: string;
    /**
     * this is an exchange location, destination
     * @type {string}
     * @memberof EquipmentMoveWithStatus
     */
    destinationId?: string;
    /**
     * 
     * @type {number}
     * @memberof EquipmentMoveWithStatus
     */
    fixedCosts?: number;
    /**
     * 
     * @type {number}
     * @memberof EquipmentMoveWithStatus
     */
    fixedCostsRatio?: number;
    /**
     * 
     * @type {string}
     * @memberof EquipmentMoveWithStatus
     */
    currency?: string;
    /**
     * 
     * @type {Date}
     * @memberof EquipmentMoveWithStatus
     */
    dropoffDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof EquipmentMoveWithStatus
     */
    customerId?: string;
    /**
     * the last user who changed the object
     * @type {string}
     * @memberof EquipmentMoveWithStatus
     */
    lastChangedByUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentMoveWithStatus
     */
    lastOperation?: EquipmentMoveWithStatusLastOperationEnum;
    /**
     * 
     * @type {EquipmentMoveStatus}
     * @memberof EquipmentMoveWithStatus
     */
    equipmentmovestatus: EquipmentMoveStatus;
    /**
     * 
     * @type {MoveCost}
     * @memberof EquipmentMoveWithStatus
     */
    movecosts: MoveCost;
}

/**
* @export
* @enum {string}
*/
export enum EquipmentMoveWithStatusMoveTypeEnum {
    Repo = 'REPO',
    Mnr = 'MNR',
    Ship = 'SHIP',
    Init = 'INIT'
}/**
* @export
* @enum {string}
*/
export enum EquipmentMoveWithStatusLastOperationEnum {
    D = 'D',
    C = 'C',
    U = 'U'
}

export function EquipmentMoveWithStatusFromJSON(json: any): EquipmentMoveWithStatus {
    return EquipmentMoveWithStatusFromJSONTyped(json, false);
}

export function EquipmentMoveWithStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): EquipmentMoveWithStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'moveId': json['moveId'],
        'equipmentId': json['equipmentId'],
        'createdAt': (new Date(json['createdAt'])),
        'pickupDate': (new Date(json['pickupDate'])),
        'moveType': json['moveType'],
        'equipmentLeaseContractId': !exists(json, 'equipmentLeaseContractId') ? undefined : json['equipmentLeaseContractId'],
        'originId': !exists(json, 'originId') ? undefined : json['originId'],
        'destinationId': !exists(json, 'destinationId') ? undefined : json['destinationId'],
        'fixedCosts': !exists(json, 'fixedCosts') ? undefined : json['fixedCosts'],
        'fixedCostsRatio': !exists(json, 'fixedCostsRatio') ? undefined : json['fixedCostsRatio'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'dropoffDate': !exists(json, 'dropoffDate') ? undefined : (new Date(json['dropoffDate'])),
        'customerId': !exists(json, 'customerId') ? undefined : json['customerId'],
        'lastChangedByUserId': !exists(json, 'lastChangedByUserId') ? undefined : json['lastChangedByUserId'],
        'lastOperation': !exists(json, 'lastOperation') ? undefined : json['lastOperation'],
        'equipmentmovestatus': EquipmentMoveStatusFromJSON(json['equipmentmovestatus']),
        'movecosts': MoveCostFromJSON(json['movecosts']),
    };
}

export function EquipmentMoveWithStatusToJSON(value?: EquipmentMoveWithStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'moveId': value.moveId,
        'equipmentId': value.equipmentId,
        'createdAt': (value.createdAt.toISOString()),
        'pickupDate': (value.pickupDate.toISOString()),
        'moveType': value.moveType,
        'equipmentLeaseContractId': value.equipmentLeaseContractId,
        'originId': value.originId,
        'destinationId': value.destinationId,
        'fixedCosts': value.fixedCosts,
        'fixedCostsRatio': value.fixedCostsRatio,
        'currency': value.currency,
        'dropoffDate': value.dropoffDate === undefined ? undefined : (value.dropoffDate.toISOString()),
        'customerId': value.customerId,
        'lastChangedByUserId': value.lastChangedByUserId,
        'lastOperation': value.lastOperation,
        'equipmentmovestatus': EquipmentMoveStatusToJSON(value.equipmentmovestatus),
        'movecosts': MoveCostToJSON(value.movecosts),
    };
}


