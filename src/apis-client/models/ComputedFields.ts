/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CurrentLease,
    CurrentLeaseFromJSON,
    CurrentLeaseFromJSONTyped,
    CurrentLeaseToJSON,
} from './';

/**
 * 
 * @export
 * @interface ComputedFields
 */
export interface ComputedFields {
    /**
     * 
     * @type {string}
     * @memberof ComputedFields
     */
    currentLocation?: string;
    /**
     * 
     * @type {string}
     * @memberof ComputedFields
     */
    destinationLocation?: string;
    /**
     * 
     * @type {CurrentLease}
     * @memberof ComputedFields
     */
    allocationStatus?: CurrentLease;
    /**
     * 
     * @type {string}
     * @memberof ComputedFields
     */
    operationalStatus?: ComputedFieldsOperationalStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof ComputedFields
     */
    idleDays?: number;
    /**
     * 
     * @type {number}
     * @memberof ComputedFields
     */
    daysOverdue?: number;
    /**
     * 
     * @type {string}
     * @memberof ComputedFields
     */
    customer?: string;
    /**
     * 
     * @type {Date}
     * @memberof ComputedFields
     */
    availableFrom?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ComputedFields
     */
    availableTo?: Date;
    /**
     * 
     * @type {string}
     * @memberof ComputedFields
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof ComputedFields
     */
    orderId?: string;
}

/**
* @export
* @enum {string}
*/
export enum ComputedFieldsOperationalStatusEnum {
    Allocated = 'ALLOCATED',
    Mnr = 'MNR',
    Intesting = 'INTESTING',
    Production = 'PRODUCTION',
    Sold = 'SOLD',
    Eol = 'EOL',
    Blocked = 'BLOCKED',
    Available = 'AVAILABLE'
}

export function ComputedFieldsFromJSON(json: any): ComputedFields {
    return ComputedFieldsFromJSONTyped(json, false);
}

export function ComputedFieldsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComputedFields {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currentLocation': !exists(json, 'currentLocation') ? undefined : json['currentLocation'],
        'destinationLocation': !exists(json, 'destinationLocation') ? undefined : json['destinationLocation'],
        'allocationStatus': !exists(json, 'allocationStatus') ? undefined : CurrentLeaseFromJSON(json['allocationStatus']),
        'operationalStatus': !exists(json, 'operationalStatus') ? undefined : json['operationalStatus'],
        'idleDays': !exists(json, 'idleDays') ? undefined : json['idleDays'],
        'daysOverdue': !exists(json, 'daysOverdue') ? undefined : json['daysOverdue'],
        'customer': !exists(json, 'customer') ? undefined : json['customer'],
        'availableFrom': !exists(json, 'availableFrom') ? undefined : (new Date(json['availableFrom'])),
        'availableTo': !exists(json, 'availableTo') ? undefined : (new Date(json['availableTo'])),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'orderId': !exists(json, 'orderId') ? undefined : json['orderId'],
    };
}

export function ComputedFieldsToJSON(value?: ComputedFields | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'currentLocation': value.currentLocation,
        'destinationLocation': value.destinationLocation,
        'allocationStatus': CurrentLeaseToJSON(value.allocationStatus),
        'operationalStatus': value.operationalStatus,
        'idleDays': value.idleDays,
        'daysOverdue': value.daysOverdue,
        'customer': value.customer,
        'availableFrom': value.availableFrom === undefined ? undefined : (value.availableFrom.toISOString()),
        'availableTo': value.availableTo === undefined ? undefined : (value.availableTo.toISOString()),
        'status': value.status,
        'orderId': value.orderId,
    };
}


