/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CurrentStatus
 */
export interface CurrentStatus {
    /**
     * 
     * @type {string}
     * @memberof CurrentStatus
     */
    status: CurrentStatusStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CurrentStatus
     */
    statusId: string;
    /**
     * 
     * @type {Date}
     * @memberof CurrentStatus
     */
    validFromPlanned?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CurrentStatus
     */
    validFromActual?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CurrentStatus
     */
    validToPlanned?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CurrentStatus
     */
    validToActual?: Date;
    /**
     * location ID
     * @type {string}
     * @memberof CurrentStatus
     */
    locationStartPlanned?: string;
    /**
     * location ID
     * @type {string}
     * @memberof CurrentStatus
     */
    locationStartActual?: string;
    /**
     * location ID
     * @type {string}
     * @memberof CurrentStatus
     */
    locationStopPlanned?: string;
    /**
     * location ID
     * @type {string}
     * @memberof CurrentStatus
     */
    locationStopActual?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentStatus
     */
    equipmentLeaseContractId?: string;
    /**
     * example: DAMAGED
     * @type {string}
     * @memberof CurrentStatus
     */
    reason?: string;
    /**
     * comment
     * @type {string}
     * @memberof CurrentStatus
     */
    comment?: string;
}

/**
* @export
* @enum {string}
*/
export enum CurrentStatusStatusEnum {
    Allocated = 'ALLOCATED',
    Mnr = 'MNR',
    Intesting = 'INTESTING',
    Production = 'PRODUCTION',
    Sold = 'SOLD',
    Eol = 'EOL',
    Blocked = 'BLOCKED',
    Available = 'AVAILABLE'
}

export function CurrentStatusFromJSON(json: any): CurrentStatus {
    return CurrentStatusFromJSONTyped(json, false);
}

export function CurrentStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrentStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': json['status'],
        'statusId': json['statusId'],
        'validFromPlanned': !exists(json, 'validFromPlanned') ? undefined : (new Date(json['validFromPlanned'])),
        'validFromActual': !exists(json, 'validFromActual') ? undefined : (new Date(json['validFromActual'])),
        'validToPlanned': !exists(json, 'validToPlanned') ? undefined : (new Date(json['validToPlanned'])),
        'validToActual': !exists(json, 'validToActual') ? undefined : (new Date(json['validToActual'])),
        'locationStartPlanned': !exists(json, 'locationStartPlanned') ? undefined : json['locationStartPlanned'],
        'locationStartActual': !exists(json, 'locationStartActual') ? undefined : json['locationStartActual'],
        'locationStopPlanned': !exists(json, 'locationStopPlanned') ? undefined : json['locationStopPlanned'],
        'locationStopActual': !exists(json, 'locationStopActual') ? undefined : json['locationStopActual'],
        'equipmentLeaseContractId': !exists(json, 'equipmentLeaseContractId') ? undefined : json['equipmentLeaseContractId'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
    };
}

export function CurrentStatusToJSON(value?: CurrentStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': value.status,
        'statusId': value.statusId,
        'validFromPlanned': value.validFromPlanned === undefined ? undefined : (value.validFromPlanned.toISOString()),
        'validFromActual': value.validFromActual === undefined ? undefined : (value.validFromActual.toISOString()),
        'validToPlanned': value.validToPlanned === undefined ? undefined : (value.validToPlanned.toISOString()),
        'validToActual': value.validToActual === undefined ? undefined : (value.validToActual.toISOString()),
        'locationStartPlanned': value.locationStartPlanned,
        'locationStartActual': value.locationStartActual,
        'locationStopPlanned': value.locationStopPlanned,
        'locationStopActual': value.locationStopActual,
        'equipmentLeaseContractId': value.equipmentLeaseContractId,
        'reason': value.reason,
        'comment': value.comment,
    };
}


