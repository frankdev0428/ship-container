/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GeojsonPoint,
    GeojsonPointFromJSON,
    GeojsonPointFromJSONTyped,
    GeojsonPointToJSON,
} from './';

/**
 * 
 * @export
 * @interface PublicContainerAnalyticsWithEvents
 */
export interface PublicContainerAnalyticsWithEvents {
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    temperature_int_avg: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    temperature_int_min: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    temperature_int_max: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    temperature_int_last: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    temperature_ext_avg: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    temperature_ext_min: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    temperature_ext_max: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    temperature_ext_last: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    humidityInt_avg: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    humidityInt_min: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    humidityInt_max: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    humidityInt_last: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    humidityExt_avg: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    humidityExt_min: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    humidityExt_max: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    humidityExt_last: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    pressureInt_avg: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    pressureInt_min: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    pressureInt_max: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    pressureInt_last: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    pressureExt_avg: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    pressureExt_min: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    pressureExt_max: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    pressureExt_last: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    lightInt_avg: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    lightInt_min: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    lightInt_max: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    lightInt_last: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    lightExt_avg: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    lightExt_min: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    lightExt_max: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    lightExt_last: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    doorStatusRight_avg: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    doorStatusRight_last: number;
    /**
     * 
     * @type {GeojsonPoint}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    position_last: GeojsonPoint;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    doorEvents?: number;
    /**
     * 
     * @type {number}
     * @memberof PublicContainerAnalyticsWithEvents
     */
    shockEvents?: number;
}

export function PublicContainerAnalyticsWithEventsFromJSON(json: any): PublicContainerAnalyticsWithEvents {
    return PublicContainerAnalyticsWithEventsFromJSONTyped(json, false);
}

export function PublicContainerAnalyticsWithEventsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicContainerAnalyticsWithEvents {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'temperature_int_avg': json['temperature_int_avg'],
        'temperature_int_min': json['temperature_int_min'],
        'temperature_int_max': json['temperature_int_max'],
        'temperature_int_last': json['temperature_int_last'],
        'temperature_ext_avg': json['temperature_ext_avg'],
        'temperature_ext_min': json['temperature_ext_min'],
        'temperature_ext_max': json['temperature_ext_max'],
        'temperature_ext_last': json['temperature_ext_last'],
        'humidityInt_avg': json['humidityInt_avg'],
        'humidityInt_min': json['humidityInt_min'],
        'humidityInt_max': json['humidityInt_max'],
        'humidityInt_last': json['humidityInt_last'],
        'humidityExt_avg': json['humidityExt_avg'],
        'humidityExt_min': json['humidityExt_min'],
        'humidityExt_max': json['humidityExt_max'],
        'humidityExt_last': json['humidityExt_last'],
        'pressureInt_avg': json['pressureInt_avg'],
        'pressureInt_min': json['pressureInt_min'],
        'pressureInt_max': json['pressureInt_max'],
        'pressureInt_last': json['pressureInt_last'],
        'pressureExt_avg': json['pressureExt_avg'],
        'pressureExt_min': json['pressureExt_min'],
        'pressureExt_max': json['pressureExt_max'],
        'pressureExt_last': json['pressureExt_last'],
        'lightInt_avg': json['lightInt_avg'],
        'lightInt_min': json['lightInt_min'],
        'lightInt_max': json['lightInt_max'],
        'lightInt_last': json['lightInt_last'],
        'lightExt_avg': json['lightExt_avg'],
        'lightExt_min': json['lightExt_min'],
        'lightExt_max': json['lightExt_max'],
        'lightExt_last': json['lightExt_last'],
        'doorStatusRight_avg': json['doorStatusRight_avg'],
        'doorStatusRight_last': json['doorStatusRight_last'],
        'position_last': GeojsonPointFromJSON(json['position_last']),
        'doorEvents': !exists(json, 'doorEvents') ? undefined : json['doorEvents'],
        'shockEvents': !exists(json, 'shockEvents') ? undefined : json['shockEvents'],
    };
}

export function PublicContainerAnalyticsWithEventsToJSON(value?: PublicContainerAnalyticsWithEvents | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'temperature_int_avg': value.temperature_int_avg,
        'temperature_int_min': value.temperature_int_min,
        'temperature_int_max': value.temperature_int_max,
        'temperature_int_last': value.temperature_int_last,
        'temperature_ext_avg': value.temperature_ext_avg,
        'temperature_ext_min': value.temperature_ext_min,
        'temperature_ext_max': value.temperature_ext_max,
        'temperature_ext_last': value.temperature_ext_last,
        'humidityInt_avg': value.humidityInt_avg,
        'humidityInt_min': value.humidityInt_min,
        'humidityInt_max': value.humidityInt_max,
        'humidityInt_last': value.humidityInt_last,
        'humidityExt_avg': value.humidityExt_avg,
        'humidityExt_min': value.humidityExt_min,
        'humidityExt_max': value.humidityExt_max,
        'humidityExt_last': value.humidityExt_last,
        'pressureInt_avg': value.pressureInt_avg,
        'pressureInt_min': value.pressureInt_min,
        'pressureInt_max': value.pressureInt_max,
        'pressureInt_last': value.pressureInt_last,
        'pressureExt_avg': value.pressureExt_avg,
        'pressureExt_min': value.pressureExt_min,
        'pressureExt_max': value.pressureExt_max,
        'pressureExt_last': value.pressureExt_last,
        'lightInt_avg': value.lightInt_avg,
        'lightInt_min': value.lightInt_min,
        'lightInt_max': value.lightInt_max,
        'lightInt_last': value.lightInt_last,
        'lightExt_avg': value.lightExt_avg,
        'lightExt_min': value.lightExt_min,
        'lightExt_max': value.lightExt_max,
        'lightExt_last': value.lightExt_last,
        'doorStatusRight_avg': value.doorStatusRight_avg,
        'doorStatusRight_last': value.doorStatusRight_last,
        'position_last': GeojsonPointToJSON(value.position_last),
        'doorEvents': value.doorEvents,
        'shockEvents': value.shockEvents,
    };
}


