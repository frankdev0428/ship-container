/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LeaseVisibilityContract,
    LeaseVisibilityContractFromJSON,
    LeaseVisibilityContractFromJSONTyped,
    LeaseVisibilityContractToJSON,
} from './';

/**
 * 
 * @export
 * @interface EquipmentLeaseContract
 */
export interface EquipmentLeaseContract {
    /**
     * 
     * @type {string}
     * @memberof EquipmentLeaseContract
     */
    equipmentLeaseContractId: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentLeaseContract
     */
    equipmentId: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentLeaseContract
     */
    orderId: string;
    /**
     * createdAt
     * @type {Date}
     * @memberof EquipmentLeaseContract
     */
    createdAt: Date;
    /**
     * active or canceled allocation
     * @type {boolean}
     * @memberof EquipmentLeaseContract
     */
    active: boolean;
    /**
     * 
     * @type {string}
     * @memberof EquipmentLeaseContract
     */
    comment?: string;
    /**
     * the last user who changed the object
     * @type {string}
     * @memberof EquipmentLeaseContract
     */
    lastChangedByUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentLeaseContract
     */
    lastOperation?: EquipmentLeaseContractLastOperationEnum;
    /**
     * 
     * @type {Array<LeaseVisibilityContract>}
     * @memberof EquipmentLeaseContract
     */
    leasevisibilitycontracts: Array<LeaseVisibilityContract>;
}

/**
* @export
* @enum {string}
*/
export enum EquipmentLeaseContractLastOperationEnum {
    D = 'D',
    C = 'C',
    U = 'U'
}

export function EquipmentLeaseContractFromJSON(json: any): EquipmentLeaseContract {
    return EquipmentLeaseContractFromJSONTyped(json, false);
}

export function EquipmentLeaseContractFromJSONTyped(json: any, ignoreDiscriminator: boolean): EquipmentLeaseContract {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'equipmentLeaseContractId': json['equipmentLeaseContractId'],
        'equipmentId': json['equipmentId'],
        'orderId': json['orderId'],
        'createdAt': (new Date(json['createdAt'])),
        'active': json['active'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'lastChangedByUserId': !exists(json, 'lastChangedByUserId') ? undefined : json['lastChangedByUserId'],
        'lastOperation': !exists(json, 'lastOperation') ? undefined : json['lastOperation'],
        'leasevisibilitycontracts': ((json['leasevisibilitycontracts'] as Array<any>).map(LeaseVisibilityContractFromJSON)),
    };
}

export function EquipmentLeaseContractToJSON(value?: EquipmentLeaseContract | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'equipmentLeaseContractId': value.equipmentLeaseContractId,
        'equipmentId': value.equipmentId,
        'orderId': value.orderId,
        'createdAt': (value.createdAt.toISOString()),
        'active': value.active,
        'comment': value.comment,
        'lastChangedByUserId': value.lastChangedByUserId,
        'lastOperation': value.lastOperation,
        'leasevisibilitycontracts': ((value.leasevisibilitycontracts as Array<any>).map(LeaseVisibilityContractToJSON)),
    };
}


