/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ComputedFields,
    ComputedFieldsFromJSON,
    ComputedFieldsFromJSONTyped,
    ComputedFieldsToJSON,
    ContainerWithProfile,
    ContainerWithProfileFromJSON,
    ContainerWithProfileFromJSONTyped,
    ContainerWithProfileToJSON,
    CurrentLease,
    CurrentLeaseFromJSON,
    CurrentLeaseFromJSONTyped,
    CurrentLeaseToJSON,
    CurrentLocation,
    CurrentLocationFromJSON,
    CurrentLocationFromJSONTyped,
    CurrentLocationToJSON,
    CurrentStatus,
    CurrentStatusFromJSON,
    CurrentStatusFromJSONTyped,
    CurrentStatusToJSON,
    Warnings,
    WarningsFromJSON,
    WarningsFromJSONTyped,
    WarningsToJSON,
} from './';

/**
 * 
 * @export
 * @interface PublicEquipment
 */
export interface PublicEquipment {
    /**
     * 8ddad340-6b06-4b31-9657-7c60cafed47a
     * @type {string}
     * @memberof PublicEquipment
     */
    equipmentId: string;
    /**
     * CAVU0000007
     * @type {string}
     * @memberof PublicEquipment
     */
    aelerContainerId?: string;
    /**
     * 
     * @type {CurrentStatus}
     * @memberof PublicEquipment
     */
    currentStatus?: CurrentStatus;
    /**
     * 
     * @type {Array<CurrentStatus>}
     * @memberof PublicEquipment
     */
    futureStatuses?: Array<CurrentStatus>;
    /**
     * 
     * @type {Array<CurrentStatus>}
     * @memberof PublicEquipment
     */
    blockingStatuses?: Array<CurrentStatus>;
    /**
     * 
     * @type {CurrentLocation}
     * @memberof PublicEquipment
     */
    currentLocation?: CurrentLocation;
    /**
     * 
     * @type {Array<CurrentLocation>}
     * @memberof PublicEquipment
     */
    futureLocations?: Array<CurrentLocation>;
    /**
     * 
     * @type {CurrentLease}
     * @memberof PublicEquipment
     */
    currentLease?: CurrentLease;
    /**
     * 
     * @type {Array<CurrentLease>}
     * @memberof PublicEquipment
     */
    futureLeases?: Array<CurrentLease>;
    /**
     * 
     * @type {ContainerWithProfile}
     * @memberof PublicEquipment
     */
    container?: ContainerWithProfile;
    /**
     * 
     * @type {string}
     * @memberof PublicEquipment
     */
    computedStatus?: PublicEquipmentComputedStatusEnum;
    /**
     * 
     * @type {ComputedFields}
     * @memberof PublicEquipment
     */
    computedFields?: ComputedFields;
    /**
     * 
     * @type {Warnings}
     * @memberof PublicEquipment
     */
    warnings?: Warnings;
}

/**
* @export
* @enum {string}
*/
export enum PublicEquipmentComputedStatusEnum {
    Allocated = 'ALLOCATED',
    Mnr = 'MNR',
    Intesting = 'INTESTING',
    Production = 'PRODUCTION',
    Sold = 'SOLD',
    Eol = 'EOL',
    Blocked = 'BLOCKED',
    Available = 'AVAILABLE',
    Availablebutallocated = 'AVAILABLEBUTALLOCATED',
    Availablebutblocked = 'AVAILABLEBUTBLOCKED'
}

export function PublicEquipmentFromJSON(json: any): PublicEquipment {
    return PublicEquipmentFromJSONTyped(json, false);
}

export function PublicEquipmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicEquipment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'equipmentId': json['equipmentId'],
        'aelerContainerId': !exists(json, 'aelerContainerId') ? undefined : json['aelerContainerId'],
        'currentStatus': !exists(json, 'currentStatus') ? undefined : CurrentStatusFromJSON(json['currentStatus']),
        'futureStatuses': !exists(json, 'futureStatuses') ? undefined : ((json['futureStatuses'] as Array<any>).map(CurrentStatusFromJSON)),
        'blockingStatuses': !exists(json, 'blockingStatuses') ? undefined : ((json['blockingStatuses'] as Array<any>).map(CurrentStatusFromJSON)),
        'currentLocation': !exists(json, 'currentLocation') ? undefined : CurrentLocationFromJSON(json['currentLocation']),
        'futureLocations': !exists(json, 'futureLocations') ? undefined : ((json['futureLocations'] as Array<any>).map(CurrentLocationFromJSON)),
        'currentLease': !exists(json, 'currentLease') ? undefined : CurrentLeaseFromJSON(json['currentLease']),
        'futureLeases': !exists(json, 'futureLeases') ? undefined : ((json['futureLeases'] as Array<any>).map(CurrentLeaseFromJSON)),
        'container': !exists(json, 'container') ? undefined : ContainerWithProfileFromJSON(json['container']),
        'computedStatus': !exists(json, 'computedStatus') ? undefined : json['computedStatus'],
        'computedFields': !exists(json, 'computedFields') ? undefined : ComputedFieldsFromJSON(json['computedFields']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsFromJSON(json['warnings']),
    };
}

export function PublicEquipmentToJSON(value?: PublicEquipment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'equipmentId': value.equipmentId,
        'aelerContainerId': value.aelerContainerId,
        'currentStatus': CurrentStatusToJSON(value.currentStatus),
        'futureStatuses': value.futureStatuses === undefined ? undefined : ((value.futureStatuses as Array<any>).map(CurrentStatusToJSON)),
        'blockingStatuses': value.blockingStatuses === undefined ? undefined : ((value.blockingStatuses as Array<any>).map(CurrentStatusToJSON)),
        'currentLocation': CurrentLocationToJSON(value.currentLocation),
        'futureLocations': value.futureLocations === undefined ? undefined : ((value.futureLocations as Array<any>).map(CurrentLocationToJSON)),
        'currentLease': CurrentLeaseToJSON(value.currentLease),
        'futureLeases': value.futureLeases === undefined ? undefined : ((value.futureLeases as Array<any>).map(CurrentLeaseToJSON)),
        'container': ContainerWithProfileToJSON(value.container),
        'computedStatus': value.computedStatus,
        'computedFields': ComputedFieldsToJSON(value.computedFields),
        'warnings': WarningsToJSON(value.warnings),
    };
}


