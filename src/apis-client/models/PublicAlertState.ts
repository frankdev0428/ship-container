/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AlertInfo,
    AlertInfoFromJSON,
    AlertInfoFromJSONTyped,
    AlertInfoToJSON,
} from './';

/**
 * 
 * @export
 * @interface PublicAlertState
 */
export interface PublicAlertState {
    /**
     * 
     * @type {string}
     * @memberof PublicAlertState
     */
    alertStateId: string;
    /**
     * criterion linked
     * @type {string}
     * @memberof PublicAlertState
     */
    criterionId: string;
    /**
     * 
     * @type {Date}
     * @memberof PublicAlertState
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof PublicAlertState
     */
    updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof PublicAlertState
     */
    resolvedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof PublicAlertState
     */
    entityId?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAlertState
     */
    entityType?: PublicAlertStateEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PublicAlertState
     */
    message?: string;
    /**
     * 1 to 3, 3 most severe
     * @type {number}
     * @memberof PublicAlertState
     */
    severity?: number;
    /**
     * 
     * @type {Date}
     * @memberof PublicAlertState
     */
    readAt?: Date;
    /**
     * 
     * @type {AlertInfo}
     * @memberof PublicAlertState
     */
    alertInfo?: AlertInfo;
}

/**
* @export
* @enum {string}
*/
export enum PublicAlertStateEntityTypeEnum {
    Order = 'order',
    Allocation = 'allocation',
    Container = 'container',
    Facility = 'facility'
}

export function PublicAlertStateFromJSON(json: any): PublicAlertState {
    return PublicAlertStateFromJSONTyped(json, false);
}

export function PublicAlertStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicAlertState {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alertStateId': json['alertStateId'],
        'criterionId': json['criterionId'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'resolvedAt': !exists(json, 'resolvedAt') ? undefined : (new Date(json['resolvedAt'])),
        'entityId': !exists(json, 'entityId') ? undefined : json['entityId'],
        'entityType': !exists(json, 'entityType') ? undefined : json['entityType'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'severity': !exists(json, 'severity') ? undefined : json['severity'],
        'readAt': !exists(json, 'readAt') ? undefined : (new Date(json['readAt'])),
        'alertInfo': !exists(json, 'alertInfo') ? undefined : AlertInfoFromJSON(json['alertInfo']),
    };
}

export function PublicAlertStateToJSON(value?: PublicAlertState | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alertStateId': value.alertStateId,
        'criterionId': value.criterionId,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'resolvedAt': value.resolvedAt === undefined ? undefined : (value.resolvedAt.toISOString()),
        'entityId': value.entityId,
        'entityType': value.entityType,
        'message': value.message,
        'severity': value.severity,
        'readAt': value.readAt === undefined ? undefined : (value.readAt.toISOString()),
        'alertInfo': AlertInfoToJSON(value.alertInfo),
    };
}


