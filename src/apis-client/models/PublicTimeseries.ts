/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GeojsonPoint,
    GeojsonPointFromJSON,
    GeojsonPointFromJSONTyped,
    GeojsonPointToJSON,
} from './';

/**
 * 
 * @export
 * @interface PublicTimeseries
 */
export interface PublicTimeseries {
    /**
     * time
     * @type {Date}
     * @memberof PublicTimeseries
     */
    timestamp: Date;
    /**
     * 
     * @type {Date}
     * @memberof PublicTimeseries
     */
    timestampInsert: Date;
    /**
     * 
     * @type {number}
     * @memberof PublicTimeseries
     */
    temperatureInt?: number;
    /**
     * 
     * @type {number}
     * @memberof PublicTimeseries
     */
    temperatureExt?: number;
    /**
     * 
     * @type {GeojsonPoint}
     * @memberof PublicTimeseries
     */
    position?: GeojsonPoint;
    /**
     * humidity inside the container
     * @type {number}
     * @memberof PublicTimeseries
     */
    humidityInt?: number;
    /**
     * humidity outside the container
     * @type {number}
     * @memberof PublicTimeseries
     */
    humidityExt?: number;
    /**
     * pressure inside the container
     * @type {number}
     * @memberof PublicTimeseries
     */
    pressureInt?: number;
    /**
     * pressure outside the container
     * @type {number}
     * @memberof PublicTimeseries
     */
    pressureExt?: number;
    /**
     * internal light sensor
     * @type {number}
     * @memberof PublicTimeseries
     */
    lightInt?: number;
    /**
     * external light sensor
     * @type {number}
     * @memberof PublicTimeseries
     */
    lightExt?: number;
    /**
     * R = right looking from outside the container - 0 is closed 1 is open
     * @type {number}
     * @memberof PublicTimeseries
     */
    doorStatusRight?: number;
    /**
     * L = left looking from outside the container - 0 is closed 1 is open
     * @type {number}
     * @memberof PublicTimeseries
     */
    doorStatusLeft?: number;
    /**
     * Indoor air quality
     * @type {number}
     * @memberof PublicTimeseries
     */
    iaq?: number;
    /**
     * Total Volatile Organic Compounds
     * @type {number}
     * @memberof PublicTimeseries
     */
    ngm3TVOC?: number;
    /**
     * parts per million carbon dioxide
     * @type {number}
     * @memberof PublicTimeseries
     */
    ppmeCO2?: number;
    /**
     * parts per million ethanol
     * @type {number}
     * @memberof PublicTimeseries
     */
    ppbEtOH?: number;
    /**
     * outdoor air quality
     * @type {number}
     * @memberof PublicTimeseries
     */
    oaqNO2?: number;
    /**
     * outdoor air qualiry ozone
     * @type {number}
     * @memberof PublicTimeseries
     */
    oaqO3?: number;
    /**
     * probability of nitrogen dioxide
     * @type {number}
     * @memberof PublicTimeseries
     */
    probNO2?: number;
    /**
     * parts per billion nitrogen dioxide
     * @type {number}
     * @memberof PublicTimeseries
     */
    ppbNO2?: number;
    /**
     * parts per billion ozone
     * @type {number}
     * @memberof PublicTimeseries
     */
    ppb03?: number;
    /**
     * Height above mean sea level in mm
     * @type {number}
     * @memberof PublicTimeseries
     */
    hmsl?: number;
    /**
     * Horizontal accuracy estimate in mm
     * @type {number}
     * @memberof PublicTimeseries
     */
    hacc?: number;
    /**
     * Ground Speed (2-D) in mm/s
     * @type {number}
     * @memberof PublicTimeseries
     */
    groundSpeed?: number;
    /**
     * Heading in degrees
     * @type {number}
     * @memberof PublicTimeseries
     */
    heading?: number;
}

export function PublicTimeseriesFromJSON(json: any): PublicTimeseries {
    return PublicTimeseriesFromJSONTyped(json, false);
}

export function PublicTimeseriesFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicTimeseries {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'timestamp': (new Date(json['timestamp'])),
        'timestampInsert': (new Date(json['timestampInsert'])),
        'temperatureInt': !exists(json, 'temperatureInt') ? undefined : json['temperatureInt'],
        'temperatureExt': !exists(json, 'temperatureExt') ? undefined : json['temperatureExt'],
        'position': !exists(json, 'position') ? undefined : GeojsonPointFromJSON(json['position']),
        'humidityInt': !exists(json, 'humidityInt') ? undefined : json['humidityInt'],
        'humidityExt': !exists(json, 'humidityExt') ? undefined : json['humidityExt'],
        'pressureInt': !exists(json, 'pressureInt') ? undefined : json['pressureInt'],
        'pressureExt': !exists(json, 'pressureExt') ? undefined : json['pressureExt'],
        'lightInt': !exists(json, 'lightInt') ? undefined : json['lightInt'],
        'lightExt': !exists(json, 'lightExt') ? undefined : json['lightExt'],
        'doorStatusRight': !exists(json, 'doorStatusRight') ? undefined : json['doorStatusRight'],
        'doorStatusLeft': !exists(json, 'doorStatusLeft') ? undefined : json['doorStatusLeft'],
        'iaq': !exists(json, 'iaq') ? undefined : json['iaq'],
        'ngm3TVOC': !exists(json, 'ngm3TVOC') ? undefined : json['ngm3TVOC'],
        'ppmeCO2': !exists(json, 'ppmeCO2') ? undefined : json['ppmeCO2'],
        'ppbEtOH': !exists(json, 'ppbEtOH') ? undefined : json['ppbEtOH'],
        'oaqNO2': !exists(json, 'oaqNO2') ? undefined : json['oaqNO2'],
        'oaqO3': !exists(json, 'oaqO3') ? undefined : json['oaqO3'],
        'probNO2': !exists(json, 'probNO2') ? undefined : json['probNO2'],
        'ppbNO2': !exists(json, 'ppbNO2') ? undefined : json['ppbNO2'],
        'ppb03': !exists(json, 'ppb03') ? undefined : json['ppb03'],
        'hmsl': !exists(json, 'hmsl') ? undefined : json['hmsl'],
        'hacc': !exists(json, 'hacc') ? undefined : json['hacc'],
        'groundSpeed': !exists(json, 'groundSpeed') ? undefined : json['groundSpeed'],
        'heading': !exists(json, 'heading') ? undefined : json['heading'],
    };
}

export function PublicTimeseriesToJSON(value?: PublicTimeseries | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'timestamp': (value.timestamp.toISOString()),
        'timestampInsert': (value.timestampInsert.toISOString()),
        'temperatureInt': value.temperatureInt,
        'temperatureExt': value.temperatureExt,
        'position': GeojsonPointToJSON(value.position),
        'humidityInt': value.humidityInt,
        'humidityExt': value.humidityExt,
        'pressureInt': value.pressureInt,
        'pressureExt': value.pressureExt,
        'lightInt': value.lightInt,
        'lightExt': value.lightExt,
        'doorStatusRight': value.doorStatusRight,
        'doorStatusLeft': value.doorStatusLeft,
        'iaq': value.iaq,
        'ngm3TVOC': value.ngm3TVOC,
        'ppmeCO2': value.ppmeCO2,
        'ppbEtOH': value.ppbEtOH,
        'oaqNO2': value.oaqNO2,
        'oaqO3': value.oaqO3,
        'probNO2': value.probNO2,
        'ppbNO2': value.ppbNO2,
        'ppb03': value.ppb03,
        'hmsl': value.hmsl,
        'hacc': value.hacc,
        'groundSpeed': value.groundSpeed,
        'heading': value.heading,
    };
}


