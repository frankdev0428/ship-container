/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ComputedStatuses,
    ComputedStatusesFromJSON,
    ComputedStatusesFromJSONTyped,
    ComputedStatusesToJSON,
    EquipmentLeaseContract,
    EquipmentLeaseContractFromJSON,
    EquipmentLeaseContractFromJSONTyped,
    EquipmentLeaseContractToJSON,
    EquipmentLeaseStatus,
    EquipmentLeaseStatusFromJSON,
    EquipmentLeaseStatusFromJSONTyped,
    EquipmentLeaseStatusToJSON,
} from './';

/**
 * 
 * @export
 * @interface EquipmentLeasesPublic
 */
export interface EquipmentLeasesPublic {
    /**
     * 
     * @type {string}
     * @memberof EquipmentLeasesPublic
     */
    orderId: string;
    /**
     * When the order was submitted
     * @type {Date}
     * @memberof EquipmentLeasesPublic
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof EquipmentLeasesPublic
     */
    customerId: string;
    /**
     * Time/Date Order was placed in reality
     * @type {Date}
     * @memberof EquipmentLeasesPublic
     */
    timePlaced: Date;
    /**
     * 
     * @type {string}
     * @memberof EquipmentLeasesPublic
     */
    pickupLocation: string;
    /**
     * planned dropoff location
     * @type {string}
     * @memberof EquipmentLeasesPublic
     */
    dropoffLocation: string;
    /**
     * by default true in one way lease and AEL leases, false in LTL
     * @type {boolean}
     * @memberof EquipmentLeasesPublic
     */
    isDropoffLocationConfirmed: boolean;
    /**
     * Time/Date pre-agreed return date
     * @type {Date}
     * @memberof EquipmentLeasesPublic
     */
    returnDate: Date;
    /**
     * Time/Date the order begins
     * @type {Date}
     * @memberof EquipmentLeasesPublic
     */
    executionDate: Date;
    /**
     * Number of units requested
     * @type {number}
     * @memberof EquipmentLeasesPublic
     */
    units: number;
    /**
     * Customers own booking number
     * @type {string}
     * @memberof EquipmentLeasesPublic
     */
    customersBookingNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentLeasesPublic
     */
    dropoffLocationActual?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentLeasesPublic
     */
    parentOrderId?: string;
    /**
     * user id
     * @type {string}
     * @memberof EquipmentLeasesPublic
     */
    lastChangedBy?: string;
    /**
     * the last user who changed the object
     * @type {string}
     * @memberof EquipmentLeasesPublic
     */
    lastChangedByUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentLeasesPublic
     */
    lastOperation?: EquipmentLeasesPublicLastOperationEnum;
    /**
     * equipmentleasestatuses
     * @type {Array<EquipmentLeaseStatus>}
     * @memberof EquipmentLeasesPublic
     */
    equipmentleasestatuses: Array<EquipmentLeaseStatus>;
    /**
     * equipmentleasecontracts
     * @type {Array<EquipmentLeaseContract>}
     * @memberof EquipmentLeasesPublic
     */
    equipmentleasecontracts: Array<EquipmentLeaseContract>;
    /**
     * 
     * @type {ComputedStatuses}
     * @memberof EquipmentLeasesPublic
     */
    computedStatuses?: ComputedStatuses;
}

/**
* @export
* @enum {string}
*/
export enum EquipmentLeasesPublicLastOperationEnum {
    D = 'D',
    C = 'C',
    U = 'U'
}

export function EquipmentLeasesPublicFromJSON(json: any): EquipmentLeasesPublic {
    return EquipmentLeasesPublicFromJSONTyped(json, false);
}

export function EquipmentLeasesPublicFromJSONTyped(json: any, ignoreDiscriminator: boolean): EquipmentLeasesPublic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'orderId': json['orderId'],
        'createdAt': (new Date(json['createdAt'])),
        'customerId': json['customerId'],
        'timePlaced': (new Date(json['timePlaced'])),
        'pickupLocation': json['pickupLocation'],
        'dropoffLocation': json['dropoffLocation'],
        'isDropoffLocationConfirmed': json['isDropoffLocationConfirmed'],
        'returnDate': (new Date(json['returnDate'])),
        'executionDate': (new Date(json['executionDate'])),
        'units': json['units'],
        'customersBookingNumber': !exists(json, 'customersBookingNumber') ? undefined : json['customersBookingNumber'],
        'dropoffLocationActual': !exists(json, 'dropoffLocationActual') ? undefined : json['dropoffLocationActual'],
        'parentOrderId': !exists(json, 'parentOrderId') ? undefined : json['parentOrderId'],
        'lastChangedBy': !exists(json, 'lastChangedBy') ? undefined : json['lastChangedBy'],
        'lastChangedByUserId': !exists(json, 'lastChangedByUserId') ? undefined : json['lastChangedByUserId'],
        'lastOperation': !exists(json, 'lastOperation') ? undefined : json['lastOperation'],
        'equipmentleasestatuses': ((json['equipmentleasestatuses'] as Array<any>).map(EquipmentLeaseStatusFromJSON)),
        'equipmentleasecontracts': ((json['equipmentleasecontracts'] as Array<any>).map(EquipmentLeaseContractFromJSON)),
        'computedStatuses': !exists(json, 'computedStatuses') ? undefined : ComputedStatusesFromJSON(json['computedStatuses']),
    };
}

export function EquipmentLeasesPublicToJSON(value?: EquipmentLeasesPublic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'orderId': value.orderId,
        'createdAt': (value.createdAt.toISOString()),
        'customerId': value.customerId,
        'timePlaced': (value.timePlaced.toISOString()),
        'pickupLocation': value.pickupLocation,
        'dropoffLocation': value.dropoffLocation,
        'isDropoffLocationConfirmed': value.isDropoffLocationConfirmed,
        'returnDate': (value.returnDate.toISOString()),
        'executionDate': (value.executionDate.toISOString()),
        'units': value.units,
        'customersBookingNumber': value.customersBookingNumber,
        'dropoffLocationActual': value.dropoffLocationActual,
        'parentOrderId': value.parentOrderId,
        'lastChangedBy': value.lastChangedBy,
        'lastChangedByUserId': value.lastChangedByUserId,
        'lastOperation': value.lastOperation,
        'equipmentleasestatuses': ((value.equipmentleasestatuses as Array<any>).map(EquipmentLeaseStatusToJSON)),
        'equipmentleasecontracts': ((value.equipmentleasecontracts as Array<any>).map(EquipmentLeaseContractToJSON)),
        'computedStatuses': ComputedStatusesToJSON(value.computedStatuses),
    };
}


