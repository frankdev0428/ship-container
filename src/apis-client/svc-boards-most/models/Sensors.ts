/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Sensors
 */
export interface Sensors {
    /**
     * 
     * @type {string}
     * @memberof Sensors
     */
    type: SensorsTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Sensors
     */
    temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensors
     */
    humidity?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensors
     */
    luminance?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensors
     */
    g?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensors
     */
    dewpoint?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensors
     */
    battery?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensors
     */
    rssi?: number;
}

/**
* @export
* @enum {string}
*/
export enum SensorsTypeEnum {
    Temperature = 'temperature',
    Humidity = 'humidity',
    Luminance = 'luminance',
    G = 'g',
    Dewpoint = 'dewpoint',
    All = 'all',
    Battery = 'battery',
    Rssi = 'rssi'
}

export function SensorsFromJSON(json: any): Sensors {
    return SensorsFromJSONTyped(json, false);
}

export function SensorsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Sensors {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'temperature': !exists(json, 'temperature') ? undefined : json['temperature'],
        'humidity': !exists(json, 'humidity') ? undefined : json['humidity'],
        'luminance': !exists(json, 'luminance') ? undefined : json['luminance'],
        'g': !exists(json, 'g') ? undefined : json['g'],
        'dewpoint': !exists(json, 'dewpoint') ? undefined : json['dewpoint'],
        'battery': !exists(json, 'battery') ? undefined : json['battery'],
        'rssi': !exists(json, 'rssi') ? undefined : json['rssi'],
    };
}

export function SensorsToJSON(value?: Sensors | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'temperature': value.temperature,
        'humidity': value.humidity,
        'luminance': value.luminance,
        'g': value.g,
        'dewpoint': value.dewpoint,
        'battery': value.battery,
        'rssi': value.rssi,
    };
}


