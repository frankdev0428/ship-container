/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Address
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * Address id
     * @type {string}
     * @memberof Address
     */
    addressId: string;
    /**
     * City Id
     * @type {string}
     * @memberof Address
     */
    cityId: string;
    /**
     * Country Id
     * @type {string}
     * @memberof Address
     */
    countryId: string;
    /**
     * all possible region names
     * @type {string}
     * @memberof Address
     */
    region: AddressRegionEnum;
    /**
     * Location name
     * @type {string}
     * @memberof Address
     */
    name?: string;
    /**
     * Street
     * @type {string}
     * @memberof Address
     */
    street?: string;
    /**
     * Street number
     * @type {string}
     * @memberof Address
     */
    streetNumber?: string;
    /**
     * Floor
     * @type {string}
     * @memberof Address
     */
    floor?: string;
    /**
     * Post code
     * @type {string}
     * @memberof Address
     */
    postCode?: string;
    /**
     * State, region or county
     * @type {string}
     * @memberof Address
     */
    state?: string;
    /**
     * ZIP code
     * @type {string}
     * @memberof Address
     */
    zipCode?: string;
}

/**
* @export
* @enum {string}
*/
export enum AddressRegionEnum {
    Europe = 'Europe',
    Asia = 'Asia',
    SouthAmerica = 'South America',
    NorthAmerica = 'North America',
    Australasia = 'Australasia',
    Antarctica = 'Antarctica'
}

export function AddressFromJSON(json: any): Address {
    return AddressFromJSONTyped(json, false);
}

export function AddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): Address {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'addressId': json['addressId'],
        'cityId': json['cityId'],
        'countryId': json['countryId'],
        'region': json['region'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'street': !exists(json, 'street') ? undefined : json['street'],
        'streetNumber': !exists(json, 'streetNumber') ? undefined : json['streetNumber'],
        'floor': !exists(json, 'floor') ? undefined : json['floor'],
        'postCode': !exists(json, 'postCode') ? undefined : json['postCode'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zipCode': !exists(json, 'zipCode') ? undefined : json['zipCode'],
    };
}

export function AddressToJSON(value?: Address | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'addressId': value.addressId,
        'cityId': value.cityId,
        'countryId': value.countryId,
        'region': value.region,
        'name': value.name,
        'street': value.street,
        'streetNumber': value.streetNumber,
        'floor': value.floor,
        'postCode': value.postCode,
        'state': value.state,
        'zipCode': value.zipCode,
    };
}


