/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CenterPoint,
    CenterPointFromJSON,
    CenterPointFromJSONTyped,
    CenterPointToJSON,
} from './';

/**
 * CountryOptional
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * country id
     * @type {string}
     * @memberof Country
     */
    countryId: string;
    /**
     * name
     * @type {string}
     * @memberof Country
     */
    name: string;
    /**
     * all possible iso 2 letter country codes
     * @type {string}
     * @memberof Country
     */
    code: CountryCodeEnum;
    /**
     * boundaries_north
     * @type {number}
     * @memberof Country
     */
    boundaries_north?: number;
    /**
     * boundaries_east
     * @type {number}
     * @memberof Country
     */
    boundaries_east?: number;
    /**
     * boundaries_south
     * @type {number}
     * @memberof Country
     */
    boundaries_south?: number;
    /**
     * boundaries_west
     * @type {number}
     * @memberof Country
     */
    boundaries_west?: number;
    /**
     * identifiers_iso_alpha2
     * @type {string}
     * @memberof Country
     */
    identifiers_iso_alpha2?: string;
    /**
     * identifiers_iso_alpha3
     * @type {string}
     * @memberof Country
     */
    identifiers_iso_alpha3?: string;
    /**
     * identifiers_iso_numeric
     * @type {number}
     * @memberof Country
     */
    identifiers_iso_numeric?: number;
    /**
     * identifiers_fips_alpha
     * @type {string}
     * @memberof Country
     */
    identifiers_fips_alpha?: string;
    /**
     * identifiers_geonames_id
     * @type {number}
     * @memberof Country
     */
    identifiers_geonames_id?: number;
    /**
     * economy_capital
     * @type {string}
     * @memberof Country
     */
    economy_capital?: string;
    /**
     * economy_languages
     * @type {string}
     * @memberof Country
     */
    economy_languages?: string;
    /**
     * economy_population
     * @type {number}
     * @memberof Country
     */
    economy_population?: number;
    /**
     * economy_area
     * @type {number}
     * @memberof Country
     */
    economy_area?: number;
    /**
     * economy_currencyCode
     * @type {string}
     * @memberof Country
     */
    economy_currencycode?: string;
    /**
     * location_continent_name
     * @type {string}
     * @memberof Country
     */
    location_continent_name?: string;
    /**
     * location_continent_code
     * @type {string}
     * @memberof Country
     */
    location_continent_code?: string;
    /**
     * 
     * @type {CenterPoint}
     * @memberof Country
     */
    centerPoint?: CenterPoint;
}

/**
* @export
* @enum {string}
*/
export enum CountryCodeEnum {
    Ad = 'AD',
    Ae = 'AE',
    Af = 'AF',
    Ag = 'AG',
    Ai = 'AI',
    Al = 'AL',
    Am = 'AM',
    Ao = 'AO',
    Aq = 'AQ',
    Ar = 'AR',
    As = 'AS',
    At = 'AT',
    Au = 'AU',
    Aw = 'AW',
    Ax = 'AX',
    Az = 'AZ',
    Ba = 'BA',
    Bb = 'BB',
    Bd = 'BD',
    Be = 'BE',
    Bf = 'BF',
    Bg = 'BG',
    Bh = 'BH',
    Bi = 'BI',
    Bj = 'BJ',
    Bl = 'BL',
    Bm = 'BM',
    Bn = 'BN',
    Bo = 'BO',
    Bq = 'BQ',
    Br = 'BR',
    Bs = 'BS',
    Bt = 'BT',
    Bv = 'BV',
    Bw = 'BW',
    By = 'BY',
    Bz = 'BZ',
    Ca = 'CA',
    Cc = 'CC',
    Cd = 'CD',
    Cf = 'CF',
    Cg = 'CG',
    Ch = 'CH',
    Ci = 'CI',
    Ck = 'CK',
    Cl = 'CL',
    Cm = 'CM',
    Cn = 'CN',
    Co = 'CO',
    Cr = 'CR',
    Cu = 'CU',
    Cv = 'CV',
    Cw = 'CW',
    Cx = 'CX',
    Cy = 'CY',
    Cz = 'CZ',
    De = 'DE',
    Dj = 'DJ',
    Dk = 'DK',
    Dm = 'DM',
    Do = 'DO',
    Dz = 'DZ',
    Ec = 'EC',
    Ee = 'EE',
    Eg = 'EG',
    Eh = 'EH',
    Er = 'ER',
    Es = 'ES',
    Et = 'ET',
    Fi = 'FI',
    Fj = 'FJ',
    Fk = 'FK',
    Fm = 'FM',
    Fo = 'FO',
    Fr = 'FR',
    Ga = 'GA',
    Gb = 'GB',
    Gd = 'GD',
    Ge = 'GE',
    Gf = 'GF',
    Gg = 'GG',
    Gh = 'GH',
    Gi = 'GI',
    Gl = 'GL',
    Gm = 'GM',
    Gn = 'GN',
    Gp = 'GP',
    Gq = 'GQ',
    Gr = 'GR',
    Gs = 'GS',
    Gt = 'GT',
    Gu = 'GU',
    Gw = 'GW',
    Gy = 'GY',
    Hk = 'HK',
    Hm = 'HM',
    Hn = 'HN',
    Hr = 'HR',
    Ht = 'HT',
    Hu = 'HU',
    Id = 'ID',
    Ie = 'IE',
    Il = 'IL',
    Im = 'IM',
    In = 'IN',
    Io = 'IO',
    Iq = 'IQ',
    Ir = 'IR',
    Is = 'IS',
    It = 'IT',
    Je = 'JE',
    Jm = 'JM',
    Jo = 'JO',
    Jp = 'JP',
    Ke = 'KE',
    Kg = 'KG',
    Kh = 'KH',
    Ki = 'KI',
    Km = 'KM',
    Kn = 'KN',
    Kp = 'KP',
    Kr = 'KR',
    Kw = 'KW',
    Ky = 'KY',
    Kz = 'KZ',
    La = 'LA',
    Lb = 'LB',
    Lc = 'LC',
    Li = 'LI',
    Lk = 'LK',
    Lr = 'LR',
    Ls = 'LS',
    Lt = 'LT',
    Lu = 'LU',
    Lv = 'LV',
    Ly = 'LY',
    Ma = 'MA',
    Mc = 'MC',
    Md = 'MD',
    Me = 'ME',
    Mf = 'MF',
    Mg = 'MG',
    Mh = 'MH',
    Mk = 'MK',
    Ml = 'ML',
    Mm = 'MM',
    Mn = 'MN',
    Mo = 'MO',
    Mp = 'MP',
    Mq = 'MQ',
    Mr = 'MR',
    Ms = 'MS',
    Mt = 'MT',
    Mu = 'MU',
    Mv = 'MV',
    Mw = 'MW',
    Mx = 'MX',
    My = 'MY',
    Mz = 'MZ',
    Na = 'NA',
    Nc = 'NC',
    Ne = 'NE',
    Nf = 'NF',
    Ng = 'NG',
    Ni = 'NI',
    Nl = 'NL',
    No = 'NO',
    Np = 'NP',
    Nr = 'NR',
    Nu = 'NU',
    Nz = 'NZ',
    Om = 'OM',
    Pa = 'PA',
    Pe = 'PE',
    Pf = 'PF',
    Pg = 'PG',
    Ph = 'PH',
    Pk = 'PK',
    Pl = 'PL',
    Pm = 'PM',
    Pn = 'PN',
    Pr = 'PR',
    Ps = 'PS',
    Pt = 'PT',
    Pw = 'PW',
    Py = 'PY',
    Qa = 'QA',
    Re = 'RE',
    Ro = 'RO',
    Rs = 'RS',
    Ru = 'RU',
    Rw = 'RW',
    Sa = 'SA',
    Sb = 'SB',
    Sc = 'SC',
    Sd = 'SD',
    Se = 'SE',
    Sg = 'SG',
    Sh = 'SH',
    Si = 'SI',
    Sj = 'SJ',
    Sk = 'SK',
    Sl = 'SL',
    Sm = 'SM',
    Sn = 'SN',
    So = 'SO',
    Sr = 'SR',
    Ss = 'SS',
    St = 'ST',
    Sv = 'SV',
    Sx = 'SX',
    Sy = 'SY',
    Sz = 'SZ',
    Tc = 'TC',
    Td = 'TD',
    Tf = 'TF',
    Tg = 'TG',
    Th = 'TH',
    Tj = 'TJ',
    Tk = 'TK',
    Tl = 'TL',
    Tm = 'TM',
    Tn = 'TN',
    To = 'TO',
    Tr = 'TR',
    Tt = 'TT',
    Tv = 'TV',
    Tw = 'TW',
    Tz = 'TZ',
    Ua = 'UA',
    Ug = 'UG',
    Um = 'UM',
    Us = 'US',
    Uy = 'UY',
    Uz = 'UZ',
    Va = 'VA',
    Vc = 'VC',
    Ve = 'VE',
    Vg = 'VG',
    Vi = 'VI',
    Vn = 'VN',
    Vu = 'VU',
    Wf = 'WF',
    Ws = 'WS',
    Xk = 'XK',
    Ye = 'YE',
    Yt = 'YT',
    Za = 'ZA',
    Zm = 'ZM',
    Zw = 'ZW'
}

export function CountryFromJSON(json: any): Country {
    return CountryFromJSONTyped(json, false);
}

export function CountryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Country {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'countryId': json['countryId'],
        'name': json['name'],
        'code': json['code'],
        'boundaries_north': !exists(json, 'boundaries_north') ? undefined : json['boundaries_north'],
        'boundaries_east': !exists(json, 'boundaries_east') ? undefined : json['boundaries_east'],
        'boundaries_south': !exists(json, 'boundaries_south') ? undefined : json['boundaries_south'],
        'boundaries_west': !exists(json, 'boundaries_west') ? undefined : json['boundaries_west'],
        'identifiers_iso_alpha2': !exists(json, 'identifiers_iso_alpha2') ? undefined : json['identifiers_iso_alpha2'],
        'identifiers_iso_alpha3': !exists(json, 'identifiers_iso_alpha3') ? undefined : json['identifiers_iso_alpha3'],
        'identifiers_iso_numeric': !exists(json, 'identifiers_iso_numeric') ? undefined : json['identifiers_iso_numeric'],
        'identifiers_fips_alpha': !exists(json, 'identifiers_fips_alpha') ? undefined : json['identifiers_fips_alpha'],
        'identifiers_geonames_id': !exists(json, 'identifiers_geonames_id') ? undefined : json['identifiers_geonames_id'],
        'economy_capital': !exists(json, 'economy_capital') ? undefined : json['economy_capital'],
        'economy_languages': !exists(json, 'economy_languages') ? undefined : json['economy_languages'],
        'economy_population': !exists(json, 'economy_population') ? undefined : json['economy_population'],
        'economy_area': !exists(json, 'economy_area') ? undefined : json['economy_area'],
        'economy_currencycode': !exists(json, 'economy_currencycode') ? undefined : json['economy_currencycode'],
        'location_continent_name': !exists(json, 'location_continent_name') ? undefined : json['location_continent_name'],
        'location_continent_code': !exists(json, 'location_continent_code') ? undefined : json['location_continent_code'],
        'centerPoint': !exists(json, 'centerPoint') ? undefined : CenterPointFromJSON(json['centerPoint']),
    };
}

export function CountryToJSON(value?: Country | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'countryId': value.countryId,
        'name': value.name,
        'code': value.code,
        'boundaries_north': value.boundaries_north,
        'boundaries_east': value.boundaries_east,
        'boundaries_south': value.boundaries_south,
        'boundaries_west': value.boundaries_west,
        'identifiers_iso_alpha2': value.identifiers_iso_alpha2,
        'identifiers_iso_alpha3': value.identifiers_iso_alpha3,
        'identifiers_iso_numeric': value.identifiers_iso_numeric,
        'identifiers_fips_alpha': value.identifiers_fips_alpha,
        'identifiers_geonames_id': value.identifiers_geonames_id,
        'economy_capital': value.economy_capital,
        'economy_languages': value.economy_languages,
        'economy_population': value.economy_population,
        'economy_area': value.economy_area,
        'economy_currencycode': value.economy_currencycode,
        'location_continent_name': value.location_continent_name,
        'location_continent_code': value.location_continent_code,
        'centerPoint': CenterPointToJSON(value.centerPoint),
    };
}


