/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Location,
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './';

/**
 * 
 * @export
 * @interface PublicPort
 */
export interface PublicPort {
    /**
     * 
     * @type {string}
     * @memberof PublicPort
     */
    portId: string;
    /**
     * 
     * @type {string}
     * @memberof PublicPort
     */
    name: string;
    /**
     * 
     * @type {Location}
     * @memberof PublicPort
     */
    location?: Location;
    /**
     * 
     * @type {string}
     * @memberof PublicPort
     */
    locode?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicPort
     */
    cityId?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicPort
     */
    countryId?: string;
}

export function PublicPortFromJSON(json: any): PublicPort {
    return PublicPortFromJSONTyped(json, false);
}

export function PublicPortFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicPort {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'portId': json['portId'],
        'name': json['name'],
        'location': !exists(json, 'location') ? undefined : LocationFromJSON(json['location']),
        'locode': !exists(json, 'locode') ? undefined : json['locode'],
        'cityId': !exists(json, 'cityId') ? undefined : json['cityId'],
        'countryId': !exists(json, 'countryId') ? undefined : json['countryId'],
    };
}

export function PublicPortToJSON(value?: PublicPort | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'portId': value.portId,
        'name': value.name,
        'location': LocationToJSON(value.location),
        'locode': value.locode,
        'cityId': value.cityId,
        'countryId': value.countryId,
    };
}


