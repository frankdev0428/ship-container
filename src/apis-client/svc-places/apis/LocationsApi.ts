/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Failure,
    FailureFromJSON,
    FailureToJSON,
    Location,
    LocationFromJSON,
    LocationToJSON,
    LocationInput,
    LocationInputFromJSON,
    LocationInputToJSON,
} from '../models';

export interface GetLocationsRequest {
    locationType?: string;
}

export interface GetLocationsInradiusRequest {
    lat: number;
    lon: number;
    radius: number;
}

export interface PostLocationsRequest {
    body?: LocationInput;
}

/**
 * 
 */
export class LocationsApi extends runtime.BaseAPI {

    /**
     * filter locations
     */
    async getLocationsRaw(requestParameters: GetLocationsRequest): Promise<runtime.ApiResponse<Array<Location>>> {
        const queryParameters: any = {};

        if (requestParameters.locationType !== undefined) {
            queryParameters['locationType'] = requestParameters.locationType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationFromJSON));
    }

    /**
     * filter locations
     */
    async getLocations(requestParameters: GetLocationsRequest): Promise<Array<Location>> {
        const response = await this.getLocationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * filter locations by radius in meters
     */
    async getLocationsInradiusRaw(requestParameters: GetLocationsInradiusRequest): Promise<runtime.ApiResponse<Array<Location>>> {
        if (requestParameters.lat === null || requestParameters.lat === undefined) {
            throw new runtime.RequiredError('lat','Required parameter requestParameters.lat was null or undefined when calling getLocationsInradius.');
        }

        if (requestParameters.lon === null || requestParameters.lon === undefined) {
            throw new runtime.RequiredError('lon','Required parameter requestParameters.lon was null or undefined when calling getLocationsInradius.');
        }

        if (requestParameters.radius === null || requestParameters.radius === undefined) {
            throw new runtime.RequiredError('radius','Required parameter requestParameters.radius was null or undefined when calling getLocationsInradius.');
        }

        const queryParameters: any = {};

        if (requestParameters.lat !== undefined) {
            queryParameters['lat'] = requestParameters.lat;
        }

        if (requestParameters.lon !== undefined) {
            queryParameters['lon'] = requestParameters.lon;
        }

        if (requestParameters.radius !== undefined) {
            queryParameters['radius'] = requestParameters.radius;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/locations/in-radius`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationFromJSON));
    }

    /**
     * filter locations by radius in meters
     */
    async getLocationsInradius(requestParameters: GetLocationsInradiusRequest): Promise<Array<Location>> {
        const response = await this.getLocationsInradiusRaw(requestParameters);
        return await response.value();
    }

    /**
     * create location
     */
    async postLocationsRaw(requestParameters: PostLocationsRequest): Promise<runtime.ApiResponse<Location>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     * create location
     */
    async postLocations(requestParameters: PostLocationsRequest): Promise<Location> {
        const response = await this.postLocationsRaw(requestParameters);
        return await response.value();
    }

}
