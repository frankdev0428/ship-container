/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Country,
    CountryFromJSON,
    CountryToJSON,
    CountryInput,
    CountryInputFromJSON,
    CountryInputToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
} from '../models';

export interface GetCountriesRequest {
    nameIncludes?: string;
    countryId?: string;
    code?: string;
}

export interface PostCountriesRequest {
    body?: CountryInput;
}

/**
 * 
 */
export class CountriesApi extends runtime.BaseAPI {

    /**
     * filter countries
     */
    async getCountriesRaw(requestParameters: GetCountriesRequest): Promise<runtime.ApiResponse<Array<Country>>> {
        const queryParameters: any = {};

        if (requestParameters.nameIncludes !== undefined) {
            queryParameters['nameIncludes'] = requestParameters.nameIncludes;
        }

        if (requestParameters.countryId !== undefined) {
            queryParameters['countryId'] = requestParameters.countryId;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CountryFromJSON));
    }

    /**
     * filter countries
     */
    async getCountries(requestParameters: GetCountriesRequest): Promise<Array<Country>> {
        const response = await this.getCountriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a country
     */
    async postCountriesRaw(requestParameters: PostCountriesRequest): Promise<runtime.ApiResponse<Country>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/countries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CountryInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryFromJSON(jsonValue));
    }

    /**
     * create a country
     */
    async postCountries(requestParameters: PostCountriesRequest): Promise<Country> {
        const response = await this.postCountriesRaw(requestParameters);
        return await response.value();
    }

}
