/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Depot,
    DepotFromJSON,
    DepotToJSON,
    DepotInput,
    DepotInputFromJSON,
    DepotInputToJSON,
    DepotWithLoc,
    DepotWithLocFromJSON,
    DepotWithLocToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
} from '../models';

export interface GetDepotsRequest {
    cityId?: string;
    countryId?: string;
    nameStartsWith?: string;
}

export interface GetDepotsDepotidRequest {
    depotId: string;
}

export interface GetDepotsInradiusRequest {
    lat: number;
    lon: number;
    radius: number;
}

export interface PostDepotsRequest {
    body?: DepotInput;
}

/**
 * 
 */
export class DepotsApi extends runtime.BaseAPI {

    /**
     * filter Depots
     */
    async getDepotsRaw(requestParameters: GetDepotsRequest): Promise<runtime.ApiResponse<Array<DepotWithLoc>>> {
        const queryParameters: any = {};

        if (requestParameters.cityId !== undefined) {
            queryParameters['cityId'] = requestParameters.cityId;
        }

        if (requestParameters.countryId !== undefined) {
            queryParameters['countryId'] = requestParameters.countryId;
        }

        if (requestParameters.nameStartsWith !== undefined) {
            queryParameters['nameStartsWith'] = requestParameters.nameStartsWith;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/depots`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DepotWithLocFromJSON));
    }

    /**
     * filter Depots
     */
    async getDepots(requestParameters: GetDepotsRequest): Promise<Array<DepotWithLoc>> {
        const response = await this.getDepotsRaw(requestParameters);
        return await response.value();
    }

    /**
     * filter Depots
     */
    async getDepotsDepotidRaw(requestParameters: GetDepotsDepotidRequest): Promise<runtime.ApiResponse<DepotWithLoc>> {
        if (requestParameters.depotId === null || requestParameters.depotId === undefined) {
            throw new runtime.RequiredError('depotId','Required parameter requestParameters.depotId was null or undefined when calling getDepotsDepotid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/depots/{depotId}`.replace(`{${"depotId"}}`, encodeURIComponent(String(requestParameters.depotId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DepotWithLocFromJSON(jsonValue));
    }

    /**
     * filter Depots
     */
    async getDepotsDepotid(requestParameters: GetDepotsDepotidRequest): Promise<DepotWithLoc> {
        const response = await this.getDepotsDepotidRaw(requestParameters);
        return await response.value();
    }

    /**
     * filter depots by radius
     */
    async getDepotsInradiusRaw(requestParameters: GetDepotsInradiusRequest): Promise<runtime.ApiResponse<Array<Depot>>> {
        if (requestParameters.lat === null || requestParameters.lat === undefined) {
            throw new runtime.RequiredError('lat','Required parameter requestParameters.lat was null or undefined when calling getDepotsInradius.');
        }

        if (requestParameters.lon === null || requestParameters.lon === undefined) {
            throw new runtime.RequiredError('lon','Required parameter requestParameters.lon was null or undefined when calling getDepotsInradius.');
        }

        if (requestParameters.radius === null || requestParameters.radius === undefined) {
            throw new runtime.RequiredError('radius','Required parameter requestParameters.radius was null or undefined when calling getDepotsInradius.');
        }

        const queryParameters: any = {};

        if (requestParameters.lat !== undefined) {
            queryParameters['lat'] = requestParameters.lat;
        }

        if (requestParameters.lon !== undefined) {
            queryParameters['lon'] = requestParameters.lon;
        }

        if (requestParameters.radius !== undefined) {
            queryParameters['radius'] = requestParameters.radius;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/depots/in-radius`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DepotFromJSON));
    }

    /**
     * filter depots by radius
     */
    async getDepotsInradius(requestParameters: GetDepotsInradiusRequest): Promise<Array<Depot>> {
        const response = await this.getDepotsInradiusRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a depot
     */
    async postDepotsRaw(requestParameters: PostDepotsRequest): Promise<runtime.ApiResponse<DepotWithLoc>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/depots`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DepotInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DepotWithLocFromJSON(jsonValue));
    }

    /**
     * create a depot
     */
    async postDepots(requestParameters: PostDepotsRequest): Promise<DepotWithLoc> {
        const response = await this.postDepotsRaw(requestParameters);
        return await response.value();
    }

}
