/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Failure,
    FailureFromJSON,
    FailureToJSON,
    Model10,
    Model10FromJSON,
    Model10ToJSON,
    PublicPort,
    PublicPortFromJSON,
    PublicPortToJSON,
} from '../models';

export interface GetPortsRequest {
    name?: string;
    countryId?: string;
    countryCode?: string;
    cityId?: string;
    portId?: string;
    locode?: string;
}

export interface GetPortsLocodeRequest {
    name: string;
    countryCode?: string;
}

/**
 * 
 */
export class PortsApi extends runtime.BaseAPI {

    /**
     * filter ports
     */
    async getPortsRaw(requestParameters: GetPortsRequest): Promise<runtime.ApiResponse<Array<PublicPort>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.countryId !== undefined) {
            queryParameters['countryId'] = requestParameters.countryId;
        }

        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        if (requestParameters.cityId !== undefined) {
            queryParameters['cityId'] = requestParameters.cityId;
        }

        if (requestParameters.portId !== undefined) {
            queryParameters['portId'] = requestParameters.portId;
        }

        if (requestParameters.locode !== undefined) {
            queryParameters['locode'] = requestParameters.locode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/ports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicPortFromJSON));
    }

    /**
     * filter ports
     */
    async getPorts(requestParameters: GetPortsRequest): Promise<Array<PublicPort>> {
        const response = await this.getPortsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Identify a port LOCODE from its name and other characteristics
     */
    async getPortsLocodeRaw(requestParameters: GetPortsLocodeRequest): Promise<runtime.ApiResponse<Model10>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getPortsLocode.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/ports/locode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model10FromJSON(jsonValue));
    }

    /**
     * Identify a port LOCODE from its name and other characteristics
     */
    async getPortsLocode(requestParameters: GetPortsLocodeRequest): Promise<Model10> {
        const response = await this.getPortsLocodeRaw(requestParameters);
        return await response.value();
    }

}
