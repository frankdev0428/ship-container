/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    City,
    CityFromJSON,
    CityToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
    Model11,
    Model11FromJSON,
    Model11ToJSON,
} from '../models';

export interface GetCitiesRequest {
    nameStartsWith?: string;
    countryId?: string;
    cityId?: string;
}

export interface PostCitiesRequest {
    body?: Model11;
}

/**
 * 
 */
export class CitiesApi extends runtime.BaseAPI {

    /**
     * filter Cities
     */
    async getCitiesRaw(requestParameters: GetCitiesRequest): Promise<runtime.ApiResponse<Array<City>>> {
        const queryParameters: any = {};

        if (requestParameters.nameStartsWith !== undefined) {
            queryParameters['nameStartsWith'] = requestParameters.nameStartsWith;
        }

        if (requestParameters.countryId !== undefined) {
            queryParameters['countryId'] = requestParameters.countryId;
        }

        if (requestParameters.cityId !== undefined) {
            queryParameters['cityId'] = requestParameters.cityId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/cities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CityFromJSON));
    }

    /**
     * filter Cities
     */
    async getCities(requestParameters: GetCitiesRequest): Promise<Array<City>> {
        const response = await this.getCitiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a city
     */
    async postCitiesRaw(requestParameters: PostCitiesRequest): Promise<runtime.ApiResponse<City>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/cities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: Model11ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CityFromJSON(jsonValue));
    }

    /**
     * create a city
     */
    async postCities(requestParameters: PostCitiesRequest): Promise<City> {
        const response = await this.postCitiesRaw(requestParameters);
        return await response.value();
    }

}
