/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Address,
    AddressFromJSON,
    AddressToJSON,
    AddressInput,
    AddressInputFromJSON,
    AddressInputToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
} from '../models';

export interface GetAddressesRequest {
    name?: string;
}

export interface PostAddressesRequest {
    body?: AddressInput;
}

/**
 * 
 */
export class AddressesApi extends runtime.BaseAPI {

    /**
     * filter Addresses
     */
    async getAddressesRaw(requestParameters: GetAddressesRequest): Promise<runtime.ApiResponse<Array<Address>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/addresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AddressFromJSON));
    }

    /**
     * filter Addresses
     */
    async getAddresses(requestParameters: GetAddressesRequest): Promise<Array<Address>> {
        const response = await this.getAddressesRaw(requestParameters);
        return await response.value();
    }

    /**
     * create an address
     */
    async postAddressesRaw(requestParameters: PostAddressesRequest): Promise<runtime.ApiResponse<Address>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/addresses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     * create an address
     */
    async postAddresses(requestParameters: PostAddressesRequest): Promise<Address> {
        const response = await this.postAddressesRaw(requestParameters);
        return await response.value();
    }

}
