/* tslint:disable */
/* eslint-disable */
/**
 * Nexxiot Boards
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ExtendedBoard,
    ExtendedBoardFromJSON,
    ExtendedBoardToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
    Model2,
    Model2FromJSON,
    Model2ToJSON,
} from '../models';

export interface GetBoardsRequest {
    boardId?: string;
    from?: string;
    to?: string;
}

export interface GetBoardsDeviceidStreamRequest {
    deviceId: string;
    from?: string;
    to?: string;
}

/**
 * 
 */
export class BoardsApi extends runtime.BaseAPI {

    /**
     * Get boards
     */
    async getBoardsRaw(requestParameters: GetBoardsRequest): Promise<runtime.ApiResponse<Array<ExtendedBoard>>> {
        const queryParameters: any = {};

        if (requestParameters.boardId !== undefined) {
            queryParameters['boardId'] = requestParameters.boardId;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/boards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExtendedBoardFromJSON));
    }

    /**
     * Get boards
     */
    async getBoards(requestParameters: GetBoardsRequest): Promise<Array<ExtendedBoard>> {
        const response = await this.getBoardsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get board stream
     */
    async getBoardsDeviceidStreamRaw(requestParameters: GetBoardsDeviceidStreamRequest): Promise<runtime.ApiResponse<Array<Model2>>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling getBoardsDeviceidStream.');
        }

        const queryParameters: any = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/boards/{deviceId}/stream`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(Model2FromJSON));
    }

    /**
     * Get board stream
     */
    async getBoardsDeviceidStream(requestParameters: GetBoardsDeviceidStreamRequest): Promise<Array<Model2>> {
        const response = await this.getBoardsDeviceidStreamRaw(requestParameters);
        return await response.value();
    }

}
