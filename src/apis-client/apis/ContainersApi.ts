/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BoardsProfile,
    BoardsProfileFromJSON,
    BoardsProfileToJSON,
    Container,
    ContainerFromJSON,
    ContainerToJSON,
    ContainerInput,
    ContainerInputFromJSON,
    ContainerInputToJSON,
    ContainerPanelProfile,
    ContainerPanelProfileFromJSON,
    ContainerPanelProfileToJSON,
    ContainerPanelProfileInput,
    ContainerPanelProfileInputFromJSON,
    ContainerPanelProfileInputToJSON,
    ContainerPatchInput,
    ContainerPatchInputFromJSON,
    ContainerPatchInputToJSON,
    ContainerSensorsProfile,
    ContainerSensorsProfileFromJSON,
    ContainerSensorsProfileToJSON,
    ContainerSensorsProfileInput,
    ContainerSensorsProfileInputFromJSON,
    ContainerSensorsProfileInputToJSON,
    ContainerWithProfile,
    ContainerWithProfileFromJSON,
    ContainerWithProfileToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
} from '../models';

export interface GetContainersContaineridRequest {
    containerId: string;
}

export interface GetContainersContaineridBoardpairingprofileRequest {
    containerId: string;
}

export interface PatchContainersContaineridRequest {
    containerId: string;
    body?: ContainerPatchInput;
}

export interface PostContainersRequest {
    body?: ContainerInput;
}

export interface PostContainersContaineridPanelprofileRequest {
    containerId: string;
    body?: ContainerPanelProfileInput;
}

export interface PostContainersContaineridSensorsprofileRequest {
    containerId: string;
    body?: ContainerSensorsProfileInput;
}

/**
 * 
 */
export class ContainersApi extends runtime.BaseAPI {

    /**
     * get container
     */
    async getContainersContaineridRaw(requestParameters: GetContainersContaineridRequest): Promise<runtime.ApiResponse<ContainerWithProfile>> {
        if (requestParameters.containerId === null || requestParameters.containerId === undefined) {
            throw new runtime.RequiredError('containerId','Required parameter requestParameters.containerId was null or undefined when calling getContainersContainerid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/containers/{containerId}`.replace(`{${"containerId"}}`, encodeURIComponent(String(requestParameters.containerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerWithProfileFromJSON(jsonValue));
    }

    /**
     * get container
     */
    async getContainersContainerid(requestParameters: GetContainersContaineridRequest): Promise<ContainerWithProfile> {
        const response = await this.getContainersContaineridRaw(requestParameters);
        return await response.value();
    }

    /**
     * list container board pairing profile
     */
    async getContainersContaineridBoardpairingprofileRaw(requestParameters: GetContainersContaineridBoardpairingprofileRequest): Promise<runtime.ApiResponse<Array<BoardsProfile>>> {
        if (requestParameters.containerId === null || requestParameters.containerId === undefined) {
            throw new runtime.RequiredError('containerId','Required parameter requestParameters.containerId was null or undefined when calling getContainersContaineridBoardpairingprofile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/containers/{containerId}/board-pairing-profile`.replace(`{${"containerId"}}`, encodeURIComponent(String(requestParameters.containerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BoardsProfileFromJSON));
    }

    /**
     * list container board pairing profile
     */
    async getContainersContaineridBoardpairingprofile(requestParameters: GetContainersContaineridBoardpairingprofileRequest): Promise<Array<BoardsProfile>> {
        const response = await this.getContainersContaineridBoardpairingprofileRaw(requestParameters);
        return await response.value();
    }

    /**
     * modify container
     */
    async patchContainersContaineridRaw(requestParameters: PatchContainersContaineridRequest): Promise<runtime.ApiResponse<Container>> {
        if (requestParameters.containerId === null || requestParameters.containerId === undefined) {
            throw new runtime.RequiredError('containerId','Required parameter requestParameters.containerId was null or undefined when calling patchContainersContainerid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/containers/{containerId}`.replace(`{${"containerId"}}`, encodeURIComponent(String(requestParameters.containerId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ContainerPatchInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerFromJSON(jsonValue));
    }

    /**
     * modify container
     */
    async patchContainersContainerid(requestParameters: PatchContainersContaineridRequest): Promise<Container> {
        const response = await this.patchContainersContaineridRaw(requestParameters);
        return await response.value();
    }

    /**
     * postContainer
     */
    async postContainersRaw(requestParameters: PostContainersRequest): Promise<runtime.ApiResponse<Container>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/containers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContainerInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerFromJSON(jsonValue));
    }

    /**
     * postContainer
     */
    async postContainers(requestParameters: PostContainersRequest): Promise<Container> {
        const response = await this.postContainersRaw(requestParameters);
        return await response.value();
    }

    /**
     * add container panel profile
     */
    async postContainersContaineridPanelprofileRaw(requestParameters: PostContainersContaineridPanelprofileRequest): Promise<runtime.ApiResponse<ContainerPanelProfile>> {
        if (requestParameters.containerId === null || requestParameters.containerId === undefined) {
            throw new runtime.RequiredError('containerId','Required parameter requestParameters.containerId was null or undefined when calling postContainersContaineridPanelprofile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/containers/{containerId}/panel-profile`.replace(`{${"containerId"}}`, encodeURIComponent(String(requestParameters.containerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContainerPanelProfileInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerPanelProfileFromJSON(jsonValue));
    }

    /**
     * add container panel profile
     */
    async postContainersContaineridPanelprofile(requestParameters: PostContainersContaineridPanelprofileRequest): Promise<ContainerPanelProfile> {
        const response = await this.postContainersContaineridPanelprofileRaw(requestParameters);
        return await response.value();
    }

    /**
     * add container sensor profile
     */
    async postContainersContaineridSensorsprofileRaw(requestParameters: PostContainersContaineridSensorsprofileRequest): Promise<runtime.ApiResponse<ContainerSensorsProfile>> {
        if (requestParameters.containerId === null || requestParameters.containerId === undefined) {
            throw new runtime.RequiredError('containerId','Required parameter requestParameters.containerId was null or undefined when calling postContainersContaineridSensorsprofile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/containers/{containerId}/sensors-profile`.replace(`{${"containerId"}}`, encodeURIComponent(String(requestParameters.containerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContainerSensorsProfileInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerSensorsProfileFromJSON(jsonValue));
    }

    /**
     * add container sensor profile
     */
    async postContainersContaineridSensorsprofile(requestParameters: PostContainersContaineridSensorsprofileRequest): Promise<ContainerSensorsProfile> {
        const response = await this.postContainersContaineridSensorsprofileRaw(requestParameters);
        return await response.value();
    }

}
