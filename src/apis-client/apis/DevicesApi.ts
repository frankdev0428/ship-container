/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DeviceToContainerPairing,
    DeviceToContainerPairingFromJSON,
    DeviceToContainerPairingToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
} from '../models';

export interface GetDevicesContainersRequest {
    type: string;
    deviceIds?: Array<string>;
    useLegacy?: number;
}

/**
 * 
 */
export class DevicesApi extends runtime.BaseAPI {

    /**
     * get containers paired to devices
     */
    async getDevicesContainersRaw(requestParameters: GetDevicesContainersRequest): Promise<runtime.ApiResponse<Array<DeviceToContainerPairing>>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getDevicesContainers.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.deviceIds) {
            queryParameters['deviceIds'] = requestParameters.deviceIds;
        }

        if (requestParameters.useLegacy !== undefined) {
            queryParameters['useLegacy'] = requestParameters.useLegacy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/devices/containers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DeviceToContainerPairingFromJSON));
    }

    /**
     * get containers paired to devices
     */
    async getDevicesContainers(requestParameters: GetDevicesContainersRequest): Promise<Array<DeviceToContainerPairing>> {
        const response = await this.getDevicesContainersRaw(requestParameters);
        return await response.value();
    }

}
