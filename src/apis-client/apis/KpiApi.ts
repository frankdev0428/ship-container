/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Failure,
    FailureFromJSON,
    FailureToJSON,
    Model17,
    Model17FromJSON,
    Model17ToJSON,
    Model18,
    Model18FromJSON,
    Model18ToJSON,
    Model19,
    Model19FromJSON,
    Model19ToJSON,
    Model20,
    Model20FromJSON,
    Model20ToJSON,
    Model21,
    Model21FromJSON,
    Model21ToJSON,
    Model22,
    Model22FromJSON,
    Model22ToJSON,
    Model23,
    Model23FromJSON,
    Model23ToJSON,
    Model24,
    Model24FromJSON,
    Model24ToJSON,
    Model26,
    Model26FromJSON,
    Model26ToJSON,
    Model27,
    Model27FromJSON,
    Model27ToJSON,
    Model28,
    Model28FromJSON,
    Model28ToJSON,
    Model29,
    Model29FromJSON,
    Model29ToJSON,
    Model32,
    Model32FromJSON,
    Model32ToJSON,
    Model33,
    Model33FromJSON,
    Model33ToJSON,
    Model34,
    Model34FromJSON,
    Model34ToJSON,
} from '../models';

export interface GetKpiAvailablebinsRequest {
    startDate: string;
    endDate: string;
    nBefore?: number;
    nAfter?: number;
}

export interface GetKpiAvpctidleRequest {
    startDate: string;
    endDate: string;
    activeOnly: string;
}

export interface GetKpiAvpctmnrRequest {
    startDate: string;
    endDate: string;
    activeOnly: string;
}

export interface GetKpiAvpctutilizationRequest {
    startDate: string;
    endDate: string;
    activeOnly: string;
    nBefore?: number;
    nAfter?: number;
}

export interface GetKpiContainerallocbreakdownRequest {
    startDate: string;
    endDate: string;
}

export interface GetKpiGetallocateddaysRequest {
    startDate: string;
    endDate: string;
    nBefore?: number;
    nAfter?: number;
}

export interface GetKpiGetidledaysRequest {
    startDate: string;
    endDate: string;
    nBefore?: number;
    nAfter?: number;
}

export interface GetKpiGetorderacceptedandreadybinRequest {
    startDate: string;
    endDate: string;
}

export interface GetKpiGettotalordersbinRequest {
    startDate: string;
    endDate: string;
}

export interface GetKpiIdlepctbinsRequest {
    startDate: string;
    endDate: string;
    nBefore?: number;
    nAfter?: number;
}

export interface GetKpiOrderacceptedandreadybinsRequest {
    startDate: string;
    endDate: string;
    nBefore?: number;
    nAfter?: number;
}

export interface GetKpiOrderacceptednotreadydailybinsRequest {
    startDate: string;
    endDate: string;
    nBefore?: number;
    nAfter?: number;
}

export interface GetKpiOrderendsRequest {
    startDate: string;
    endDate: string;
}

export interface GetKpiOrderendsbinsRequest {
    startDate: string;
    endDate: string;
    nBefore?: number;
    nAfter?: number;
}

export interface GetKpiOrderendstimeseriesRequest {
    startDate: string;
    endDate: string;
}

export interface GetKpiOrdersbycustomerRequest {
    startDate: string;
    endDate: string;
}

export interface GetKpiOrderstartsRequest {
    startDate: string;
    endDate: string;
}

export interface GetKpiOrderstartsbinsRequest {
    startDate: string;
    endDate: string;
    nBefore?: number;
    nAfter?: number;
}

export interface GetKpiOrderstartstimeseriesRequest {
    startDate: string;
    endDate: string;
}

export interface GetKpiOrderstatuscountsRequest {
    startDate: string;
    endDate: string;
}

export interface GetKpiPctidleRequest {
    equipmentId: string;
    startDate: string;
    endDate: string;
}

export interface GetKpiPctmnrRequest {
    equipmentId: string;
    startDate: string;
    endDate: string;
}

export interface GetKpiPctutilizationRequest {
    equipmentId: string;
    startDate: string;
    endDate: string;
}

export interface GetKpiStatuscountsRequest {
    startDate: string;
    endDate: string;
}

export interface GetKpiTotalavRequest {
    startDate: string;
    endDate: string;
}

export interface GetKpiTotalorderbinsRequest {
    startDate: string;
    endDate: string;
    nBefore?: number;
    nAfter?: number;
}

export interface GetKpiTotalpctblockedRequest {
    startDate: string;
    endDate: string;
}

export interface GetKpiUtilizationdailybinsRequest {
    startDate: string;
    endDate: string;
    nBefore?: number;
    nAfter?: number;
}

/**
 * 
 */
export class KpiApi extends runtime.BaseAPI {

    /**
     * get binned availible containers per bin
     */
    async getKpiAvailablebinsRaw(requestParameters: GetKpiAvailablebinsRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiAvailablebins.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiAvailablebins.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.nBefore !== undefined) {
            queryParameters['nBefore'] = requestParameters.nBefore;
        }

        if (requestParameters.nAfter !== undefined) {
            queryParameters['nAfter'] = requestParameters.nAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/AvailableBins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get binned availible containers per bin
     */
    async getKpiAvailablebins(requestParameters: GetKpiAvailablebinsRequest): Promise<Array<Array<string>>> {
        const response = await this.getKpiAvailablebinsRaw(requestParameters);
        return await response.value();
    }

    /**
     * kpi av allocation
     */
    async getKpiAvpctidleRaw(requestParameters: GetKpiAvpctidleRequest): Promise<runtime.ApiResponse<Model17>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiAvpctidle.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiAvpctidle.');
        }

        if (requestParameters.activeOnly === null || requestParameters.activeOnly === undefined) {
            throw new runtime.RequiredError('activeOnly','Required parameter requestParameters.activeOnly was null or undefined when calling getKpiAvpctidle.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.activeOnly !== undefined) {
            queryParameters['activeOnly'] = requestParameters.activeOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/avPctIdle`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model17FromJSON(jsonValue));
    }

    /**
     * kpi av allocation
     */
    async getKpiAvpctidle(requestParameters: GetKpiAvpctidleRequest): Promise<Model17> {
        const response = await this.getKpiAvpctidleRaw(requestParameters);
        return await response.value();
    }

    /**
     * kpi av allocation
     */
    async getKpiAvpctmnrRaw(requestParameters: GetKpiAvpctmnrRequest): Promise<runtime.ApiResponse<Model18>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiAvpctmnr.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiAvpctmnr.');
        }

        if (requestParameters.activeOnly === null || requestParameters.activeOnly === undefined) {
            throw new runtime.RequiredError('activeOnly','Required parameter requestParameters.activeOnly was null or undefined when calling getKpiAvpctmnr.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.activeOnly !== undefined) {
            queryParameters['activeOnly'] = requestParameters.activeOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/avPctMnr`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model18FromJSON(jsonValue));
    }

    /**
     * kpi av allocation
     */
    async getKpiAvpctmnr(requestParameters: GetKpiAvpctmnrRequest): Promise<Model18> {
        const response = await this.getKpiAvpctmnrRaw(requestParameters);
        return await response.value();
    }

    /**
     * kpi av allocation
     */
    async getKpiAvpctutilizationRaw(requestParameters: GetKpiAvpctutilizationRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiAvpctutilization.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiAvpctutilization.');
        }

        if (requestParameters.activeOnly === null || requestParameters.activeOnly === undefined) {
            throw new runtime.RequiredError('activeOnly','Required parameter requestParameters.activeOnly was null or undefined when calling getKpiAvpctutilization.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.activeOnly !== undefined) {
            queryParameters['activeOnly'] = requestParameters.activeOnly;
        }

        if (requestParameters.nBefore !== undefined) {
            queryParameters['nBefore'] = requestParameters.nBefore;
        }

        if (requestParameters.nAfter !== undefined) {
            queryParameters['nAfter'] = requestParameters.nAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/avPctUtilization`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * kpi av allocation
     */
    async getKpiAvpctutilization(requestParameters: GetKpiAvpctutilizationRequest): Promise<Array<Array<string>>> {
        const response = await this.getKpiAvpctutilizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * allocation breakdown
     */
    async getKpiContainerallocbreakdownRaw(requestParameters: GetKpiContainerallocbreakdownRequest): Promise<runtime.ApiResponse<Model19>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiContainerallocbreakdown.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiContainerallocbreakdown.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/containerAllocBreakDown`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model19FromJSON(jsonValue));
    }

    /**
     * allocation breakdown
     */
    async getKpiContainerallocbreakdown(requestParameters: GetKpiContainerallocbreakdownRequest): Promise<Model19> {
        const response = await this.getKpiContainerallocbreakdownRaw(requestParameters);
        return await response.value();
    }

    /**
     * get num Allocated Days
     */
    async getKpiGetallocateddaysRaw(requestParameters: GetKpiGetallocateddaysRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiGetallocateddays.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiGetallocateddays.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.nBefore !== undefined) {
            queryParameters['nBefore'] = requestParameters.nBefore;
        }

        if (requestParameters.nAfter !== undefined) {
            queryParameters['nAfter'] = requestParameters.nAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/getAllocatedDays`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get num Allocated Days
     */
    async getKpiGetallocateddays(requestParameters: GetKpiGetallocateddaysRequest): Promise<Array<Array<string>>> {
        const response = await this.getKpiGetallocateddaysRaw(requestParameters);
        return await response.value();
    }

    /**
     * get num idle days
     */
    async getKpiGetidledaysRaw(requestParameters: GetKpiGetidledaysRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiGetidledays.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiGetidledays.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.nBefore !== undefined) {
            queryParameters['nBefore'] = requestParameters.nBefore;
        }

        if (requestParameters.nAfter !== undefined) {
            queryParameters['nAfter'] = requestParameters.nAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/getIdleDays`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get num idle days
     */
    async getKpiGetidledays(requestParameters: GetKpiGetidledaysRequest): Promise<Array<Array<string>>> {
        const response = await this.getKpiGetidledaysRaw(requestParameters);
        return await response.value();
    }

    /**
     * kpi allocation
     */
    async getKpiGetorderacceptedandreadybinRaw(requestParameters: GetKpiGetorderacceptedandreadybinRequest): Promise<runtime.ApiResponse<Model20>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiGetorderacceptedandreadybin.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiGetorderacceptedandreadybin.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/getOrderAcceptedAndReadyBin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model20FromJSON(jsonValue));
    }

    /**
     * kpi allocation
     */
    async getKpiGetorderacceptedandreadybin(requestParameters: GetKpiGetorderacceptedandreadybinRequest): Promise<Model20> {
        const response = await this.getKpiGetorderacceptedandreadybinRaw(requestParameters);
        return await response.value();
    }

    /**
     * kpi allocation
     */
    async getKpiGettotalordersbinRaw(requestParameters: GetKpiGettotalordersbinRequest): Promise<runtime.ApiResponse<Model21>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiGettotalordersbin.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiGettotalordersbin.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/getTotalOrdersBin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model21FromJSON(jsonValue));
    }

    /**
     * kpi allocation
     */
    async getKpiGettotalordersbin(requestParameters: GetKpiGettotalordersbinRequest): Promise<Model21> {
        const response = await this.getKpiGettotalordersbinRaw(requestParameters);
        return await response.value();
    }

    /**
     * get binned order starts per bin
     */
    async getKpiIdlepctbinsRaw(requestParameters: GetKpiIdlepctbinsRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiIdlepctbins.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiIdlepctbins.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.nBefore !== undefined) {
            queryParameters['nBefore'] = requestParameters.nBefore;
        }

        if (requestParameters.nAfter !== undefined) {
            queryParameters['nAfter'] = requestParameters.nAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/idlePctBins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get binned order starts per bin
     */
    async getKpiIdlepctbins(requestParameters: GetKpiIdlepctbinsRequest): Promise<Array<Array<string>>> {
        const response = await this.getKpiIdlepctbinsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get binned order ends per bin
     */
    async getKpiOrderacceptedandreadybinsRaw(requestParameters: GetKpiOrderacceptedandreadybinsRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiOrderacceptedandreadybins.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiOrderacceptedandreadybins.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.nBefore !== undefined) {
            queryParameters['nBefore'] = requestParameters.nBefore;
        }

        if (requestParameters.nAfter !== undefined) {
            queryParameters['nAfter'] = requestParameters.nAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/orderAcceptedAndReadyBins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get binned order ends per bin
     */
    async getKpiOrderacceptedandreadybins(requestParameters: GetKpiOrderacceptedandreadybinsRequest): Promise<Array<Array<string>>> {
        const response = await this.getKpiOrderacceptedandreadybinsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get binned accepted orders not ready per bin
     */
    async getKpiOrderacceptednotreadydailybinsRaw(requestParameters: GetKpiOrderacceptednotreadydailybinsRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiOrderacceptednotreadydailybins.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiOrderacceptednotreadydailybins.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.nBefore !== undefined) {
            queryParameters['nBefore'] = requestParameters.nBefore;
        }

        if (requestParameters.nAfter !== undefined) {
            queryParameters['nAfter'] = requestParameters.nAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/OrderAcceptedNotReadyDailyBins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get binned accepted orders not ready per bin
     */
    async getKpiOrderacceptednotreadydailybins(requestParameters: GetKpiOrderacceptednotreadydailybinsRequest): Promise<Array<Array<string>>> {
        const response = await this.getKpiOrderacceptednotreadydailybinsRaw(requestParameters);
        return await response.value();
    }

    /**
     * kpi mnr
     */
    async getKpiOrderendsRaw(requestParameters: GetKpiOrderendsRequest): Promise<runtime.ApiResponse<Model22>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiOrderends.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiOrderends.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/orderEnds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model22FromJSON(jsonValue));
    }

    /**
     * kpi mnr
     */
    async getKpiOrderends(requestParameters: GetKpiOrderendsRequest): Promise<Model22> {
        const response = await this.getKpiOrderendsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get binned order ends per bin
     */
    async getKpiOrderendsbinsRaw(requestParameters: GetKpiOrderendsbinsRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiOrderendsbins.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiOrderendsbins.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.nBefore !== undefined) {
            queryParameters['nBefore'] = requestParameters.nBefore;
        }

        if (requestParameters.nAfter !== undefined) {
            queryParameters['nAfter'] = requestParameters.nAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/orderEndsBins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get binned order ends per bin
     */
    async getKpiOrderendsbins(requestParameters: GetKpiOrderendsbinsRequest): Promise<Array<Array<string>>> {
        const response = await this.getKpiOrderendsbinsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get num orders starting per day
     */
    async getKpiOrderendstimeseriesRaw(requestParameters: GetKpiOrderendstimeseriesRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiOrderendstimeseries.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiOrderendstimeseries.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/orderEndsTimeSeries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get num orders starting per day
     */
    async getKpiOrderendstimeseries(requestParameters: GetKpiOrderendstimeseriesRequest): Promise<Array<Array<string>>> {
        const response = await this.getKpiOrderendstimeseriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * kpi mnr
     */
    async getKpiOrdersbycustomerRaw(requestParameters: GetKpiOrdersbycustomerRequest): Promise<runtime.ApiResponse<Array<Model24>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiOrdersbycustomer.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiOrdersbycustomer.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/ordersByCustomer`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(Model24FromJSON));
    }

    /**
     * kpi mnr
     */
    async getKpiOrdersbycustomer(requestParameters: GetKpiOrdersbycustomerRequest): Promise<Array<Model24>> {
        const response = await this.getKpiOrdersbycustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * kpi mnr
     */
    async getKpiOrderstartsRaw(requestParameters: GetKpiOrderstartsRequest): Promise<runtime.ApiResponse<Model32>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiOrderstarts.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiOrderstarts.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/orderStarts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model32FromJSON(jsonValue));
    }

    /**
     * kpi mnr
     */
    async getKpiOrderstarts(requestParameters: GetKpiOrderstartsRequest): Promise<Model32> {
        const response = await this.getKpiOrderstartsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get binned order starts per bin
     */
    async getKpiOrderstartsbinsRaw(requestParameters: GetKpiOrderstartsbinsRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiOrderstartsbins.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiOrderstartsbins.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.nBefore !== undefined) {
            queryParameters['nBefore'] = requestParameters.nBefore;
        }

        if (requestParameters.nAfter !== undefined) {
            queryParameters['nAfter'] = requestParameters.nAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/orderStartsBins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get binned order starts per bin
     */
    async getKpiOrderstartsbins(requestParameters: GetKpiOrderstartsbinsRequest): Promise<Array<Array<string>>> {
        const response = await this.getKpiOrderstartsbinsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get num orders starting per day
     */
    async getKpiOrderstartstimeseriesRaw(requestParameters: GetKpiOrderstartstimeseriesRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiOrderstartstimeseries.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiOrderstartstimeseries.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/orderStartsTimeSeries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get num orders starting per day
     */
    async getKpiOrderstartstimeseries(requestParameters: GetKpiOrderstartstimeseriesRequest): Promise<Array<Array<string>>> {
        const response = await this.getKpiOrderstartstimeseriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * status counts
     */
    async getKpiOrderstatuscountsRaw(requestParameters: GetKpiOrderstatuscountsRequest): Promise<runtime.ApiResponse<Model23>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiOrderstatuscounts.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiOrderstatuscounts.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/orderStatusCounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model23FromJSON(jsonValue));
    }

    /**
     * status counts
     */
    async getKpiOrderstatuscounts(requestParameters: GetKpiOrderstatuscountsRequest): Promise<Model23> {
        const response = await this.getKpiOrderstatuscountsRaw(requestParameters);
        return await response.value();
    }

    /**
     * kpi allocation
     */
    async getKpiPctidleRaw(requestParameters: GetKpiPctidleRequest): Promise<runtime.ApiResponse<Model26>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling getKpiPctidle.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiPctidle.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiPctidle.');
        }

        const queryParameters: any = {};

        if (requestParameters.equipmentId !== undefined) {
            queryParameters['equipmentId'] = requestParameters.equipmentId;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/pctIdle`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model26FromJSON(jsonValue));
    }

    /**
     * kpi allocation
     */
    async getKpiPctidle(requestParameters: GetKpiPctidleRequest): Promise<Model26> {
        const response = await this.getKpiPctidleRaw(requestParameters);
        return await response.value();
    }

    /**
     * kpi mnr
     */
    async getKpiPctmnrRaw(requestParameters: GetKpiPctmnrRequest): Promise<runtime.ApiResponse<Model27>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling getKpiPctmnr.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiPctmnr.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiPctmnr.');
        }

        const queryParameters: any = {};

        if (requestParameters.equipmentId !== undefined) {
            queryParameters['equipmentId'] = requestParameters.equipmentId;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/pctMnr`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model27FromJSON(jsonValue));
    }

    /**
     * kpi mnr
     */
    async getKpiPctmnr(requestParameters: GetKpiPctmnrRequest): Promise<Model27> {
        const response = await this.getKpiPctmnrRaw(requestParameters);
        return await response.value();
    }

    /**
     * kpi allocation
     */
    async getKpiPctutilizationRaw(requestParameters: GetKpiPctutilizationRequest): Promise<runtime.ApiResponse<Model33>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling getKpiPctutilization.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiPctutilization.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiPctutilization.');
        }

        const queryParameters: any = {};

        if (requestParameters.equipmentId !== undefined) {
            queryParameters['equipmentId'] = requestParameters.equipmentId;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/pctUtilization/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model33FromJSON(jsonValue));
    }

    /**
     * kpi allocation
     */
    async getKpiPctutilization(requestParameters: GetKpiPctutilizationRequest): Promise<Model33> {
        const response = await this.getKpiPctutilizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * status counts
     */
    async getKpiStatuscountsRaw(requestParameters: GetKpiStatuscountsRequest): Promise<runtime.ApiResponse<Model28>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiStatuscounts.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiStatuscounts.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/statusCounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model28FromJSON(jsonValue));
    }

    /**
     * status counts
     */
    async getKpiStatuscounts(requestParameters: GetKpiStatuscountsRequest): Promise<Model28> {
        const response = await this.getKpiStatuscountsRaw(requestParameters);
        return await response.value();
    }

    /**
     * availible counts
     */
    async getKpiTotalavRaw(requestParameters: GetKpiTotalavRequest): Promise<runtime.ApiResponse<Model29>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiTotalav.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiTotalav.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/totalAv`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model29FromJSON(jsonValue));
    }

    /**
     * availible counts
     */
    async getKpiTotalav(requestParameters: GetKpiTotalavRequest): Promise<Model29> {
        const response = await this.getKpiTotalavRaw(requestParameters);
        return await response.value();
    }

    /**
     * get binned order ends per bin
     */
    async getKpiTotalorderbinsRaw(requestParameters: GetKpiTotalorderbinsRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiTotalorderbins.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiTotalorderbins.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.nBefore !== undefined) {
            queryParameters['nBefore'] = requestParameters.nBefore;
        }

        if (requestParameters.nAfter !== undefined) {
            queryParameters['nAfter'] = requestParameters.nAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/totalOrderBins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get binned order ends per bin
     */
    async getKpiTotalorderbins(requestParameters: GetKpiTotalorderbinsRequest): Promise<Array<Array<string>>> {
        const response = await this.getKpiTotalorderbinsRaw(requestParameters);
        return await response.value();
    }

    /**
     * kpi allocation
     */
    async getKpiTotalpctblockedRaw(requestParameters: GetKpiTotalpctblockedRequest): Promise<runtime.ApiResponse<Model34>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiTotalpctblocked.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiTotalpctblocked.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/totalPctBlocked/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model34FromJSON(jsonValue));
    }

    /**
     * kpi allocation
     */
    async getKpiTotalpctblocked(requestParameters: GetKpiTotalpctblockedRequest): Promise<Model34> {
        const response = await this.getKpiTotalpctblockedRaw(requestParameters);
        return await response.value();
    }

    /**
     * get binned order starts per bin
     */
    async getKpiUtilizationdailybinsRaw(requestParameters: GetKpiUtilizationdailybinsRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getKpiUtilizationdailybins.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getKpiUtilizationdailybins.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.nBefore !== undefined) {
            queryParameters['nBefore'] = requestParameters.nBefore;
        }

        if (requestParameters.nAfter !== undefined) {
            queryParameters['nAfter'] = requestParameters.nAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/kpi/utilizationDailyBins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get binned order starts per bin
     */
    async getKpiUtilizationdailybins(requestParameters: GetKpiUtilizationdailybinsRequest): Promise<Array<Array<string>>> {
        const response = await this.getKpiUtilizationdailybinsRaw(requestParameters);
        return await response.value();
    }

}
