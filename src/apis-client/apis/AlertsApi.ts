/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Failure,
    FailureFromJSON,
    FailureToJSON,
    PublicAlertState,
    PublicAlertStateFromJSON,
    PublicAlertStateToJSON,
} from '../models';

export interface GetAlertsRequest {
    includeResolved?: number;
    criterionId?: string;
    orderId?: string;
    equipmentId?: string;
    equipmentLeaseContractId?: string;
    shouldIncludeVisibilityState?: number;
}

/**
 * 
 */
export class AlertsApi extends runtime.BaseAPI {

    /**
     * get alerts
     */
    async getAlertsRaw(requestParameters: GetAlertsRequest): Promise<runtime.ApiResponse<Array<PublicAlertState>>> {
        const queryParameters: any = {};

        if (requestParameters.includeResolved !== undefined) {
            queryParameters['includeResolved'] = requestParameters.includeResolved;
        }

        if (requestParameters.criterionId !== undefined) {
            queryParameters['criterionId'] = requestParameters.criterionId;
        }

        if (requestParameters.orderId !== undefined) {
            queryParameters['orderId'] = requestParameters.orderId;
        }

        if (requestParameters.equipmentId !== undefined) {
            queryParameters['equipmentId'] = requestParameters.equipmentId;
        }

        if (requestParameters.equipmentLeaseContractId !== undefined) {
            queryParameters['equipmentLeaseContractId'] = requestParameters.equipmentLeaseContractId;
        }

        if (requestParameters.shouldIncludeVisibilityState !== undefined) {
            queryParameters['shouldIncludeVisibilityState'] = requestParameters.shouldIncludeVisibilityState;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/alerts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicAlertStateFromJSON));
    }

    /**
     * get alerts
     */
    async getAlerts(requestParameters: GetAlertsRequest): Promise<Array<PublicAlertState>> {
        const response = await this.getAlertsRaw(requestParameters);
        return await response.value();
    }

}
