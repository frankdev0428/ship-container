/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DepotContainer,
    DepotContainerFromJSON,
    DepotContainerToJSON,
    DepotStats,
    DepotStatsFromJSON,
    DepotStatsToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
    PublicEquipment,
    PublicEquipmentFromJSON,
    PublicEquipmentToJSON,
} from '../models';

export interface GetV2DepotsInventoryRequest {
    depotId: string;
}

export interface GetV2DepotsStatsRequest {
    depotId: string;
}

export interface GetV2EquipmentsRequest {
    status?: Array<string>;
    statusFrom?: string;
    statusTo?: string;
    startStatusAtLocationId?: Array<string>;
    endStatusAtLocationId?: string;
}

/**
 * 
 */
export class V2Api extends runtime.BaseAPI {

    /**
     * get containers in a depot
     */
    async getV2DepotsInventoryRaw(requestParameters: GetV2DepotsInventoryRequest): Promise<runtime.ApiResponse<Array<DepotContainer>>> {
        if (requestParameters.depotId === null || requestParameters.depotId === undefined) {
            throw new runtime.RequiredError('depotId','Required parameter requestParameters.depotId was null or undefined when calling getV2DepotsInventory.');
        }

        const queryParameters: any = {};

        if (requestParameters.depotId !== undefined) {
            queryParameters['depotId'] = requestParameters.depotId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/v2/depots/inventory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DepotContainerFromJSON));
    }

    /**
     * get containers in a depot
     */
    async getV2DepotsInventory(requestParameters: GetV2DepotsInventoryRequest): Promise<Array<DepotContainer>> {
        const response = await this.getV2DepotsInventoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Autocomplete depots codes
     */
    async getV2DepotsStatsRaw(requestParameters: GetV2DepotsStatsRequest): Promise<runtime.ApiResponse<Array<DepotStats>>> {
        if (requestParameters.depotId === null || requestParameters.depotId === undefined) {
            throw new runtime.RequiredError('depotId','Required parameter requestParameters.depotId was null or undefined when calling getV2DepotsStats.');
        }

        const queryParameters: any = {};

        if (requestParameters.depotId !== undefined) {
            queryParameters['depotId'] = requestParameters.depotId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/v2/depots/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DepotStatsFromJSON));
    }

    /**
     * Autocomplete depots codes
     */
    async getV2DepotsStats(requestParameters: GetV2DepotsStatsRequest): Promise<Array<DepotStats>> {
        const response = await this.getV2DepotsStatsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get equipments
     */
    async getV2EquipmentsRaw(requestParameters: GetV2EquipmentsRequest): Promise<runtime.ApiResponse<Array<PublicEquipment>>> {
        const queryParameters: any = {};

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.statusFrom !== undefined) {
            queryParameters['statusFrom'] = requestParameters.statusFrom;
        }

        if (requestParameters.statusTo !== undefined) {
            queryParameters['statusTo'] = requestParameters.statusTo;
        }

        if (requestParameters.startStatusAtLocationId) {
            queryParameters['startStatusAtLocationId'] = requestParameters.startStatusAtLocationId;
        }

        if (requestParameters.endStatusAtLocationId !== undefined) {
            queryParameters['endStatusAtLocationId'] = requestParameters.endStatusAtLocationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/v2/equipments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicEquipmentFromJSON));
    }

    /**
     * get equipments
     */
    async getV2Equipments(requestParameters: GetV2EquipmentsRequest): Promise<Array<PublicEquipment>> {
        const response = await this.getV2EquipmentsRaw(requestParameters);
        return await response.value();
    }

}
