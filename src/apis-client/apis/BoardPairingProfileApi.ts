/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BoardsProfile,
    BoardsProfileFromJSON,
    BoardsProfileToJSON,
    ContainerBoardPairingProfileDeleteInput,
    ContainerBoardPairingProfileDeleteInputFromJSON,
    ContainerBoardPairingProfileDeleteInputToJSON,
    ContainerBoardPairingProfilePostInput,
    ContainerBoardPairingProfilePostInputFromJSON,
    ContainerBoardPairingProfilePostInputToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
    Model46,
    Model46FromJSON,
    Model46ToJSON,
    Model47,
    Model47FromJSON,
    Model47ToJSON,
} from '../models';

export interface DeleteBoardpairingprofileRequest {
    body?: ContainerBoardPairingProfileDeleteInput;
}

export interface PatchBoardpairingprofileRequest {
    body?: Model46;
}

export interface PostBoardpairingprofileRequest {
    body?: ContainerBoardPairingProfilePostInput;
}

/**
 * 
 */
export class BoardPairingProfileApi extends runtime.BaseAPI {

    /**
     * delete board pairing
     */
    async deleteBoardpairingprofileRaw(requestParameters: DeleteBoardpairingprofileRequest): Promise<runtime.ApiResponse<Model47>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/board-pairing-profile`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ContainerBoardPairingProfileDeleteInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model47FromJSON(jsonValue));
    }

    /**
     * delete board pairing
     */
    async deleteBoardpairingprofile(requestParameters: DeleteBoardpairingprofileRequest): Promise<Model47> {
        const response = await this.deleteBoardpairingprofileRaw(requestParameters);
        return await response.value();
    }

    /**
     * modify board pairing
     */
    async patchBoardpairingprofileRaw(requestParameters: PatchBoardpairingprofileRequest): Promise<runtime.ApiResponse<BoardsProfile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/board-pairing-profile`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: Model46ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardsProfileFromJSON(jsonValue));
    }

    /**
     * modify board pairing
     */
    async patchBoardpairingprofile(requestParameters: PatchBoardpairingprofileRequest): Promise<BoardsProfile> {
        const response = await this.patchBoardpairingprofileRaw(requestParameters);
        return await response.value();
    }

    /**
     * add container board pairing profile
     */
    async postBoardpairingprofileRaw(requestParameters: PostBoardpairingprofileRequest): Promise<runtime.ApiResponse<BoardsProfile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/board-pairing-profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContainerBoardPairingProfilePostInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardsProfileFromJSON(jsonValue));
    }

    /**
     * add container board pairing profile
     */
    async postBoardpairingprofile(requestParameters: PostBoardpairingprofileRequest): Promise<BoardsProfile> {
        const response = await this.postBoardpairingprofileRaw(requestParameters);
        return await response.value();
    }

}
