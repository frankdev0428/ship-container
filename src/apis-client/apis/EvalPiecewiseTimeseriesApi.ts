/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Failure,
    FailureFromJSON,
    FailureToJSON,
    Model4,
    Model4FromJSON,
    Model4ToJSON,
} from '../models';

export interface GetEvalpiecewisetimeseriesRequest {
    date: string;
    timeSeriesId: string;
    interpolation: string;
}

/**
 * 
 */
export class EvalPiecewiseTimeseriesApi extends runtime.BaseAPI {

    /**
     * Eval Piecewise Timeseries
     */
    async getEvalpiecewisetimeseriesRaw(requestParameters: GetEvalpiecewisetimeseriesRequest): Promise<runtime.ApiResponse<Model4>> {
        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling getEvalpiecewisetimeseries.');
        }

        if (requestParameters.timeSeriesId === null || requestParameters.timeSeriesId === undefined) {
            throw new runtime.RequiredError('timeSeriesId','Required parameter requestParameters.timeSeriesId was null or undefined when calling getEvalpiecewisetimeseries.');
        }

        if (requestParameters.interpolation === null || requestParameters.interpolation === undefined) {
            throw new runtime.RequiredError('interpolation','Required parameter requestParameters.interpolation was null or undefined when calling getEvalpiecewisetimeseries.');
        }

        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        if (requestParameters.timeSeriesId !== undefined) {
            queryParameters['timeSeriesId'] = requestParameters.timeSeriesId;
        }

        if (requestParameters.interpolation !== undefined) {
            queryParameters['interpolation'] = requestParameters.interpolation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/evalPiecewiseTimeseries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model4FromJSON(jsonValue));
    }

    /**
     * Eval Piecewise Timeseries
     */
    async getEvalpiecewisetimeseries(requestParameters: GetEvalpiecewisetimeseriesRequest): Promise<Model4> {
        const response = await this.getEvalpiecewisetimeseriesRaw(requestParameters);
        return await response.value();
    }

}
