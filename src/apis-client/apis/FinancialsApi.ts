/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Failure,
    FailureFromJSON,
    FailureToJSON,
    LeaseRate,
    LeaseRateFromJSON,
    LeaseRateToJSON,
    LeaseRateInput,
    LeaseRateInputFromJSON,
    LeaseRateInputToJSON,
    Model49,
    Model49FromJSON,
    Model49ToJSON,
    MoveCost,
    MoveCostFromJSON,
    MoveCostToJSON,
    MoveCostInput,
    MoveCostInputFromJSON,
    MoveCostInputToJSON,
    PublicStorageRate,
    PublicStorageRateFromJSON,
    PublicStorageRateToJSON,
    StatusCost,
    StatusCostFromJSON,
    StatusCostToJSON,
    StatusCostInput,
    StatusCostInputFromJSON,
    StatusCostInputToJSON,
    StorageRateInput,
    StorageRateInputFromJSON,
    StorageRateInputToJSON,
} from '../models';

export interface DeleteFinancialsCostsCostidRequest {
    costId: string;
}

export interface GetFinancialsCostsRequest {
    statusId?: string;
}

export interface GetFinancialsLeaseRequest {
    customerId?: string;
}

export interface GetFinancialsMoveRequest {
    moveId?: string;
}

export interface GetFinancialsStorageRequest {
    depotId?: string;
}

export interface PatchFinancialsCostsCostidRequest {
    costId: string;
    body?: StatusCostInput;
}

export interface PostFinancialsCostsRequest {
    body?: StatusCostInput;
}

export interface PostFinancialsLeaseRequest {
    body?: LeaseRateInput;
}

export interface PostFinancialsMoveRequest {
    body?: MoveCostInput;
}

export interface PostFinancialsStorageRequest {
    body?: StorageRateInput;
}

/**
 * 
 */
export class FinancialsApi extends runtime.BaseAPI {

    /**
     * FIXME
     */
    async deleteFinancialsCostsCostidRaw(requestParameters: DeleteFinancialsCostsCostidRequest): Promise<runtime.ApiResponse<Model49>> {
        if (requestParameters.costId === null || requestParameters.costId === undefined) {
            throw new runtime.RequiredError('costId','Required parameter requestParameters.costId was null or undefined when calling deleteFinancialsCostsCostid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/financials/costs/{costId}`.replace(`{${"costId"}}`, encodeURIComponent(String(requestParameters.costId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model49FromJSON(jsonValue));
    }

    /**
     * FIXME
     */
    async deleteFinancialsCostsCostid(requestParameters: DeleteFinancialsCostsCostidRequest): Promise<Model49> {
        const response = await this.deleteFinancialsCostsCostidRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async getFinancialsCostsRaw(requestParameters: GetFinancialsCostsRequest): Promise<runtime.ApiResponse<Array<StatusCost>>> {
        const queryParameters: any = {};

        if (requestParameters.statusId !== undefined) {
            queryParameters['statusId'] = requestParameters.statusId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/financials/costs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StatusCostFromJSON));
    }

    /**
     * FIXME
     */
    async getFinancialsCosts(requestParameters: GetFinancialsCostsRequest): Promise<Array<StatusCost>> {
        const response = await this.getFinancialsCostsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get lease rate
     */
    async getFinancialsLeaseRaw(requestParameters: GetFinancialsLeaseRequest): Promise<runtime.ApiResponse<Array<LeaseRate>>> {
        const queryParameters: any = {};

        if (requestParameters.customerId !== undefined) {
            queryParameters['customerId'] = requestParameters.customerId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/financials/lease`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LeaseRateFromJSON));
    }

    /**
     * get lease rate
     */
    async getFinancialsLease(requestParameters: GetFinancialsLeaseRequest): Promise<Array<LeaseRate>> {
        const response = await this.getFinancialsLeaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get move cost
     */
    async getFinancialsMoveRaw(requestParameters: GetFinancialsMoveRequest): Promise<runtime.ApiResponse<Array<MoveCost>>> {
        const queryParameters: any = {};

        if (requestParameters.moveId !== undefined) {
            queryParameters['moveId'] = requestParameters.moveId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/financials/move`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MoveCostFromJSON));
    }

    /**
     * get move cost
     */
    async getFinancialsMove(requestParameters: GetFinancialsMoveRequest): Promise<Array<MoveCost>> {
        const response = await this.getFinancialsMoveRaw(requestParameters);
        return await response.value();
    }

    /**
     * get storange rate
     */
    async getFinancialsStorageRaw(requestParameters: GetFinancialsStorageRequest): Promise<runtime.ApiResponse<Array<PublicStorageRate>>> {
        const queryParameters: any = {};

        if (requestParameters.depotId !== undefined) {
            queryParameters['depotId'] = requestParameters.depotId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/financials/storage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicStorageRateFromJSON));
    }

    /**
     * get storange rate
     */
    async getFinancialsStorage(requestParameters: GetFinancialsStorageRequest): Promise<Array<PublicStorageRate>> {
        const response = await this.getFinancialsStorageRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async patchFinancialsCostsCostidRaw(requestParameters: PatchFinancialsCostsCostidRequest): Promise<runtime.ApiResponse<StatusCost>> {
        if (requestParameters.costId === null || requestParameters.costId === undefined) {
            throw new runtime.RequiredError('costId','Required parameter requestParameters.costId was null or undefined when calling patchFinancialsCostsCostid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/financials/costs/{costId}`.replace(`{${"costId"}}`, encodeURIComponent(String(requestParameters.costId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StatusCostInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusCostFromJSON(jsonValue));
    }

    /**
     * FIXME
     */
    async patchFinancialsCostsCostid(requestParameters: PatchFinancialsCostsCostidRequest): Promise<StatusCost> {
        const response = await this.patchFinancialsCostsCostidRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async postFinancialsCostsRaw(requestParameters: PostFinancialsCostsRequest): Promise<runtime.ApiResponse<StatusCost>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/financials/costs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StatusCostInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusCostFromJSON(jsonValue));
    }

    /**
     * FIXME
     */
    async postFinancialsCosts(requestParameters: PostFinancialsCostsRequest): Promise<StatusCost> {
        const response = await this.postFinancialsCostsRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async postFinancialsLeaseRaw(requestParameters: PostFinancialsLeaseRequest): Promise<runtime.ApiResponse<LeaseRate>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/financials/lease`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeaseRateInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaseRateFromJSON(jsonValue));
    }

    /**
     * FIXME
     */
    async postFinancialsLease(requestParameters: PostFinancialsLeaseRequest): Promise<LeaseRate> {
        const response = await this.postFinancialsLeaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async postFinancialsMoveRaw(requestParameters: PostFinancialsMoveRequest): Promise<runtime.ApiResponse<MoveCost>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/financials/move`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MoveCostInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MoveCostFromJSON(jsonValue));
    }

    /**
     * FIXME
     */
    async postFinancialsMove(requestParameters: PostFinancialsMoveRequest): Promise<MoveCost> {
        const response = await this.postFinancialsMoveRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async postFinancialsStorageRaw(requestParameters: PostFinancialsStorageRequest): Promise<runtime.ApiResponse<PublicStorageRate>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/financials/storage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StorageRateInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicStorageRateFromJSON(jsonValue));
    }

    /**
     * FIXME
     */
    async postFinancialsStorage(requestParameters: PostFinancialsStorageRequest): Promise<PublicStorageRate> {
        const response = await this.postFinancialsStorageRaw(requestParameters);
        return await response.value();
    }

}
