/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EquipmentLeaseContractInput,
    EquipmentLeaseContractInputFromJSON,
    EquipmentLeaseContractInputToJSON,
    EquipmentLeaseContractWithLease,
    EquipmentLeaseContractWithLeaseFromJSON,
    EquipmentLeaseContractWithLeaseToJSON,
    EquipmentMoveInput,
    EquipmentMoveInputFromJSON,
    EquipmentMoveInputToJSON,
    EquipmentMoveWithStatus,
    EquipmentMoveWithStatusFromJSON,
    EquipmentMoveWithStatusToJSON,
    EquipmentStatus,
    EquipmentStatusFromJSON,
    EquipmentStatusToJSON,
    EquipmentStatusAvailableInput,
    EquipmentStatusAvailableInputFromJSON,
    EquipmentStatusAvailableInputToJSON,
    EquipmentStatusInput,
    EquipmentStatusInputFromJSON,
    EquipmentStatusInputToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
    PatchEquipmentStatusInput,
    PatchEquipmentStatusInputFromJSON,
    PatchEquipmentStatusInputToJSON,
    PublicEquipment,
    PublicEquipmentFromJSON,
    PublicEquipmentToJSON,
} from '../models';

export interface GetEquipmentsRequest {
    status?: Array<string>;
    statusFrom?: string;
    statusTo?: string;
    startStatusAtLocationId?: Array<string>;
    endStatusAtLocationId?: string;
}

export interface GetEquipmentsEquipmentidRequest {
    equipmentId: string;
}

export interface GetEquipmentsEquipmentidLeasecontractsRequest {
    equipmentId: string;
}

export interface GetEquipmentsEquipmentidMovesRequest {
    equipmentId: string;
}

export interface PatchEquipmentsEquipmentidMoveMoveidRequest {
    equipmentId: string;
    moveId: string;
    body?: EquipmentMoveInput;
}

export interface PatchEquipmentsEquipmentidStatusStatusidRequest {
    equipmentId: string;
    statusId: string;
    throughLease?: number;
    body?: PatchEquipmentStatusInput;
}

export interface PostEquipmentsEquipmentidContractRequest {
    equipmentId: string;
    body?: EquipmentLeaseContractInput;
}

export interface PostEquipmentsEquipmentidMoveRequest {
    equipmentId: string;
    body?: EquipmentMoveInput;
}

export interface PostEquipmentsEquipmentidStatusRequest {
    equipmentId: string;
    body?: EquipmentStatusInput;
}

export interface PostEquipmentsEquipmentidStatusAvailableRequest {
    equipmentId: string;
    body?: EquipmentStatusAvailableInput;
}

/**
 * 
 */
export class EquipmentsApi extends runtime.BaseAPI {

    /**
     * get equipments
     */
    async getEquipmentsRaw(requestParameters: GetEquipmentsRequest): Promise<runtime.ApiResponse<Array<PublicEquipment>>> {
        const queryParameters: any = {};

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.statusFrom !== undefined) {
            queryParameters['statusFrom'] = requestParameters.statusFrom;
        }

        if (requestParameters.statusTo !== undefined) {
            queryParameters['statusTo'] = requestParameters.statusTo;
        }

        if (requestParameters.startStatusAtLocationId) {
            queryParameters['startStatusAtLocationId'] = requestParameters.startStatusAtLocationId;
        }

        if (requestParameters.endStatusAtLocationId !== undefined) {
            queryParameters['endStatusAtLocationId'] = requestParameters.endStatusAtLocationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/equipments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicEquipmentFromJSON));
    }

    /**
     * get equipments
     */
    async getEquipments(requestParameters: GetEquipmentsRequest): Promise<Array<PublicEquipment>> {
        const response = await this.getEquipmentsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get equipment
     */
    async getEquipmentsEquipmentidRaw(requestParameters: GetEquipmentsEquipmentidRequest): Promise<runtime.ApiResponse<PublicEquipment>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling getEquipmentsEquipmentid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/equipments/{equipmentId}`.replace(`{${"equipmentId"}}`, encodeURIComponent(String(requestParameters.equipmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicEquipmentFromJSON(jsonValue));
    }

    /**
     * get equipment
     */
    async getEquipmentsEquipmentid(requestParameters: GetEquipmentsEquipmentidRequest): Promise<PublicEquipment> {
        const response = await this.getEquipmentsEquipmentidRaw(requestParameters);
        return await response.value();
    }

    /**
     * get equipment leases
     */
    async getEquipmentsEquipmentidLeasecontractsRaw(requestParameters: GetEquipmentsEquipmentidLeasecontractsRequest): Promise<runtime.ApiResponse<Array<EquipmentLeaseContractWithLease>>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling getEquipmentsEquipmentidLeasecontracts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/equipments/{equipmentId}/leasecontracts`.replace(`{${"equipmentId"}}`, encodeURIComponent(String(requestParameters.equipmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EquipmentLeaseContractWithLeaseFromJSON));
    }

    /**
     * get equipment leases
     */
    async getEquipmentsEquipmentidLeasecontracts(requestParameters: GetEquipmentsEquipmentidLeasecontractsRequest): Promise<Array<EquipmentLeaseContractWithLease>> {
        const response = await this.getEquipmentsEquipmentidLeasecontractsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get equipment
     */
    async getEquipmentsEquipmentidMovesRaw(requestParameters: GetEquipmentsEquipmentidMovesRequest): Promise<runtime.ApiResponse<Array<EquipmentMoveWithStatus>>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling getEquipmentsEquipmentidMoves.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/equipments/{equipmentId}/moves`.replace(`{${"equipmentId"}}`, encodeURIComponent(String(requestParameters.equipmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EquipmentMoveWithStatusFromJSON));
    }

    /**
     * get equipment
     */
    async getEquipmentsEquipmentidMoves(requestParameters: GetEquipmentsEquipmentidMovesRequest): Promise<Array<EquipmentMoveWithStatus>> {
        const response = await this.getEquipmentsEquipmentidMovesRaw(requestParameters);
        return await response.value();
    }

    /**
     * update equipment move
     */
    async patchEquipmentsEquipmentidMoveMoveidRaw(requestParameters: PatchEquipmentsEquipmentidMoveMoveidRequest): Promise<runtime.ApiResponse<EquipmentMoveWithStatus>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling patchEquipmentsEquipmentidMoveMoveid.');
        }

        if (requestParameters.moveId === null || requestParameters.moveId === undefined) {
            throw new runtime.RequiredError('moveId','Required parameter requestParameters.moveId was null or undefined when calling patchEquipmentsEquipmentidMoveMoveid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/equipments/{equipmentId}/move/{moveId}`.replace(`{${"equipmentId"}}`, encodeURIComponent(String(requestParameters.equipmentId))).replace(`{${"moveId"}}`, encodeURIComponent(String(requestParameters.moveId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EquipmentMoveInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentMoveWithStatusFromJSON(jsonValue));
    }

    /**
     * update equipment move
     */
    async patchEquipmentsEquipmentidMoveMoveid(requestParameters: PatchEquipmentsEquipmentidMoveMoveidRequest): Promise<EquipmentMoveWithStatus> {
        const response = await this.patchEquipmentsEquipmentidMoveMoveidRaw(requestParameters);
        return await response.value();
    }

    /**
     * create equipment status
     */
    async patchEquipmentsEquipmentidStatusStatusidRaw(requestParameters: PatchEquipmentsEquipmentidStatusStatusidRequest): Promise<runtime.ApiResponse<EquipmentStatus>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling patchEquipmentsEquipmentidStatusStatusid.');
        }

        if (requestParameters.statusId === null || requestParameters.statusId === undefined) {
            throw new runtime.RequiredError('statusId','Required parameter requestParameters.statusId was null or undefined when calling patchEquipmentsEquipmentidStatusStatusid.');
        }

        const queryParameters: any = {};

        if (requestParameters.throughLease !== undefined) {
            queryParameters['throughLease'] = requestParameters.throughLease;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/equipments/{equipmentId}/status/{statusId}`.replace(`{${"equipmentId"}}`, encodeURIComponent(String(requestParameters.equipmentId))).replace(`{${"statusId"}}`, encodeURIComponent(String(requestParameters.statusId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchEquipmentStatusInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentStatusFromJSON(jsonValue));
    }

    /**
     * create equipment status
     */
    async patchEquipmentsEquipmentidStatusStatusid(requestParameters: PatchEquipmentsEquipmentidStatusStatusidRequest): Promise<EquipmentStatus> {
        const response = await this.patchEquipmentsEquipmentidStatusStatusidRaw(requestParameters);
        return await response.value();
    }

    /**
     * create equipment lease contract
     */
    async postEquipmentsEquipmentidContractRaw(requestParameters: PostEquipmentsEquipmentidContractRequest): Promise<runtime.ApiResponse<EquipmentLeaseContractWithLease>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling postEquipmentsEquipmentidContract.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/equipments/{equipmentId}/contract`.replace(`{${"equipmentId"}}`, encodeURIComponent(String(requestParameters.equipmentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EquipmentLeaseContractInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentLeaseContractWithLeaseFromJSON(jsonValue));
    }

    /**
     * create equipment lease contract
     */
    async postEquipmentsEquipmentidContract(requestParameters: PostEquipmentsEquipmentidContractRequest): Promise<EquipmentLeaseContractWithLease> {
        const response = await this.postEquipmentsEquipmentidContractRaw(requestParameters);
        return await response.value();
    }

    /**
     * create equipment move
     */
    async postEquipmentsEquipmentidMoveRaw(requestParameters: PostEquipmentsEquipmentidMoveRequest): Promise<runtime.ApiResponse<EquipmentMoveWithStatus>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling postEquipmentsEquipmentidMove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/equipments/{equipmentId}/move`.replace(`{${"equipmentId"}}`, encodeURIComponent(String(requestParameters.equipmentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EquipmentMoveInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentMoveWithStatusFromJSON(jsonValue));
    }

    /**
     * create equipment move
     */
    async postEquipmentsEquipmentidMove(requestParameters: PostEquipmentsEquipmentidMoveRequest): Promise<EquipmentMoveWithStatus> {
        const response = await this.postEquipmentsEquipmentidMoveRaw(requestParameters);
        return await response.value();
    }

    /**
     * create equipment status
     */
    async postEquipmentsEquipmentidStatusRaw(requestParameters: PostEquipmentsEquipmentidStatusRequest): Promise<runtime.ApiResponse<EquipmentStatus>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling postEquipmentsEquipmentidStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/equipments/{equipmentId}/status`.replace(`{${"equipmentId"}}`, encodeURIComponent(String(requestParameters.equipmentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EquipmentStatusInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentStatusFromJSON(jsonValue));
    }

    /**
     * create equipment status
     */
    async postEquipmentsEquipmentidStatus(requestParameters: PostEquipmentsEquipmentidStatusRequest): Promise<EquipmentStatus> {
        const response = await this.postEquipmentsEquipmentidStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * create equipment available status
     */
    async postEquipmentsEquipmentidStatusAvailableRaw(requestParameters: PostEquipmentsEquipmentidStatusAvailableRequest): Promise<runtime.ApiResponse<PublicEquipment>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling postEquipmentsEquipmentidStatusAvailable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/equipments/{equipmentId}/status/available`.replace(`{${"equipmentId"}}`, encodeURIComponent(String(requestParameters.equipmentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EquipmentStatusAvailableInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicEquipmentFromJSON(jsonValue));
    }

    /**
     * create equipment available status
     */
    async postEquipmentsEquipmentidStatusAvailable(requestParameters: PostEquipmentsEquipmentidStatusAvailableRequest): Promise<PublicEquipment> {
        const response = await this.postEquipmentsEquipmentidStatusAvailableRaw(requestParameters);
        return await response.value();
    }

}
