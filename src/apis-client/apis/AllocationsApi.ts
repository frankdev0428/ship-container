/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AllocationAnalyticsParams,
    AllocationAnalyticsParamsFromJSON,
    AllocationAnalyticsParamsToJSON,
    BasePublicAllocation,
    BasePublicAllocationFromJSON,
    BasePublicAllocationToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
    Model40,
    Model40FromJSON,
    Model40ToJSON,
    PublicContainer,
    PublicContainerFromJSON,
    PublicContainerToJSON,
    PublicEquipmentLeaseContract,
    PublicEquipmentLeaseContractFromJSON,
    PublicEquipmentLeaseContractToJSON,
} from '../models';

export interface GetAllocationsRequest {
    includeContainerData?: number;
    disableFilterDuplicates?: number;
    equipmentLeaseContractIds?: Array<string>;
}

export interface GetAllocationsContaineridRequest {
    containerId: string;
    equipmentLeaseContractId?: string;
    limit?: number;
    disableFilterDuplicates?: number;
}

export interface PostAllocationsAnalyticsRequest {
    body?: AllocationAnalyticsParams;
}

export interface PostAllocationsTimeseriesRequest {
    body?: AllocationAnalyticsParams;
}

/**
 * 
 */
export class AllocationsApi extends runtime.BaseAPI {

    /**
     * get equipments
     */
    async getAllocationsRaw(requestParameters: GetAllocationsRequest): Promise<runtime.ApiResponse<Array<PublicEquipmentLeaseContract>>> {
        const queryParameters: any = {};

        if (requestParameters.includeContainerData !== undefined) {
            queryParameters['includeContainerData'] = requestParameters.includeContainerData;
        }

        if (requestParameters.disableFilterDuplicates !== undefined) {
            queryParameters['disableFilterDuplicates'] = requestParameters.disableFilterDuplicates;
        }

        if (requestParameters.equipmentLeaseContractIds) {
            queryParameters['equipmentLeaseContractIds'] = requestParameters.equipmentLeaseContractIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/allocations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicEquipmentLeaseContractFromJSON));
    }

    /**
     * get equipments
     */
    async getAllocations(requestParameters: GetAllocationsRequest): Promise<Array<PublicEquipmentLeaseContract>> {
        const response = await this.getAllocationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get equipments
     */
    async getAllocationsContaineridRaw(requestParameters: GetAllocationsContaineridRequest): Promise<runtime.ApiResponse<PublicContainer>> {
        if (requestParameters.containerId === null || requestParameters.containerId === undefined) {
            throw new runtime.RequiredError('containerId','Required parameter requestParameters.containerId was null or undefined when calling getAllocationsContainerid.');
        }

        const queryParameters: any = {};

        if (requestParameters.equipmentLeaseContractId !== undefined) {
            queryParameters['equipmentLeaseContractId'] = requestParameters.equipmentLeaseContractId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.disableFilterDuplicates !== undefined) {
            queryParameters['disableFilterDuplicates'] = requestParameters.disableFilterDuplicates;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/allocations/{containerId}`.replace(`{${"containerId"}}`, encodeURIComponent(String(requestParameters.containerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicContainerFromJSON(jsonValue));
    }

    /**
     * get equipments
     */
    async getAllocationsContainerid(requestParameters: GetAllocationsContaineridRequest): Promise<PublicContainer> {
        const response = await this.getAllocationsContaineridRaw(requestParameters);
        return await response.value();
    }

    /**
     * get allocation analytics
     */
    async postAllocationsAnalyticsRaw(requestParameters: PostAllocationsAnalyticsRequest): Promise<runtime.ApiResponse<Array<BasePublicAllocation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/allocations/analytics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AllocationAnalyticsParamsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BasePublicAllocationFromJSON));
    }

    /**
     * get allocation analytics
     */
    async postAllocationsAnalytics(requestParameters: PostAllocationsAnalyticsRequest): Promise<Array<BasePublicAllocation>> {
        const response = await this.postAllocationsAnalyticsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get allocation timeseries
     */
    async postAllocationsTimeseriesRaw(requestParameters: PostAllocationsTimeseriesRequest): Promise<runtime.ApiResponse<Array<Model40>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/allocations/timeseries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AllocationAnalyticsParamsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(Model40FromJSON));
    }

    /**
     * get allocation timeseries
     */
    async postAllocationsTimeseries(requestParameters: PostAllocationsTimeseriesRequest): Promise<Array<Model40>> {
        const response = await this.postAllocationsTimeseriesRaw(requestParameters);
        return await response.value();
    }

}
