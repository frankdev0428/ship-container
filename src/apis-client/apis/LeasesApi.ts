/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EquipmentLeaseContractInput,
    EquipmentLeaseContractInputFromJSON,
    EquipmentLeaseContractInputToJSON,
    EquipmentLeaseInput,
    EquipmentLeaseInputFromJSON,
    EquipmentLeaseInputToJSON,
    EquipmentLeasePatchInput,
    EquipmentLeasePatchInputFromJSON,
    EquipmentLeasePatchInputToJSON,
    EquipmentLeaseStatus,
    EquipmentLeaseStatusFromJSON,
    EquipmentLeaseStatusToJSON,
    EquipmentLeaseStatusInput,
    EquipmentLeaseStatusInputFromJSON,
    EquipmentLeaseStatusInputToJSON,
    EquipmentLeasesPublic,
    EquipmentLeasesPublicFromJSON,
    EquipmentLeasesPublicToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
    LeaseVisibilityContract,
    LeaseVisibilityContractFromJSON,
    LeaseVisibilityContractToJSON,
    LeaseVisibilityInput,
    LeaseVisibilityInputFromJSON,
    LeaseVisibilityInputToJSON,
    LeaseVisibilityPatchInput,
    LeaseVisibilityPatchInputFromJSON,
    LeaseVisibilityPatchInputToJSON,
    Model44,
    Model44FromJSON,
    Model44ToJSON,
    Model45,
    Model45FromJSON,
    Model45ToJSON,
} from '../models';

export interface DeleteLeasesRequest {
    orderId: string;
}

export interface GetLeasesRequest {
    customerId?: string;
    status?: string;
}

export interface GetLeasesVisibilitycontractRequest {
    equipmentLeaseContractId?: string;
    leaseVisibilityContractId?: string;
}

export interface PatchLeasesEquipmentleasecontractidVisibilitycontractLeasevisibilitycontractidRequest {
    equipmentLeaseContractId: string;
    leaseVisibilityContractId: string;
    body?: LeaseVisibilityPatchInput;
}

export interface PatchLeasesOrderidRequest {
    orderId: string;
    body?: EquipmentLeasePatchInput;
}

export interface PostLeasesRequest {
    body?: EquipmentLeaseInput;
}

export interface PostLeasesEquipmentleasecontractidToggleRequest {
    equipmentLeaseContractId: string;
}

export interface PostLeasesEquipmentleasecontractidVisibilitycontractRequest {
    equipmentLeaseContractId: string;
    body?: LeaseVisibilityInput;
}

export interface PostLeasesOrderidBookingconfirmationemailRequest {
    orderId: string;
}

export interface PostLeasesOrderidStatusRequest {
    orderId: string;
    body?: EquipmentLeaseStatusInput;
}

/**
 * 
 */
export class LeasesApi extends runtime.BaseAPI {

    /**
     * Delete equipment leases
     */
    async deleteLeasesRaw(requestParameters: DeleteLeasesRequest): Promise<runtime.ApiResponse<Array<EquipmentLeaseContractInput>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteLeases.');
        }

        const queryParameters: any = {};

        if (requestParameters.orderId !== undefined) {
            queryParameters['orderId'] = requestParameters.orderId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/leases`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EquipmentLeaseContractInputFromJSON));
    }

    /**
     * Delete equipment leases
     */
    async deleteLeases(requestParameters: DeleteLeasesRequest): Promise<Array<EquipmentLeaseContractInput>> {
        const response = await this.deleteLeasesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get equipment leases
     */
    async getLeasesRaw(requestParameters: GetLeasesRequest): Promise<runtime.ApiResponse<Array<EquipmentLeasesPublic>>> {
        const queryParameters: any = {};

        if (requestParameters.customerId !== undefined) {
            queryParameters['customerId'] = requestParameters.customerId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/leases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EquipmentLeasesPublicFromJSON));
    }

    /**
     * get equipment leases
     */
    async getLeases(requestParameters: GetLeasesRequest): Promise<Array<EquipmentLeasesPublic>> {
        const response = await this.getLeasesRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async getLeasesVisibilitycontractRaw(requestParameters: GetLeasesVisibilitycontractRequest): Promise<runtime.ApiResponse<Array<LeaseVisibilityContract>>> {
        const queryParameters: any = {};

        if (requestParameters.equipmentLeaseContractId !== undefined) {
            queryParameters['equipmentLeaseContractId'] = requestParameters.equipmentLeaseContractId;
        }

        if (requestParameters.leaseVisibilityContractId !== undefined) {
            queryParameters['leaseVisibilityContractId'] = requestParameters.leaseVisibilityContractId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/leases/visibilitycontract`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LeaseVisibilityContractFromJSON));
    }

    /**
     * FIXME
     */
    async getLeasesVisibilitycontract(requestParameters: GetLeasesVisibilitycontractRequest): Promise<Array<LeaseVisibilityContract>> {
        const response = await this.getLeasesVisibilitycontractRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async patchLeasesEquipmentleasecontractidVisibilitycontractLeasevisibilitycontractidRaw(requestParameters: PatchLeasesEquipmentleasecontractidVisibilitycontractLeasevisibilitycontractidRequest): Promise<runtime.ApiResponse<Array<LeaseVisibilityContract>>> {
        if (requestParameters.equipmentLeaseContractId === null || requestParameters.equipmentLeaseContractId === undefined) {
            throw new runtime.RequiredError('equipmentLeaseContractId','Required parameter requestParameters.equipmentLeaseContractId was null or undefined when calling patchLeasesEquipmentleasecontractidVisibilitycontractLeasevisibilitycontractid.');
        }

        if (requestParameters.leaseVisibilityContractId === null || requestParameters.leaseVisibilityContractId === undefined) {
            throw new runtime.RequiredError('leaseVisibilityContractId','Required parameter requestParameters.leaseVisibilityContractId was null or undefined when calling patchLeasesEquipmentleasecontractidVisibilitycontractLeasevisibilitycontractid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/leases/{equipmentLeaseContractId}/visibilitycontract/{leaseVisibilityContractId}`.replace(`{${"equipmentLeaseContractId"}}`, encodeURIComponent(String(requestParameters.equipmentLeaseContractId))).replace(`{${"leaseVisibilityContractId"}}`, encodeURIComponent(String(requestParameters.leaseVisibilityContractId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LeaseVisibilityPatchInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LeaseVisibilityContractFromJSON));
    }

    /**
     * FIXME
     */
    async patchLeasesEquipmentleasecontractidVisibilitycontractLeasevisibilitycontractid(requestParameters: PatchLeasesEquipmentleasecontractidVisibilitycontractLeasevisibilitycontractidRequest): Promise<Array<LeaseVisibilityContract>> {
        const response = await this.patchLeasesEquipmentleasecontractidVisibilitycontractLeasevisibilitycontractidRaw(requestParameters);
        return await response.value();
    }

    /**
     * create lease
     */
    async patchLeasesOrderidRaw(requestParameters: PatchLeasesOrderidRequest): Promise<runtime.ApiResponse<EquipmentLeasesPublic>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling patchLeasesOrderid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/leases/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EquipmentLeasePatchInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentLeasesPublicFromJSON(jsonValue));
    }

    /**
     * create lease
     */
    async patchLeasesOrderid(requestParameters: PatchLeasesOrderidRequest): Promise<EquipmentLeasesPublic> {
        const response = await this.patchLeasesOrderidRaw(requestParameters);
        return await response.value();
    }

    /**
     * create lease
     */
    async postLeasesRaw(requestParameters: PostLeasesRequest): Promise<runtime.ApiResponse<EquipmentLeasesPublic>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/leases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EquipmentLeaseInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentLeasesPublicFromJSON(jsonValue));
    }

    /**
     * create lease
     */
    async postLeases(requestParameters: PostLeasesRequest): Promise<EquipmentLeasesPublic> {
        const response = await this.postLeasesRaw(requestParameters);
        return await response.value();
    }

    /**
     * toggle lease status
     */
    async postLeasesEquipmentleasecontractidToggleRaw(requestParameters: PostLeasesEquipmentleasecontractidToggleRequest): Promise<runtime.ApiResponse<Model44>> {
        if (requestParameters.equipmentLeaseContractId === null || requestParameters.equipmentLeaseContractId === undefined) {
            throw new runtime.RequiredError('equipmentLeaseContractId','Required parameter requestParameters.equipmentLeaseContractId was null or undefined when calling postLeasesEquipmentleasecontractidToggle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/leases/{equipmentLeaseContractId}/toggle`.replace(`{${"equipmentLeaseContractId"}}`, encodeURIComponent(String(requestParameters.equipmentLeaseContractId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model44FromJSON(jsonValue));
    }

    /**
     * toggle lease status
     */
    async postLeasesEquipmentleasecontractidToggle(requestParameters: PostLeasesEquipmentleasecontractidToggleRequest): Promise<Model44> {
        const response = await this.postLeasesEquipmentleasecontractidToggleRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async postLeasesEquipmentleasecontractidVisibilitycontractRaw(requestParameters: PostLeasesEquipmentleasecontractidVisibilitycontractRequest): Promise<runtime.ApiResponse<LeaseVisibilityContract>> {
        if (requestParameters.equipmentLeaseContractId === null || requestParameters.equipmentLeaseContractId === undefined) {
            throw new runtime.RequiredError('equipmentLeaseContractId','Required parameter requestParameters.equipmentLeaseContractId was null or undefined when calling postLeasesEquipmentleasecontractidVisibilitycontract.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/leases/{equipmentLeaseContractId}/visibilitycontract`.replace(`{${"equipmentLeaseContractId"}}`, encodeURIComponent(String(requestParameters.equipmentLeaseContractId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeaseVisibilityInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaseVisibilityContractFromJSON(jsonValue));
    }

    /**
     * FIXME
     */
    async postLeasesEquipmentleasecontractidVisibilitycontract(requestParameters: PostLeasesEquipmentleasecontractidVisibilitycontractRequest): Promise<LeaseVisibilityContract> {
        const response = await this.postLeasesEquipmentleasecontractidVisibilitycontractRaw(requestParameters);
        return await response.value();
    }

    /**
     * Trigger sending a booking confirmation
     */
    async postLeasesOrderidBookingconfirmationemailRaw(requestParameters: PostLeasesOrderidBookingconfirmationemailRequest): Promise<runtime.ApiResponse<Model45>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling postLeasesOrderidBookingconfirmationemail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/leases/{orderId}/bookingConfirmationEmail`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model45FromJSON(jsonValue));
    }

    /**
     * Trigger sending a booking confirmation
     */
    async postLeasesOrderidBookingconfirmationemail(requestParameters: PostLeasesOrderidBookingconfirmationemailRequest): Promise<Model45> {
        const response = await this.postLeasesOrderidBookingconfirmationemailRaw(requestParameters);
        return await response.value();
    }

    /**
     * create lease status
     */
    async postLeasesOrderidStatusRaw(requestParameters: PostLeasesOrderidStatusRequest): Promise<runtime.ApiResponse<EquipmentLeaseStatus>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling postLeasesOrderidStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/leases/{orderId}/status`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EquipmentLeaseStatusInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentLeaseStatusFromJSON(jsonValue));
    }

    /**
     * create lease status
     */
    async postLeasesOrderidStatus(requestParameters: PostLeasesOrderidStatusRequest): Promise<EquipmentLeaseStatus> {
        const response = await this.postLeasesOrderidStatusRaw(requestParameters);
        return await response.value();
    }

}
