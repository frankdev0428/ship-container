/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ConfigurationInput,
    ConfigurationInputFromJSON,
    ConfigurationInputToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
    Model8,
    Model8FromJSON,
    Model8ToJSON,
    Model9,
    Model9FromJSON,
    Model9ToJSON,
    NotificationConfiguration,
    NotificationConfigurationFromJSON,
    NotificationConfigurationToJSON,
    PublicFilter,
    PublicFilterFromJSON,
    PublicFilterToJSON,
} from '../models';

export interface GetConfigurationsFiltersRequest {
    delivery?: string;
    muteAll?: number;
    entityId?: string;
    entityType?: string;
    criterionId?: string;
    subCase?: string;
}

export interface GetConfigurationsFiltersAdminRequest {
    delivery?: string;
    userId?: string;
    muteAll?: number;
    entityId?: string;
    entityType?: string;
    criterionId?: string;
    subCase?: string;
}

export interface GetConfigurationsUsersRequest {
    userId?: string;
}

export interface PostConfigurationsFiltersRequest {
    body?: Model8;
}

export interface PostConfigurationsNotificationsRequest {
    body?: ConfigurationInput;
}

export interface PutConfigurationsFiltersRequest {
    body?: Model8;
}

export interface PutConfigurationsNotificationsRequest {
    body?: ConfigurationInput;
}

/**
 * 
 */
export class ConfigurationsApi extends runtime.BaseAPI {

    /**
     * get config
     */
    async deleteConfigurationsNotificationsRaw(): Promise<runtime.ApiResponse<Model9>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/configurations/notifications`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model9FromJSON(jsonValue));
    }

    /**
     * get config
     */
    async deleteConfigurationsNotifications(): Promise<Model9> {
        const response = await this.deleteConfigurationsNotificationsRaw();
        return await response.value();
    }

    /**
     * get config
     */
    async getConfigurationsFiltersRaw(requestParameters: GetConfigurationsFiltersRequest): Promise<runtime.ApiResponse<Array<PublicFilter>>> {
        const queryParameters: any = {};

        if (requestParameters.delivery !== undefined) {
            queryParameters['delivery'] = requestParameters.delivery;
        }

        if (requestParameters.muteAll !== undefined) {
            queryParameters['muteAll'] = requestParameters.muteAll;
        }

        if (requestParameters.entityId !== undefined) {
            queryParameters['entityId'] = requestParameters.entityId;
        }

        if (requestParameters.entityType !== undefined) {
            queryParameters['entityType'] = requestParameters.entityType;
        }

        if (requestParameters.criterionId !== undefined) {
            queryParameters['criterionId'] = requestParameters.criterionId;
        }

        if (requestParameters.subCase !== undefined) {
            queryParameters['subCase'] = requestParameters.subCase;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/configurations/filters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicFilterFromJSON));
    }

    /**
     * get config
     */
    async getConfigurationsFilters(requestParameters: GetConfigurationsFiltersRequest): Promise<Array<PublicFilter>> {
        const response = await this.getConfigurationsFiltersRaw(requestParameters);
        return await response.value();
    }

    /**
     * get config
     */
    async getConfigurationsFiltersAdminRaw(requestParameters: GetConfigurationsFiltersAdminRequest): Promise<runtime.ApiResponse<Array<PublicFilter>>> {
        const queryParameters: any = {};

        if (requestParameters.delivery !== undefined) {
            queryParameters['delivery'] = requestParameters.delivery;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.muteAll !== undefined) {
            queryParameters['muteAll'] = requestParameters.muteAll;
        }

        if (requestParameters.entityId !== undefined) {
            queryParameters['entityId'] = requestParameters.entityId;
        }

        if (requestParameters.entityType !== undefined) {
            queryParameters['entityType'] = requestParameters.entityType;
        }

        if (requestParameters.criterionId !== undefined) {
            queryParameters['criterionId'] = requestParameters.criterionId;
        }

        if (requestParameters.subCase !== undefined) {
            queryParameters['subCase'] = requestParameters.subCase;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/configurations/filters/admin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicFilterFromJSON));
    }

    /**
     * get config
     */
    async getConfigurationsFiltersAdmin(requestParameters: GetConfigurationsFiltersAdminRequest): Promise<Array<PublicFilter>> {
        const response = await this.getConfigurationsFiltersAdminRaw(requestParameters);
        return await response.value();
    }

    /**
     * get config
     */
    async getConfigurationsNotificationsRaw(): Promise<runtime.ApiResponse<NotificationConfiguration>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/configurations/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationConfigurationFromJSON(jsonValue));
    }

    /**
     * get config
     */
    async getConfigurationsNotifications(): Promise<NotificationConfiguration> {
        const response = await this.getConfigurationsNotificationsRaw();
        return await response.value();
    }

    /**
     * get config
     */
    async getConfigurationsUsersRaw(requestParameters: GetConfigurationsUsersRequest): Promise<runtime.ApiResponse<Array<NotificationConfiguration>>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/configurations/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotificationConfigurationFromJSON));
    }

    /**
     * get config
     */
    async getConfigurationsUsers(requestParameters: GetConfigurationsUsersRequest): Promise<Array<NotificationConfiguration>> {
        const response = await this.getConfigurationsUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     * add config
     */
    async postConfigurationsFiltersRaw(requestParameters: PostConfigurationsFiltersRequest): Promise<runtime.ApiResponse<PublicFilter>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/configurations/filters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: Model8ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicFilterFromJSON(jsonValue));
    }

    /**
     * add config
     */
    async postConfigurationsFilters(requestParameters: PostConfigurationsFiltersRequest): Promise<PublicFilter> {
        const response = await this.postConfigurationsFiltersRaw(requestParameters);
        return await response.value();
    }

    /**
     * add config
     */
    async postConfigurationsNotificationsRaw(requestParameters: PostConfigurationsNotificationsRequest): Promise<runtime.ApiResponse<Model9>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/configurations/notifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigurationInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model9FromJSON(jsonValue));
    }

    /**
     * add config
     */
    async postConfigurationsNotifications(requestParameters: PostConfigurationsNotificationsRequest): Promise<Model9> {
        const response = await this.postConfigurationsNotificationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * add config
     */
    async putConfigurationsFiltersRaw(requestParameters: PutConfigurationsFiltersRequest): Promise<runtime.ApiResponse<PublicFilter>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/configurations/filters`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: Model8ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicFilterFromJSON(jsonValue));
    }

    /**
     * add config
     */
    async putConfigurationsFilters(requestParameters: PutConfigurationsFiltersRequest): Promise<PublicFilter> {
        const response = await this.putConfigurationsFiltersRaw(requestParameters);
        return await response.value();
    }

    /**
     * edit config
     */
    async putConfigurationsNotificationsRaw(requestParameters: PutConfigurationsNotificationsRequest): Promise<runtime.ApiResponse<Model9>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/configurations/notifications`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigurationInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model9FromJSON(jsonValue));
    }

    /**
     * edit config
     */
    async putConfigurationsNotifications(requestParameters: PutConfigurationsNotificationsRequest): Promise<Model9> {
        const response = await this.putConfigurationsNotificationsRaw(requestParameters);
        return await response.value();
    }

}
