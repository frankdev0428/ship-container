/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Failure,
    FailureFromJSON,
    FailureToJSON,
    Model5,
    Model5FromJSON,
    Model5ToJSON,
    Model7,
    Model7FromJSON,
    Model7ToJSON,
    VisibilityState,
    VisibilityStateFromJSON,
    VisibilityStateToJSON,
    VisibilityStateInput,
    VisibilityStateInputFromJSON,
    VisibilityStateInputToJSON,
} from '../models';

export interface GetAlertsStatusesRequest {
    userId?: string;
    isUnread?: number;
}

export interface GetAlertsStatusesMineRequest {
    userId?: string;
    isUnread?: number;
}

export interface PostAlertsFilteredRequest {
    body?: Model5;
}

export interface PostAlertsStatusesRequest {
    body?: VisibilityStateInput;
}

export interface PutAlertsStatusesRequest {
    body?: VisibilityStateInput;
}

/**
 * 
 */
export class AlertsApi extends runtime.BaseAPI {

    /**
     * get config
     */
    async getAlertsStatusesRaw(requestParameters: GetAlertsStatusesRequest): Promise<runtime.ApiResponse<Array<VisibilityState>>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.isUnread !== undefined) {
            queryParameters['isUnread'] = requestParameters.isUnread;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/alerts/statuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VisibilityStateFromJSON));
    }

    /**
     * get config
     */
    async getAlertsStatuses(requestParameters: GetAlertsStatusesRequest): Promise<Array<VisibilityState>> {
        const response = await this.getAlertsStatusesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get config
     */
    async getAlertsStatusesMineRaw(requestParameters: GetAlertsStatusesMineRequest): Promise<runtime.ApiResponse<Array<VisibilityState>>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.isUnread !== undefined) {
            queryParameters['isUnread'] = requestParameters.isUnread;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/alerts/statuses/mine`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VisibilityStateFromJSON));
    }

    /**
     * get config
     */
    async getAlertsStatusesMine(requestParameters: GetAlertsStatusesMineRequest): Promise<Array<VisibilityState>> {
        const response = await this.getAlertsStatusesMineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get config
     */
    async postAlertsFilteredRaw(requestParameters: PostAlertsFilteredRequest): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/alerts/filtered`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: Model5ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get config
     */
    async postAlertsFiltered(requestParameters: PostAlertsFilteredRequest): Promise<Array<string>> {
        const response = await this.postAlertsFilteredRaw(requestParameters);
        return await response.value();
    }

    /**
     * add config
     */
    async postAlertsStatusesRaw(requestParameters: PostAlertsStatusesRequest): Promise<runtime.ApiResponse<Model7>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/alerts/statuses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VisibilityStateInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model7FromJSON(jsonValue));
    }

    /**
     * add config
     */
    async postAlertsStatuses(requestParameters: PostAlertsStatusesRequest): Promise<Model7> {
        const response = await this.postAlertsStatusesRaw(requestParameters);
        return await response.value();
    }

    /**
     * edit config
     */
    async putAlertsStatusesRaw(requestParameters: PutAlertsStatusesRequest): Promise<runtime.ApiResponse<Model7>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/alerts/statuses`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VisibilityStateInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model7FromJSON(jsonValue));
    }

    /**
     * edit config
     */
    async putAlertsStatuses(requestParameters: PutAlertsStatusesRequest): Promise<Model7> {
        const response = await this.putAlertsStatusesRaw(requestParameters);
        return await response.value();
    }

}
