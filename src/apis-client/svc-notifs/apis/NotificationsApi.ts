/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Failure,
    FailureFromJSON,
    FailureToJSON,
    NotificationInput,
    NotificationInputFromJSON,
    NotificationInputToJSON,
    PendingNotificationsInput,
    PendingNotificationsInputFromJSON,
    PendingNotificationsInputToJSON,
    PublicPendingNotification,
    PublicPendingNotificationFromJSON,
    PublicPendingNotificationToJSON,
} from '../models';

export interface PostNotificationsConfirmRequest {
    body?: PendingNotificationsInput;
}

export interface PostNotificationsPendingRequest {
    body?: NotificationInput;
}

/**
 * 
 */
export class NotificationsApi extends runtime.BaseAPI {

    /**
     * list monitoring configs
     */
    async getNotificationsPendingRaw(): Promise<runtime.ApiResponse<Array<PublicPendingNotification>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/notifications/pending`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicPendingNotificationFromJSON));
    }

    /**
     * list monitoring configs
     */
    async getNotificationsPending(): Promise<Array<PublicPendingNotification>> {
        const response = await this.getNotificationsPendingRaw();
        return await response.value();
    }

    /**
     * Modify a monitoring job
     */
    async postNotificationsConfirmRaw(requestParameters: PostNotificationsConfirmRequest): Promise<runtime.ApiResponse<PublicPendingNotification>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/notifications/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PendingNotificationsInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPendingNotificationFromJSON(jsonValue));
    }

    /**
     * Modify a monitoring job
     */
    async postNotificationsConfirm(requestParameters: PostNotificationsConfirmRequest): Promise<PublicPendingNotification> {
        const response = await this.postNotificationsConfirmRaw(requestParameters);
        return await response.value();
    }

    /**
     * add notif
     */
    async postNotificationsPendingRaw(requestParameters: PostNotificationsPendingRequest): Promise<runtime.ApiResponse<PublicPendingNotification>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/notifications/pending`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPendingNotificationFromJSON(jsonValue));
    }

    /**
     * add notif
     */
    async postNotificationsPending(requestParameters: PostNotificationsPendingRequest): Promise<PublicPendingNotification> {
        const response = await this.postNotificationsPendingRaw(requestParameters);
        return await response.value();
    }

}
