/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Board,
    BoardFromJSON,
    BoardToJSON,
    DailyStreamBase,
    DailyStreamBaseFromJSON,
    DailyStreamBaseToJSON,
    ExtendedBoard,
    ExtendedBoardFromJSON,
    ExtendedBoardToJSON,
    Failure,
    FailureFromJSON,
    FailureToJSON,
    Model4,
    Model4FromJSON,
    Model4ToJSON,
    PostAelerBoardQuery,
    PostAelerBoardQueryFromJSON,
    PostAelerBoardQueryToJSON,
} from '../models';

export interface DeleteBoardsRequest {
    boardId: string;
}

export interface GetBoardsDataRequest {
    boardId: string;
    type?: string;
    from?: string;
    to?: string;
    includeStats?: number;
    includeAllTsTypes?: number;
}

export interface PostBoardsRequest {
    body?: PostAelerBoardQuery;
}

export interface PostBoardsDataRequest {
    body?: Board;
}

/**
 * 
 */
export class BoardsApi extends runtime.BaseAPI {

    /**
     * Delete a board
     */
    async deleteBoardsRaw(requestParameters: DeleteBoardsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling deleteBoards.');
        }

        const queryParameters: any = {};

        if (requestParameters.boardId !== undefined) {
            queryParameters['boardId'] = requestParameters.boardId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/boards`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a board
     */
    async deleteBoards(requestParameters: DeleteBoardsRequest): Promise<void> {
        await this.deleteBoardsRaw(requestParameters);
    }

    /**
     * Get boards
     */
    async getBoardsRaw(): Promise<runtime.ApiResponse<Array<ExtendedBoard>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/boards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExtendedBoardFromJSON));
    }

    /**
     * Get boards
     */
    async getBoards(): Promise<Array<ExtendedBoard>> {
        const response = await this.getBoardsRaw();
        return await response.value();
    }

    /**
     * Get container position from IoT + AELER and dokobox data
     */
    async getBoardsDataRaw(requestParameters: GetBoardsDataRequest): Promise<runtime.ApiResponse<Array<DailyStreamBase>>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getBoardsData.');
        }

        const queryParameters: any = {};

        if (requestParameters.boardId !== undefined) {
            queryParameters['boardId'] = requestParameters.boardId;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.includeStats !== undefined) {
            queryParameters['includeStats'] = requestParameters.includeStats;
        }

        if (requestParameters.includeAllTsTypes !== undefined) {
            queryParameters['includeAllTsTypes'] = requestParameters.includeAllTsTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/boards/data`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DailyStreamBaseFromJSON));
    }

    /**
     * Get container position from IoT + AELER and dokobox data
     */
    async getBoardsData(requestParameters: GetBoardsDataRequest): Promise<Array<DailyStreamBase>> {
        const response = await this.getBoardsDataRaw(requestParameters);
        return await response.value();
    }

    /**
     * Post board 
     */
    async postBoardsRaw(requestParameters: PostBoardsRequest): Promise<runtime.ApiResponse<PostAelerBoardQuery>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/boards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAelerBoardQueryToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAelerBoardQueryFromJSON(jsonValue));
    }

    /**
     * Post board 
     */
    async postBoards(requestParameters: PostBoardsRequest): Promise<PostAelerBoardQuery> {
        const response = await this.postBoardsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Post board data
     */
    async postBoardsDataRaw(requestParameters: PostBoardsDataRequest): Promise<runtime.ApiResponse<Model4>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/boards/data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BoardToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model4FromJSON(jsonValue));
    }

    /**
     * Post board data
     */
    async postBoardsData(requestParameters: PostBoardsDataRequest): Promise<Model4> {
        const response = await this.postBoardsDataRaw(requestParameters);
        return await response.value();
    }

}
