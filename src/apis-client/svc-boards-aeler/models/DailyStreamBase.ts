/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TimedSample,
    TimedSampleFromJSON,
    TimedSampleFromJSONTyped,
    TimedSampleToJSON,
} from './';

/**
 * 
 * @export
 * @interface DailyStreamBase
 */
export interface DailyStreamBase {
    /**
     * 
     * @type {string}
     * @memberof DailyStreamBase
     */
    boardId: string;
    /**
     * 
     * @type {Date}
     * @memberof DailyStreamBase
     */
    day: Date;
    /**
     * tsType
     * @type {string}
     * @memberof DailyStreamBase
     */
    type: DailyStreamBaseTypeEnum;
    /**
     * 
     * @type {Array<TimedSample>}
     * @memberof DailyStreamBase
     */
    data: Array<TimedSample>;
}

/**
* @export
* @enum {string}
*/
export enum DailyStreamBaseTypeEnum {
    Events = 'events',
    Sensors = 'sensors',
    Gps = 'gps',
    Accelerometer = 'accelerometer',
    AmbientSensor = 'ambientSensor',
    LightSensor = 'lightSensor',
    BatteryManager = 'batteryManager',
    PowerBudget = 'powerBudget',
    CoreOutputGpios = 'coreOutputGpios',
    CoreInputGpios = 'coreInputGpios',
    GpioExpander = 'gpioExpander',
    CoulombCounter = 'coulombCounter',
    LteService = 'lteService',
    SystemMonitorService = 'systemMonitorService'
}

export function DailyStreamBaseFromJSON(json: any): DailyStreamBase {
    return DailyStreamBaseFromJSONTyped(json, false);
}

export function DailyStreamBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): DailyStreamBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'boardId': json['boardId'],
        'day': (new Date(json['day'])),
        'type': json['type'],
        'data': ((json['data'] as Array<any>).map(TimedSampleFromJSON)),
    };
}

export function DailyStreamBaseToJSON(value?: DailyStreamBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'boardId': value.boardId,
        'day': (value.day.toISOString()),
        'type': value.type,
        'data': ((value.data as Array<any>).map(TimedSampleToJSON)),
    };
}


