/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MsgSensorsUpdatedAt
 */
export interface MsgSensorsUpdatedAt {
    /**
     * temperature inside the container
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    temperature?: number;
    /**
     * temperature outside the container
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    externalTemperature?: number;
    /**
     * humidity inside the container
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    humidity?: number;
    /**
     * humidity outside the container
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    externalHumidity?: number;
    /**
     * pressure inside the container
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    pressure?: number;
    /**
     * pressure outside the container
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    externalPressure?: number;
    /**
     * First door sensor - 1 is closed 0 is open
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    door?: number;
    /**
     * Second door sensor, redundant - 1 is closed 0 is open
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    doorBackup?: number;
    /**
     * Indoor air quality
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    iaq?: number;
    /**
     * Total Volatile Organic Compounds
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    ngm3TVOC?: number;
    /**
     * parts per million carbon dioxide
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    ppmeCO2?: number;
    /**
     * parts per million ethanol
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    ppbEtOH?: number;
    /**
     * outdoor air quality
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    oaqNO2?: number;
    /**
     * outdoor air qualiry ozone
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    oaqO3?: number;
    /**
     * probability of nitrogen dioxide
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    probNO2?: number;
    /**
     * parts per billion nitrogen dioxide
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    ppbNO2?: number;
    /**
     * parts per billion ozone
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    ppb03?: number;
    /**
     * internal light sensor
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    centiLux?: number;
    /**
     * external light sensor
     * @type {number}
     * @memberof MsgSensorsUpdatedAt
     */
    centiLuxExternal?: number;
    /**
     * 
     * @type {Date}
     * @memberof MsgSensorsUpdatedAt
     */
    updatedAt: Date;
}

export function MsgSensorsUpdatedAtFromJSON(json: any): MsgSensorsUpdatedAt {
    return MsgSensorsUpdatedAtFromJSONTyped(json, false);
}

export function MsgSensorsUpdatedAtFromJSONTyped(json: any, ignoreDiscriminator: boolean): MsgSensorsUpdatedAt {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'temperature': !exists(json, 'temperature') ? undefined : json['temperature'],
        'externalTemperature': !exists(json, 'externalTemperature') ? undefined : json['externalTemperature'],
        'humidity': !exists(json, 'humidity') ? undefined : json['humidity'],
        'externalHumidity': !exists(json, 'externalHumidity') ? undefined : json['externalHumidity'],
        'pressure': !exists(json, 'pressure') ? undefined : json['pressure'],
        'externalPressure': !exists(json, 'externalPressure') ? undefined : json['externalPressure'],
        'door': !exists(json, 'door') ? undefined : json['door'],
        'doorBackup': !exists(json, 'doorBackup') ? undefined : json['doorBackup'],
        'iaq': !exists(json, 'iaq') ? undefined : json['iaq'],
        'ngm3TVOC': !exists(json, 'ngm3TVOC') ? undefined : json['ngm3TVOC'],
        'ppmeCO2': !exists(json, 'ppmeCO2') ? undefined : json['ppmeCO2'],
        'ppbEtOH': !exists(json, 'ppbEtOH') ? undefined : json['ppbEtOH'],
        'oaqNO2': !exists(json, 'oaqNO2') ? undefined : json['oaqNO2'],
        'oaqO3': !exists(json, 'oaqO3') ? undefined : json['oaqO3'],
        'probNO2': !exists(json, 'probNO2') ? undefined : json['probNO2'],
        'ppbNO2': !exists(json, 'ppbNO2') ? undefined : json['ppbNO2'],
        'ppb03': !exists(json, 'ppb03') ? undefined : json['ppb03'],
        'centiLux': !exists(json, 'centiLux') ? undefined : json['centiLux'],
        'centiLuxExternal': !exists(json, 'centiLuxExternal') ? undefined : json['centiLuxExternal'],
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function MsgSensorsUpdatedAtToJSON(value?: MsgSensorsUpdatedAt | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'temperature': value.temperature,
        'externalTemperature': value.externalTemperature,
        'humidity': value.humidity,
        'externalHumidity': value.externalHumidity,
        'pressure': value.pressure,
        'externalPressure': value.externalPressure,
        'door': value.door,
        'doorBackup': value.doorBackup,
        'iaq': value.iaq,
        'ngm3TVOC': value.ngm3TVOC,
        'ppmeCO2': value.ppmeCO2,
        'ppbEtOH': value.ppbEtOH,
        'oaqNO2': value.oaqNO2,
        'oaqO3': value.oaqO3,
        'probNO2': value.probNO2,
        'ppbNO2': value.ppbNO2,
        'ppb03': value.ppb03,
        'centiLux': value.centiLux,
        'centiLuxExternal': value.centiLuxExternal,
        'updatedAt': (value.updatedAt.toISOString()),
    };
}


