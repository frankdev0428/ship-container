/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BoardBatteryStatus,
    BoardBatteryStatusFromJSON,
    BoardBatteryStatusFromJSONTyped,
    BoardBatteryStatusToJSON,
    LatestMessageDate,
    LatestMessageDateFromJSON,
    LatestMessageDateFromJSONTyped,
    LatestMessageDateToJSON,
    MsgBatteryManagerUpdatedAt,
    MsgBatteryManagerUpdatedAtFromJSON,
    MsgBatteryManagerUpdatedAtFromJSONTyped,
    MsgBatteryManagerUpdatedAtToJSON,
    MsgEventsUpdatedAt,
    MsgEventsUpdatedAtFromJSON,
    MsgEventsUpdatedAtFromJSONTyped,
    MsgEventsUpdatedAtToJSON,
    MsgPositionUpdatedAt,
    MsgPositionUpdatedAtFromJSON,
    MsgPositionUpdatedAtFromJSONTyped,
    MsgPositionUpdatedAtToJSON,
    MsgPowerBudgetUpdatedAt,
    MsgPowerBudgetUpdatedAtFromJSON,
    MsgPowerBudgetUpdatedAtFromJSONTyped,
    MsgPowerBudgetUpdatedAtToJSON,
    MsgSensorsUpdatedAt,
    MsgSensorsUpdatedAtFromJSON,
    MsgSensorsUpdatedAtFromJSONTyped,
    MsgSensorsUpdatedAtToJSON,
} from './';

/**
 * 
 * @export
 * @interface ExtendedBoard
 */
export interface ExtendedBoard {
    /**
     * 
     * @type {string}
     * @memberof ExtendedBoard
     */
    boardId: string;
    /**
     * nexxiot, aeler, kizy, etc
     * @type {string}
     * @memberof ExtendedBoard
     */
    source?: string;
    /**
     * Container name associated to device
     * @type {string}
     * @memberof ExtendedBoard
     */
    containerId?: string;
    /**
     * Board build date
     * @type {Date}
     * @memberof ExtendedBoard
     */
    buildDate?: Date;
    /**
     * Board hardware version
     * @type {string}
     * @memberof ExtendedBoard
     */
    hwVersion?: string;
    /**
     * Board firmware version
     * @type {string}
     * @memberof ExtendedBoard
     */
    fwVersion?: string;
    /**
     * Board hardware minor revision
     * @type {string}
     * @memberof ExtendedBoard
     */
    hwMinorRevision?: string;
    /**
     * Board firmware minor revision
     * @type {string}
     * @memberof ExtendedBoard
     */
    fwMinorRevision?: string;
    /**
     * hasGps
     * @type {boolean}
     * @memberof ExtendedBoard
     */
    hasGps?: boolean;
    /**
     * hasShock
     * @type {boolean}
     * @memberof ExtendedBoard
     */
    hasShock?: boolean;
    /**
     * hasTempExt
     * @type {boolean}
     * @memberof ExtendedBoard
     */
    hasTempExt?: boolean;
    /**
     * hasTempInt
     * @type {boolean}
     * @memberof ExtendedBoard
     */
    hasTempInt?: boolean;
    /**
     * hasHumpExt
     * @type {boolean}
     * @memberof ExtendedBoard
     */
    hasHumExt?: boolean;
    /**
     * hasHumpInt
     * @type {boolean}
     * @memberof ExtendedBoard
     */
    hasHumInt?: boolean;
    /**
     * hasPressureExt
     * @type {boolean}
     * @memberof ExtendedBoard
     */
    hasPressureExt?: boolean;
    /**
     * hasPressureInt
     * @type {boolean}
     * @memberof ExtendedBoard
     */
    hasPressureInt?: boolean;
    /**
     * hasGases
     * @type {boolean}
     * @memberof ExtendedBoard
     */
    hasGases?: boolean;
    /**
     * hasLightInt
     * @type {boolean}
     * @memberof ExtendedBoard
     */
    hasLightInt?: boolean;
    /**
     * hasLightExt
     * @type {boolean}
     * @memberof ExtendedBoard
     */
    hasLightExt?: boolean;
    /**
     * hasDoor
     * @type {boolean}
     * @memberof ExtendedBoard
     */
    hasDoor?: boolean;
    /**
     * hasRFID
     * @type {boolean}
     * @memberof ExtendedBoard
     */
    hasRFID?: boolean;
    /**
     * 
     * @type {MsgSensorsUpdatedAt}
     * @memberof ExtendedBoard
     */
    sensors?: MsgSensorsUpdatedAt;
    /**
     * 
     * @type {MsgPositionUpdatedAt}
     * @memberof ExtendedBoard
     */
    gps?: MsgPositionUpdatedAt;
    /**
     * 
     * @type {MsgEventsUpdatedAt}
     * @memberof ExtendedBoard
     */
    events?: MsgEventsUpdatedAt;
    /**
     * 
     * @type {MsgPowerBudgetUpdatedAt}
     * @memberof ExtendedBoard
     */
    powerBudget?: MsgPowerBudgetUpdatedAt;
    /**
     * 
     * @type {MsgBatteryManagerUpdatedAt}
     * @memberof ExtendedBoard
     */
    batteryManager?: MsgBatteryManagerUpdatedAt;
    /**
     * 
     * @type {BoardBatteryStatus}
     * @memberof ExtendedBoard
     */
    boardBatteryStatus?: BoardBatteryStatus;
    /**
     * 
     * @type {LatestMessageDate}
     * @memberof ExtendedBoard
     */
    latestMessageDate?: LatestMessageDate;
}

export function ExtendedBoardFromJSON(json: any): ExtendedBoard {
    return ExtendedBoardFromJSONTyped(json, false);
}

export function ExtendedBoardFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtendedBoard {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'boardId': json['boardId'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'containerId': !exists(json, 'containerId') ? undefined : json['containerId'],
        'buildDate': !exists(json, 'buildDate') ? undefined : (new Date(json['buildDate'])),
        'hwVersion': !exists(json, 'hwVersion') ? undefined : json['hwVersion'],
        'fwVersion': !exists(json, 'fwVersion') ? undefined : json['fwVersion'],
        'hwMinorRevision': !exists(json, 'hwMinorRevision') ? undefined : json['hwMinorRevision'],
        'fwMinorRevision': !exists(json, 'fwMinorRevision') ? undefined : json['fwMinorRevision'],
        'hasGps': !exists(json, 'hasGps') ? undefined : json['hasGps'],
        'hasShock': !exists(json, 'hasShock') ? undefined : json['hasShock'],
        'hasTempExt': !exists(json, 'hasTempExt') ? undefined : json['hasTempExt'],
        'hasTempInt': !exists(json, 'hasTempInt') ? undefined : json['hasTempInt'],
        'hasHumExt': !exists(json, 'hasHumExt') ? undefined : json['hasHumExt'],
        'hasHumInt': !exists(json, 'hasHumInt') ? undefined : json['hasHumInt'],
        'hasPressureExt': !exists(json, 'hasPressureExt') ? undefined : json['hasPressureExt'],
        'hasPressureInt': !exists(json, 'hasPressureInt') ? undefined : json['hasPressureInt'],
        'hasGases': !exists(json, 'hasGases') ? undefined : json['hasGases'],
        'hasLightInt': !exists(json, 'hasLightInt') ? undefined : json['hasLightInt'],
        'hasLightExt': !exists(json, 'hasLightExt') ? undefined : json['hasLightExt'],
        'hasDoor': !exists(json, 'hasDoor') ? undefined : json['hasDoor'],
        'hasRFID': !exists(json, 'hasRFID') ? undefined : json['hasRFID'],
        'sensors': !exists(json, 'sensors') ? undefined : MsgSensorsUpdatedAtFromJSON(json['sensors']),
        'gps': !exists(json, 'gps') ? undefined : MsgPositionUpdatedAtFromJSON(json['gps']),
        'events': !exists(json, 'events') ? undefined : MsgEventsUpdatedAtFromJSON(json['events']),
        'powerBudget': !exists(json, 'powerBudget') ? undefined : MsgPowerBudgetUpdatedAtFromJSON(json['powerBudget']),
        'batteryManager': !exists(json, 'batteryManager') ? undefined : MsgBatteryManagerUpdatedAtFromJSON(json['batteryManager']),
        'boardBatteryStatus': !exists(json, 'boardBatteryStatus') ? undefined : BoardBatteryStatusFromJSON(json['boardBatteryStatus']),
        'latestMessageDate': !exists(json, 'latestMessageDate') ? undefined : LatestMessageDateFromJSON(json['latestMessageDate']),
    };
}

export function ExtendedBoardToJSON(value?: ExtendedBoard | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'boardId': value.boardId,
        'source': value.source,
        'containerId': value.containerId,
        'buildDate': value.buildDate === undefined ? undefined : (value.buildDate.toISOString()),
        'hwVersion': value.hwVersion,
        'fwVersion': value.fwVersion,
        'hwMinorRevision': value.hwMinorRevision,
        'fwMinorRevision': value.fwMinorRevision,
        'hasGps': value.hasGps,
        'hasShock': value.hasShock,
        'hasTempExt': value.hasTempExt,
        'hasTempInt': value.hasTempInt,
        'hasHumExt': value.hasHumExt,
        'hasHumInt': value.hasHumInt,
        'hasPressureExt': value.hasPressureExt,
        'hasPressureInt': value.hasPressureInt,
        'hasGases': value.hasGases,
        'hasLightInt': value.hasLightInt,
        'hasLightExt': value.hasLightExt,
        'hasDoor': value.hasDoor,
        'hasRFID': value.hasRFID,
        'sensors': MsgSensorsUpdatedAtToJSON(value.sensors),
        'gps': MsgPositionUpdatedAtToJSON(value.gps),
        'events': MsgEventsUpdatedAtToJSON(value.events),
        'powerBudget': MsgPowerBudgetUpdatedAtToJSON(value.powerBudget),
        'batteryManager': MsgBatteryManagerUpdatedAtToJSON(value.batteryManager),
        'boardBatteryStatus': BoardBatteryStatusToJSON(value.boardBatteryStatus),
        'latestMessageDate': LatestMessageDateToJSON(value.latestMessageDate),
    };
}


