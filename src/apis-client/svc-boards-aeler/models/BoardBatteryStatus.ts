/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BoardBatteryStatus
 */
export interface BoardBatteryStatus {
    /**
     * most recent of X battery / powerout data points
     * @type {Date}
     * @memberof BoardBatteryStatus
     */
    mostRecentPowerBudgetTime: Date;
    /**
     * oldest of X battery / powerout data points
     * @type {Date}
     * @memberof BoardBatteryStatus
     */
    oldestPowerBudgetTime: Date;
    /**
     * battery data point value at dateEnd
     * @type {number}
     * @memberof BoardBatteryStatus
     */
    mostRecentBatteryPercentageValue: number;
    /**
     * battery data point value at dateStart
     * @type {number}
     * @memberof BoardBatteryStatus
     */
    oldestBatteryPercentageValue: number;
    /**
     * dateOfLatestMessageIncoming, the time received of most recent message
     * @type {Date}
     * @memberof BoardBatteryStatus
     */
    mostRecentPowerBudgetTimeReceived: Date;
    /**
     * dateOfLatestMessageIncoming, the time received of most recent message
     * @type {Date}
     * @memberof BoardBatteryStatus
     */
    mostRecentBatteryManagerTimeReceived: Date;
    /**
     * number of battery data points within dateStart-dateEnd
     * @type {number}
     * @memberof BoardBatteryStatus
     */
    nPointsPowerBudget: number;
    /**
     * number of powerOut data points within dateStart-dateEnd
     * @type {number}
     * @memberof BoardBatteryStatus
     */
    nPointsBatteryManager: number;
    /**
     * mean powerOut (charging by solarpanel) over date range
     * @type {number}
     * @memberof BoardBatteryStatus
     */
    powerOutMeanValue: number;
}

export function BoardBatteryStatusFromJSON(json: any): BoardBatteryStatus {
    return BoardBatteryStatusFromJSONTyped(json, false);
}

export function BoardBatteryStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): BoardBatteryStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mostRecentPowerBudgetTime': (new Date(json['mostRecentPowerBudgetTime'])),
        'oldestPowerBudgetTime': (new Date(json['oldestPowerBudgetTime'])),
        'mostRecentBatteryPercentageValue': json['mostRecentBatteryPercentageValue'],
        'oldestBatteryPercentageValue': json['oldestBatteryPercentageValue'],
        'mostRecentPowerBudgetTimeReceived': (new Date(json['mostRecentPowerBudgetTimeReceived'])),
        'mostRecentBatteryManagerTimeReceived': (new Date(json['mostRecentBatteryManagerTimeReceived'])),
        'nPointsPowerBudget': json['nPointsPowerBudget'],
        'nPointsBatteryManager': json['nPointsBatteryManager'],
        'powerOutMeanValue': json['powerOutMeanValue'],
    };
}

export function BoardBatteryStatusToJSON(value?: BoardBatteryStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mostRecentPowerBudgetTime': (value.mostRecentPowerBudgetTime.toISOString()),
        'oldestPowerBudgetTime': (value.oldestPowerBudgetTime.toISOString()),
        'mostRecentBatteryPercentageValue': value.mostRecentBatteryPercentageValue,
        'oldestBatteryPercentageValue': value.oldestBatteryPercentageValue,
        'mostRecentPowerBudgetTimeReceived': (value.mostRecentPowerBudgetTimeReceived.toISOString()),
        'mostRecentBatteryManagerTimeReceived': (value.mostRecentBatteryManagerTimeReceived.toISOString()),
        'nPointsPowerBudget': value.nPointsPowerBudget,
        'nPointsBatteryManager': value.nPointsBatteryManager,
        'powerOutMeanValue': value.powerOutMeanValue,
    };
}


