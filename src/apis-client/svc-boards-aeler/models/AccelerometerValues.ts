/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AccelerometerValues
 */
export interface AccelerometerValues {
    /**
     * Signed axis acceleration value for X-axis
     * @type {number}
     * @memberof AccelerometerValues
     */
    outX?: number;
    /**
     * Signed axis acceleration value for Y-axis
     * @type {number}
     * @memberof AccelerometerValues
     */
    outY?: number;
    /**
     * Signed axis acceleration value for Z-axis
     * @type {number}
     * @memberof AccelerometerValues
     */
    outZ?: number;
    /**
     * 
     * @type {number}
     * @memberof AccelerometerValues
     */
    whoAmI?: number;
    /**
     * 
     * @type {number}
     * @memberof AccelerometerValues
     */
    status?: number;
    /**
     * 
     * @type {number}
     * @memberof AccelerometerValues
     */
    fifoSamples?: number;
    /**
     * 
     * @type {number}
     * @memberof AccelerometerValues
     */
    statusDup?: number;
    /**
     * 
     * @type {number}
     * @memberof AccelerometerValues
     */
    wakeUpSrc?: number;
    /**
     * 
     * @type {number}
     * @memberof AccelerometerValues
     */
    tapSrc?: number;
    /**
     * 
     * @type {number}
     * @memberof AccelerometerValues
     */
    sixdSrc?: number;
    /**
     * 
     * @type {number}
     * @memberof AccelerometerValues
     */
    allIntSrc?: number;
}

export function AccelerometerValuesFromJSON(json: any): AccelerometerValues {
    return AccelerometerValuesFromJSONTyped(json, false);
}

export function AccelerometerValuesFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccelerometerValues {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'outX': !exists(json, 'outX') ? undefined : json['outX'],
        'outY': !exists(json, 'outY') ? undefined : json['outY'],
        'outZ': !exists(json, 'outZ') ? undefined : json['outZ'],
        'whoAmI': !exists(json, 'whoAmI') ? undefined : json['whoAmI'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'fifoSamples': !exists(json, 'fifoSamples') ? undefined : json['fifoSamples'],
        'statusDup': !exists(json, 'statusDup') ? undefined : json['statusDup'],
        'wakeUpSrc': !exists(json, 'wakeUpSrc') ? undefined : json['wakeUpSrc'],
        'tapSrc': !exists(json, 'tapSrc') ? undefined : json['tapSrc'],
        'sixdSrc': !exists(json, 'sixdSrc') ? undefined : json['sixdSrc'],
        'allIntSrc': !exists(json, 'allIntSrc') ? undefined : json['allIntSrc'],
    };
}

export function AccelerometerValuesToJSON(value?: AccelerometerValues | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'outX': value.outX,
        'outY': value.outY,
        'outZ': value.outZ,
        'whoAmI': value.whoAmI,
        'status': value.status,
        'fifoSamples': value.fifoSamples,
        'statusDup': value.statusDup,
        'wakeUpSrc': value.wakeUpSrc,
        'tapSrc': value.tapSrc,
        'sixdSrc': value.sixdSrc,
        'allIntSrc': value.allIntSrc,
    };
}


