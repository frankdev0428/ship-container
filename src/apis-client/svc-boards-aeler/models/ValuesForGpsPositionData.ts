/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ValuesForGpsPositionData
 */
export interface ValuesForGpsPositionData {
    /**
     * A tuple containing the longitude and the latitude
     * @type {Array<number>}
     * @memberof ValuesForGpsPositionData
     */
    position: Array<number>;
    /**
     * Day (1-31) of UTC time
     * @type {number}
     * @memberof ValuesForGpsPositionData
     */
    day: number;
    /**
     * Height above mean sea level in mm
     * @type {number}
     * @memberof ValuesForGpsPositionData
     */
    hmsl: number;
    /**
     * Horizontal accuracy estimate in mm
     * @type {number}
     * @memberof ValuesForGpsPositionData
     */
    hacc: number;
    /**
     * Ground Speed (2-D) in mm/s
     * @type {number}
     * @memberof ValuesForGpsPositionData
     */
    gspeed: number;
    /**
     * Heading in degrees
     * @type {number}
     * @memberof ValuesForGpsPositionData
     */
    heading: number;
    /**
     * GNSSfix Type: 0: no fix; 2: 2D-fix; 3: 3D-fix
     * @type {number}
     * @memberof ValuesForGpsPositionData
     */
    fixtype: number;
    /**
     * Ground distance since last reset in m
     * @type {number}
     * @memberof ValuesForGpsPositionData
     */
    distance: number;
    /**
     * Year (1-65635) of UTC time
     * @type {number}
     * @memberof ValuesForGpsPositionData
     */
    year: number;
    /**
     * Month (1-12) of UTC time
     * @type {number}
     * @memberof ValuesForGpsPositionData
     */
    month: number;
    /**
     * Hour (0-23) of UTC time
     * @type {number}
     * @memberof ValuesForGpsPositionData
     */
    hour: number;
    /**
     * Minute (0-59) of UTC time
     * @type {number}
     * @memberof ValuesForGpsPositionData
     */
    minute: number;
    /**
     * Second (0-60) of UTC time
     * @type {number}
     * @memberof ValuesForGpsPositionData
     */
    second: number;
    /**
     * Number of satellites used in Nav Solution
     * @type {number}
     * @memberof ValuesForGpsPositionData
     */
    numsv: number;
}

export function ValuesForGpsPositionDataFromJSON(json: any): ValuesForGpsPositionData {
    return ValuesForGpsPositionDataFromJSONTyped(json, false);
}

export function ValuesForGpsPositionDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValuesForGpsPositionData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'position': json['position'],
        'day': json['day'],
        'hmsl': json['hmsl'],
        'hacc': json['hacc'],
        'gspeed': json['gspeed'],
        'heading': json['heading'],
        'fixtype': json['fixtype'],
        'distance': json['distance'],
        'year': json['year'],
        'month': json['month'],
        'hour': json['hour'],
        'minute': json['minute'],
        'second': json['second'],
        'numsv': json['numsv'],
    };
}

export function ValuesForGpsPositionDataToJSON(value?: ValuesForGpsPositionData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'position': value.position,
        'day': value.day,
        'hmsl': value.hmsl,
        'hacc': value.hacc,
        'gspeed': value.gspeed,
        'heading': value.heading,
        'fixtype': value.fixtype,
        'distance': value.distance,
        'year': value.year,
        'month': value.month,
        'hour': value.hour,
        'minute': value.minute,
        'second': value.second,
        'numsv': value.numsv,
    };
}


