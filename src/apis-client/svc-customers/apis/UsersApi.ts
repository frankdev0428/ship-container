/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Failure,
    FailureFromJSON,
    FailureToJSON,
    Model4,
    Model4FromJSON,
    Model4ToJSON,
    Permission,
    PermissionFromJSON,
    PermissionToJSON,
    PostUserPermitInput,
    PostUserPermitInputFromJSON,
    PostUserPermitInputToJSON,
    PublicUser,
    PublicUserFromJSON,
    PublicUserToJSON,
    RequestByPermission,
    RequestByPermissionFromJSON,
    RequestByPermissionToJSON,
    ResponseStatus,
    ResponseStatusFromJSON,
    ResponseStatusToJSON,
    UserInput,
    UserInputFromJSON,
    UserInputToJSON,
} from '../models';

export interface DeleteUsersPermissionRequest {
    body?: RequestByPermission;
}

export interface DeleteUsersUseridRequest {
    userId: string;
}

export interface DeleteUsersUseridGroupGroupidRequest {
    userId: string;
    groupId: string;
}

export interface GetUsersPermissionsRequest {
    userId: string;
}

export interface PostUsersRequest {
    body?: UserInput;
}

export interface PostUsersPermissionRequest {
    body?: PostUserPermitInput;
}

export interface PostUsersUseridGroupRequest {
    userId: string;
    groupId: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Update user permission
     */
    async deleteUsersPermissionRaw(requestParameters: DeleteUsersPermissionRequest): Promise<runtime.ApiResponse<ResponseStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/users/permission`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RequestByPermissionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseStatusFromJSON(jsonValue));
    }

    /**
     * Update user permission
     */
    async deleteUsersPermission(requestParameters: DeleteUsersPermissionRequest): Promise<ResponseStatus> {
        const response = await this.deleteUsersPermissionRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async deleteUsersUseridRaw(requestParameters: DeleteUsersUseridRequest): Promise<runtime.ApiResponse<Model4>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUsersUserid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Model4FromJSON(jsonValue));
    }

    /**
     * FIXME
     */
    async deleteUsersUserid(requestParameters: DeleteUsersUseridRequest): Promise<Model4> {
        const response = await this.deleteUsersUseridRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async deleteUsersUseridGroupGroupidRaw(requestParameters: DeleteUsersUseridGroupGroupidRequest): Promise<runtime.ApiResponse<PublicUser>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUsersUseridGroupGroupid.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling deleteUsersUseridGroupGroupid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/users/{userId}/group/{groupId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicUserFromJSON(jsonValue));
    }

    /**
     * FIXME
     */
    async deleteUsersUseridGroupGroupid(requestParameters: DeleteUsersUseridGroupGroupidRequest): Promise<PublicUser> {
        const response = await this.deleteUsersUseridGroupGroupidRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async getUsersRaw(): Promise<runtime.ApiResponse<Array<PublicUser>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicUserFromJSON));
    }

    /**
     * FIXME
     */
    async getUsers(): Promise<Array<PublicUser>> {
        const response = await this.getUsersRaw();
        return await response.value();
    }

    /**
     * Get user permissions
     */
    async getUsersPermissionsRaw(requestParameters: GetUsersPermissionsRequest): Promise<runtime.ApiResponse<Array<Permission>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUsersPermissions.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/users/permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionFromJSON));
    }

    /**
     * Get user permissions
     */
    async getUsersPermissions(requestParameters: GetUsersPermissionsRequest): Promise<Array<Permission>> {
        const response = await this.getUsersPermissionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async postUsersRaw(requestParameters: PostUsersRequest): Promise<runtime.ApiResponse<PublicUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicUserFromJSON(jsonValue));
    }

    /**
     * FIXME
     */
    async postUsers(requestParameters: PostUsersRequest): Promise<PublicUser> {
        const response = await this.postUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update user permission
     */
    async postUsersPermissionRaw(requestParameters: PostUsersPermissionRequest): Promise<runtime.ApiResponse<Permission>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/users/permission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostUserPermitInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     * Update user permission
     */
    async postUsersPermission(requestParameters: PostUsersPermissionRequest): Promise<Permission> {
        const response = await this.postUsersPermissionRaw(requestParameters);
        return await response.value();
    }

    /**
     * FIXME
     */
    async postUsersUseridGroupRaw(requestParameters: PostUsersUseridGroupRequest): Promise<runtime.ApiResponse<PublicUser>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling postUsersUseridGroup.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling postUsersUseridGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupId !== undefined) {
            queryParameters['groupId'] = requestParameters.groupId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/users/{userId}/group`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicUserFromJSON(jsonValue));
    }

    /**
     * FIXME
     */
    async postUsersUseridGroup(requestParameters: PostUsersUseridGroupRequest): Promise<PublicUser> {
        const response = await this.postUsersUseridGroupRaw(requestParameters);
        return await response.value();
    }

}
