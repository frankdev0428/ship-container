/* tslint:disable */
/* eslint-disable */
/**
 * Aeler demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BatteryMeasurement,
    BatteryMeasurementFromJSON,
    BatteryMeasurementFromJSONTyped,
    BatteryMeasurementToJSON,
    GpsMeasurement,
    GpsMeasurementFromJSON,
    GpsMeasurementFromJSONTyped,
    GpsMeasurementToJSON,
    SensorsMeasurement,
    SensorsMeasurementFromJSON,
    SensorsMeasurementFromJSONTyped,
    SensorsMeasurementToJSON,
} from './';

/**
 * 
 * @export
 * @interface Values
 */
export interface Values {
    /**
     * 
     * @type {Date}
     * @memberof Values
     */
    measurementTime: Date;
    /**
     * gps, sensors, battery
     * @type {string}
     * @memberof Values
     */
    measurementType: string;
    /**
     * 
     * @type {GpsMeasurement}
     * @memberof Values
     */
    gpsMeasurement?: GpsMeasurement;
    /**
     * 
     * @type {SensorsMeasurement}
     * @memberof Values
     */
    sensorsMeasurement?: SensorsMeasurement;
    /**
     * 
     * @type {BatteryMeasurement}
     * @memberof Values
     */
    batteryMeasurement?: BatteryMeasurement;
}

export function ValuesFromJSON(json: any): Values {
    return ValuesFromJSONTyped(json, false);
}

export function ValuesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Values {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'measurementTime': (new Date(json['measurementTime'])),
        'measurementType': json['measurementType'],
        'gpsMeasurement': !exists(json, 'gpsMeasurement') ? undefined : GpsMeasurementFromJSON(json['gpsMeasurement']),
        'sensorsMeasurement': !exists(json, 'sensorsMeasurement') ? undefined : SensorsMeasurementFromJSON(json['sensorsMeasurement']),
        'batteryMeasurement': !exists(json, 'batteryMeasurement') ? undefined : BatteryMeasurementFromJSON(json['batteryMeasurement']),
    };
}

export function ValuesToJSON(value?: Values | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'measurementTime': (value.measurementTime.toISOString().substr(0,10)),
        'measurementType': value.measurementType,
        'gpsMeasurement': GpsMeasurementToJSON(value.gpsMeasurement),
        'sensorsMeasurement': SensorsMeasurementToJSON(value.sensorsMeasurement),
        'batteryMeasurement': BatteryMeasurementToJSON(value.batteryMeasurement),
    };
}


